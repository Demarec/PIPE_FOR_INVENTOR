
Imports Inventor





Public Class FormPiping

    Dim oInvDoc As Document
    Dim oProjectPath As String
    Dim oFilename As String
    Dim oDescription As String
    Dim oItemName As String
    Dim oMaterial As String
    Dim oPipeSize As String
    Dim oSupportType As String
    Dim oPipeDia As Double
    Dim oPipeSch As Double
    Dim oElbowRadius As Double
    Dim oElbowAngle As Double
    Dim oElbowLenght As Double
    Dim oReducerLenght As Double
    Dim oTeeLenght As Double
    Dim oBranchLenght As Double
    Dim oPulledTeeBranchLenght As Double
    Dim oBranchDia As Double
    Dim oBranchSize As String
    Dim oCapLenght As Double
    Dim oCouplingLenght As Double
    Dim oSockLenght As Double
    Dim oUnionLenght As Double
    Dim oOletLenght As Double
    Dim oFlangeDia As Double
    Dim oFlangeLenght As Double
    Dim oFlangeThick As Double
    Dim oFlangeKDia As Double
    Dim oFlangeBoltHoleDia As Double
    Dim oFlangeStubThick As Double
    Dim oFlangeBoltNumber As Integer
    Public pi As Double
    Dim oNippleLenght As Object
    Dim oGasketThick As Double
    Dim turnLeft As Boolean = False
    Dim turnRight As Boolean = False
    Dim acceptKey As Boolean = False
    Public oPipeLenght As Double
    Public oOldPipeLenght As Integer
    Public oNewPipeLenght As Integer
    Public oInvApp As Inventor.Application
    Public oElbowInsertAngle As Double
    Public oPartAglePlaneProxy As WorkPlaneProxy
    Public oOldPipeOcc As ComponentOccurrence

    'for piperoute
    Public oPipeOcc As ComponentOccurrence
    Public oOldPipe As PartDocument
    Public oEndOfPipeRoute As String
    Public elbowOcc As ComponentOccurrence
    Public oOrient As String




    Private Sub FormPiping_Load(sender As Object, e As EventArgs) Handles MyBase.Load

        '--------------OPTION TO MAKE IT STOP WORKING AFTER A SPECIFIED DATA----------------------
        '
        'Dim oExpdate As Long
        'Dim oThisdate = Date.Now.Ticks
        'oExpdate = 636920928000000000 'Monday, April 29, 2019

        'If oThisdate > oExpdate Then
        '    MsgBox("Your database could not be rebuilt." & vbCrLf & "Some files are corrupted." & vbCrLf & "The application will be closed.", vbOKOnly + "4064", "Fatal Error")
        '    Close()
        'End If
        '
        '-----------------------------------------------------------------------------------------

        Try
            oInvApp = GetObject(, "Inventor.Application")
        Catch ex As Exception
            MsgBox("Inventor must be running.", vbOKOnly + "4064", "Warning")
            btnPlacePart.Enabled = False
            btnPipeLenghtChange.Enabled = False
            btnPipeRoute.Enabled = False
            GoTo resumeload
        End Try

        'If their was a crash within a sub and the ScreenUpdate was set false then this will correct it 
        oInvApp.ScreenUpdating = True

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
        End If





resumeload:
        TopMost = True
        cbxDN.Visible = True
        lblDN.Visible = True
        cbxDN.SelectedIndex = 5
        cbxPipeLenght.SelectedIndex = 4
        oMaterial = "304L"
        oItemName = "Pipe"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = "DN50"
        all_Pictures_Off()
        lblPipeLenght.Visible = True
        cbxPipeLenght.Visible = True
        btnPipeLenghtChange.Visible = True
        PicPipeSS.Visible = True
        oBranchSize = "DN40"
        oGasketThick = 3
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
        SetVisualStyle()

    End Sub



    Private Sub Get_ProjectPath()
        Try
            oInvApp = GetObject(, "Inventor.Application")
            oProjectPath = oInvApp.FileLocations.Workspace
            Select Case oItemName
                Case "Gasket"
                    lblProjectPath.Text = oProjectPath & "\Piping\Gaskets\"
                Case "BoltSet"
                    lblProjectPath.Text = oProjectPath & "\Piping\BoltSets\"
                Case "Support"
                    lblProjectPath.Text = oProjectPath & "\Piping\Supports\"
                Case Else
                    lblProjectPath.Text = oProjectPath & "\Piping\" & oMaterial & "\" & oItemName & "\"
            End Select
        Catch ex As Exception
            lblProjectPath.Text = "No Path, Inventor is not active!"
            Exit Sub
        End Try
    End Sub

    Private Sub Get_filename()
        Select Case oItemName
            Case "Pipe"
                lblFilename.Text = oItemName & "_" & oPipeSize & "_" & oMaterial & "_" & oPipeLenght & ".ipt"
            Case "BranchPipe"
                lblFilename.Text = oItemName & "_" & oPipeSize & "_" & oMaterial & "_" & oPipeLenght & ".ipt"
            Case "RedTee"
                lblFilename.Text = oItemName & "_" & oPipeSize & "_" & oBranchSize & "_" & oMaterial & ".ipt"
            Case "ConcRed"
                lblFilename.Text = oItemName & "_" & oPipeSize & "_" & oBranchSize & "_" & oMaterial & ".ipt"
            Case "EccRed"
                lblFilename.Text = oItemName & "_" & oPipeSize & "_" & oBranchSize & "_" & oMaterial & ".ipt"
            Case "FemaleAdapter"
                lblFilename.Text = oItemName & "_" & oPipeSize & "_" & oBranchSize & "_" & oMaterial & ".ipt"
            Case "MaleAdapter"
                lblFilename.Text = oItemName & "_" & oPipeSize & "_" & oBranchSize & "_" & oMaterial & ".ipt"
            Case "Olet"
                lblFilename.Text = oItemName & "_" & oPipeSize & "_" & oBranchSize & "_" & oMaterial & ".ipt"
            Case "AdapterBush"
                lblFilename.Text = oItemName & "_" & oPipeSize & "_" & oBranchSize & "_" & oMaterial & ".ipt"
            Case "RedBush"
                lblFilename.Text = oItemName & " " & oPipeSize & " " & oBranchSize & " " & oMaterial & ".ipt"
            Case "Support"
                lblFilename.Text = oSupportType & "_" & oPipeSize & "_" & oMaterial & ".ipt"
            Case "BoltSet", "StudBoltSet"
                lblFilename.Text = oItemName & " " & oMaterial & ".aim"
            Case Else
                lblFilename.Text = oItemName & "_" & oPipeSize & "_" & oMaterial & ".ipt"
        End Select
        oFilename = lblFilename.Text
    End Sub

    Private Sub Get_description()
        Select Case oItemName


            Case "Support"
                Select Case oSupportType
                    Case "PipeClampStauff"
                        lblDescription.Text = oSupportType & " " & oMaterial
                    Case Else
                        lblDescription.Text = oSupportType & " " & oPipeSize & " " & oMaterial
                End Select
            Case "Pipe"
                lblDescription.Text = oItemName & " " & oPipeDia & "x" & oPipeSch & "x" & oPipeLenght & "mm" & " " & oMaterial
            Case "BranchPipe"
                lblDescription.Text = oItemName & " " & oPipeSize & " Header " & oMaterial & " " & oPipeLenght
            Case "RedTee"
                lblDescription.Text = oItemName & " " & oPipeSize & " " & oBranchSize & " " & oMaterial
            Case "ConcRed"
                lblDescription.Text = oItemName & " " & oPipeSize & " " & oBranchSize & " " & oMaterial
            Case "EccRed"
                lblDescription.Text = oItemName & " " & oPipeSize & " " & oBranchSize & " " & oMaterial
            Case "FemaleAdapter"
                lblDescription.Text = oItemName & " " & oPipeSize & " " & oBranchSize & " " & oMaterial
            Case "MaleAdapter"
                lblDescription.Text = oItemName & " " & oPipeSize & " " & oBranchSize & " " & oMaterial
            Case "Olet"
                lblDescription.Text = oItemName & " " & oPipeSize & " " & oBranchSize & " " & oMaterial
            Case "AdapterBush"
                lblDescription.Text = oItemName & " " & oPipeSize & " " & oBranchSize & " " & oMaterial
            Case "RedBush"
                lblDescription.Text = oItemName & " " & oPipeSize & " " & oBranchSize & " " & oMaterial
            Case "BoltSet"
                lblDescription.Text = oItemName & " " & oMaterial
            Case "Nipple", "Coupling", "Union"
                lblDescription.Text = oItemName & " " & cbxDN.Text & " " & oMaterial
            Case Else
                lblDescription.Text = oItemName & " " & oPipeSize & " " & oMaterial
        End Select
        oDescription = lblDescription.Text
    End Sub

    Private Sub RbtS235ConcReducer_CheckedChanged(sender As Object, e As EventArgs) Handles rbtS235ConcReducer.CheckedChanged
        oItemName = "ConcRed"
        oMaterial = "S235"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        If oPipeSize = "DN15" Then
            cbxDN.Text = "DN20"
        Else cbxDN.Text = oPipeSize
        End If
        all_Pictures_Off()
        PicConcReducerSteel.Visible = True

        If rbtS235ConcReducer.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        If rbtS235ConcReducer.Checked = False Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = True
            cbxPipeLenght.Visible = True
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()

    End Sub

    Private Sub RbtS235Pipe_CheckedChanged(sender As Object, e As EventArgs) Handles rbtS235Pipe.CheckedChanged
        oItemName = "Pipe"
        oMaterial = "S235"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        btnPipeLenghtChange.Visible = True
        PicPipeSteel.Visible = True
        If rbtS235Pipe.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = True
            cbxPipeLenght.Visible = True
        End If
        If rbtS235Pipe.Checked = False Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()

    End Sub

    Private Sub RbtS235Elbow_CheckedChanged(sender As Object, e As EventArgs) Handles rbtS235Elbow.CheckedChanged
        oItemName = "Elbow"
        oMaterial = "S235"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicELbowSteel.Visible = True
        If rbtS235Elbow.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtS235Tee_CheckedChanged(sender As Object, e As EventArgs) Handles rbtS235Tee.CheckedChanged
        oItemName = "Tee"
        oMaterial = "S235"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})

        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicTeeSteel.Visible = True
        If rbtS235Tee.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtS235Coupling_CheckedChanged(sender As Object, e As EventArgs) Handles rbtS235Coupling.CheckedChanged
        oItemName = "Coupling"
        oMaterial = "S235"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"1/2" & ControlChars.Quote, "3/4" & ControlChars.Quote, "1" & ControlChars.Quote, "1 1/4" & ControlChars.Quote, "1 1/2" & ControlChars.Quote, "2" & ControlChars.Quote})
        cbxDN.Text = "1/2" & ControlChars.Quote

        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicCouplingSteel.Visible = True
        If rbtS235Coupling.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtS235Union_CheckedChanged(sender As Object, e As EventArgs) Handles rbtS235Union.CheckedChanged
        oItemName = "Union"
        oMaterial = "S235"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"1/2" & ControlChars.Quote, "3/4" & ControlChars.Quote, "1" & ControlChars.Quote, "1 1/4" & ControlChars.Quote, "1 1/2" & ControlChars.Quote, "2" & ControlChars.Quote})
        cbxDN.Text = "1/2" & ControlChars.Quote
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicUnionSteel.Visible = True
        If rbtS235Union.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtS235FlangeWN_CheckedChanged(sender As Object, e As EventArgs) Handles rbtS235FlangeWN.CheckedChanged
        oItemName = "FlangeWN"
        oMaterial = "S235"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicWNFlangeSteel.Visible = True
        If rbtS235FlangeWN.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtS235FlangeBL_CheckedChanged(sender As Object, e As EventArgs) Handles rbtS235FlangeBL.CheckedChanged
        oItemName = "BlindFlange"
        oMaterial = "S235"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicBlindFlangeSteel.Visible = True
        If rbtS235FlangeBL.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtS235Nipple_CheckedChanged(sender As Object, e As EventArgs) Handles rbtS235Nipple.CheckedChanged
        oItemName = "Nipple"
        oMaterial = "S235"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"1/2" & ControlChars.Quote, "3/4" & ControlChars.Quote, "1" & ControlChars.Quote, "1 1/4" & ControlChars.Quote, "1 1/2" & ControlChars.Quote, "2" & ControlChars.Quote})
        cbxDN.Text = "1/2" & ControlChars.Quote
        all_Pictures_Off()
        PicNippleSteel.Visible = True
        If rbtS235Nipple.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub


    Private Sub Set_BranchSize()
        Select Case cbxBranchDN.Text
            Case "DN15"
                oBranchSize = "DN15"
                Select Case oMaterial
                    Case "S235"
                        oBranchDia = 21.3
                        oOletLenght = 19.05
                    Case "304L"
                        oBranchDia = 21.3
                        oOletLenght = 19.05
                    Case "316L"
                        oBranchDia = 21.3
                        oOletLenght = 19.05
                End Select

            Case "DE20"
                oBranchSize = "DE20"
                Select Case oMaterial

                    Case "PVC"
                        oBranchDia = 20
                    Case "HDPE"
                        oBranchDia = 20
                End Select

            Case "DN20"
                oBranchSize = "DN20"
                Select Case oMaterial
                    Case "S235"
                        oBranchDia = 26.9
                        oOletLenght = 22.23
                    Case "304L"
                        oBranchDia = 26.9
                        oOletLenght = 22.23
                    Case "316L"
                        oBranchDia = 26.9
                        oOletLenght = 22.23
                End Select

            Case "DE25"
                oBranchSize = "DE25"
                Select Case oMaterial
                    Case "PVC"
                        oBranchDia = 25
                    Case "HDPE"
                        oBranchDia = 25
                End Select

            Case "DN25"
                oBranchSize = "DN25"
                Select Case oMaterial
                    Case "S235"
                        oBranchDia = 33.7
                        oOletLenght = 26.99
                    Case "304L"
                        oBranchDia = 33.7
                        oOletLenght = 26.99
                    Case "316L"
                        oBranchDia = 33.7
                        oOletLenght = 26.99
                End Select

            Case "DE32"
                oBranchSize = "DE32"
                Select Case oMaterial
                    Case "PVC"
                        oBranchDia = 32
                    Case "HDPE"
                        oBranchDia = 32
                End Select

            Case "DN32"
                oBranchSize = "DN32"
                Select Case oMaterial
                    Case "S235"
                        oBranchDia = 42.4
                        oOletLenght = 31.75
                    Case "304L"
                        oBranchDia = 42.4
                        oOletLenght = 31.75
                    Case "316L"
                        oBranchDia = 42.4
                        oOletLenght = 31.75
                End Select

            Case "DE40"
                oBranchSize = "DE40"
                Select Case oMaterial
                    Case "PVC"
                        oBranchDia = 40
                    Case "HDPE"
                        oBranchDia = 40
                End Select

            Case "DN40"
                oBranchSize = "DN40"
                Select Case oMaterial
                    Case "S235"
                        oBranchDia = 48.3
                        oOletLenght = 33.34
                    Case "304L"
                        oBranchDia = 48.3
                        oOletLenght = 33.34
                    Case "316L"
                        oBranchDia = 48.3
                        oOletLenght = 33.34
                End Select

            Case "DE50"
                oBranchSize = "DE50"
                Select Case oMaterial
                    Case "PVC"
                        oBranchDia = 50
                    Case "HDPE"
                        oBranchDia = 50
                End Select

            Case "DN50"
                oBranchSize = "DN50"
                Select Case oMaterial
                    Case "S235"
                        oBranchDia = 60.3
                        oOletLenght = 38.1
                    Case "304L"
                        oBranchDia = 60.3
                        oOletLenght = 38.1
                    Case "316L"
                        oBranchDia = 60.3
                        oOletLenght = 38.1
                End Select

            Case "DE63"
                oBranchSize = "DE63"
                Select Case oMaterial
                    Case "PVC"
                        oBranchDia = 63
                    Case "HDPE"
                        oBranchDia = 63
                End Select

            Case "DN65"
                oBranchSize = "DN65"
                Select Case oMaterial
                    Case "S235"
                        oBranchDia = 76.1
                        oOletLenght = 41.28
                    Case "304L"
                        oBranchDia = 76.1
                        oOletLenght = 41.28
                    Case "316L"
                        oBranchDia = 76.1
                        oOletLenght = 41.28
                End Select

            Case "DE75"
                oBranchSize = "DE75"
                Select Case oMaterial
                    Case "PVC"
                        oBranchDia = 75
                    Case "HDPE"
                        oBranchDia = 75
                End Select

            Case "DN80"
                oBranchSize = "DN80"
                Select Case oMaterial
                    Case "S235"
                        oBranchDia = 88.9
                        oOletLenght = 44.45
                    Case "304L"
                        oBranchDia = 88.9
                        oOletLenght = 44.45
                    Case "316L"
                        oBranchDia = 88.9
                        oOletLenght = 44.45
                End Select

            Case "DE90"
                oBranchSize = "DE90"
                Select Case oMaterial
                    Case "PVC"
                        oBranchDia = 90
                    Case "HDPE"
                        oBranchDia = 90
                End Select

            Case "DN100"
                oBranchSize = "DN100"
                Select Case oMaterial
                    Case "S235"
                        oBranchDia = 114.3
                        oOletLenght = 50.8
                    Case "304L"
                        oBranchDia = 114.3
                        oOletLenght = 50.8
                    Case "316L"
                        oBranchDia = 114.3
                        oOletLenght = 50.8
                End Select

            Case "DE110"
                oBranchSize = "DE110"
                Select Case oMaterial
                    Case "PVC"
                        oBranchDia = 110
                    Case "HDPE"
                        oBranchDia = 110
                End Select

            Case "DN125"
                oBranchSize = "DN125"
                Select Case oMaterial
                    Case "S235"
                        oBranchDia = 139
                    Case "304L"
                        oBranchDia = 139
                    Case "316L"
                        oBranchDia = 139
                End Select

            Case "DE140"
                oBranchSize = "DE140"
                Select Case oMaterial
                    Case "PVC"
                        oBranchDia = 140
                    Case "HDPE"
                        oBranchDia = 140
                End Select

            Case "DN150"
                oBranchSize = "DN150"
                Select Case oMaterial
                    Case "S235"
                        oBranchDia = 168.3
                    Case "304L"
                        oBranchDia = 168.3
                    Case "316L"
                        oBranchDia = 168.3
                End Select

            Case "DE160"
                oBranchSize = "DE160"
                Select Case oMaterial
                    Case "PVC"
                        oBranchDia = 160
                    Case "HDPE"
                        oBranchDia = 160
                End Select

            Case "DN200"
                oBranchSize = "DN200"
                Select Case oMaterial
                    Case "S235"
                        oBranchDia = 219.1
                    Case "304L"
                        oBranchDia = 219.1
                    Case "316L"
                        oBranchDia = 219.1
                End Select

            Case "DE225"
                oBranchSize = "DE225"
                Select Case oMaterial
                    Case "PVC"
                        oBranchDia = 225
                    Case "HDPE"
                        oBranchDia = 225
                End Select

            Case "DN250"
                oBranchSize = "DN250"
                Select Case oMaterial
                    Case "S235"
                        oBranchDia = 273
                    Case "304L"
                        oBranchDia = 273
                    Case "316L"
                        oBranchDia = 273
                End Select

            Case "DE280"
                oBranchSize = "DE280"
                Select Case oMaterial
                    Case "PVC"
                        oBranchDia = 280
                    Case "HDPE"
                        oBranchDia = 280
                End Select

            Case "DN300"
                oBranchSize = "DN300"
                Select Case oMaterial
                    Case "S235"
                        oBranchDia = 323.9
                    Case "304L"
                        oBranchDia = 323.9
                    Case "316L"
                        oBranchDia = 323.9
                End Select

            Case "DE315"
                oBranchSize = "DE315"
                Select Case oMaterial
                    Case "PVC"
                        oBranchDia = 315
                    Case "HDPE"
                        oBranchDia = 315
                End Select

            Case "DN350"
                oBranchSize = "DN350"
                Select Case oMaterial
                    Case "S235"
                        oBranchDia = 355.6
                    Case "304L"
                        oBranchDia = 355.6
                    Case "316L"
                        oBranchDia = 355.6
                End Select

            Case "DE355"
                oBranchSize = "DE355"
                Select Case oMaterial
                    Case "PVC"
                        oBranchDia = 355
                    Case "HDPE"
                        oBranchDia = 355
                End Select

            Case "DN400"
                oBranchSize = "DN400"
                Select Case oMaterial
                    Case "S235"
                        oBranchDia = 406.4
                    Case "304L"
                        oBranchDia = 406.4
                    Case "316L"
                        oBranchDia = 406.4
                End Select

            Case "DE400"
                oBranchSize = "DE400"
                Select Case oMaterial
                    Case "PVC"
                        oBranchDia = 400
                    Case "HDPE"
                        oBranchDia = 400
                End Select

            Case "DN450"
                oBranchSize = "DN450"
                Select Case oMaterial
                    Case "S235"
                        oBranchDia = 457
                    Case "304L"
                        oBranchDia = 457
                    Case "316L"
                        oBranchDia = 457
                End Select

            Case "DE450"
                oBranchSize = "DE450"
                Select Case oMaterial
                    Case "PVC"
                        oBranchDia = 450
                    Case "HDPE"
                        oBranchDia = 450
                End Select

            Case "DN500"
                oBranchSize = "DN500"
        End Select
    End Sub

    Private Sub cbxDN_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cbxDN.SelectedIndexChanged
        setParameters()
        Set_BranchLenght()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub TabContPiping_SelectedIndexChanged(sender As Object, e As EventArgs) Handles TabContPiping.SelectedIndexChanged
        Select Case TabContPiping.SelectedIndex
            Case 4
                cbxDN.Visible = True
                lblDN.Visible = True
                btnPipeRoute.Visible = True
                oMaterial = "S235"
                oItemName = "Pipe"
                cbxDN.Items.Clear()
                cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
                cbxDN.Text = "DN50"
                all_Pictures_Off()
                btnPipeLenghtChange.Visible = True
                PicPipeSteel.Visible = True
                rbtS235Pipe.Checked = True
                lblBranchDN.Visible = False
                cbxBranchDN.Visible = False
                lblPipeLenght.Visible = True
                cbxPipeLenght.Visible = True
                Set_BranchLenght()
                setParameters()
                Get_description()
                Get_filename()
                Get_ProjectPath()
            Case 0
                cbxDN.Visible = True
                lblDN.Visible = True
                btnPipeRoute.Visible = True
                oMaterial = "304L"
                oItemName = "Pipe"
                cbxDN.Items.Clear()
                cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
                cbxDN.Text = "DN50"
                all_Pictures_Off()
                btnPipeLenghtChange.Visible = True
                PicPipeSS.Visible = True
                rbt304LPipe.Checked = True
                lblBranchDN.Visible = False
                cbxBranchDN.Visible = False
                lblPipeLenght.Visible = True
                cbxPipeLenght.Visible = True
                Set_BranchLenght()
                setParameters()
                Get_description()
                Get_filename()
                Get_ProjectPath()
            Case 1
                cbxDN.Visible = True
                lblDN.Visible = True
                btnPipeRoute.Visible = True
                oMaterial = "316L"
                oItemName = "Pipe"
                cbxDN.Items.Clear()
                cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
                cbxDN.Text = "DN50"
                all_Pictures_Off()
                btnPipeLenghtChange.Visible = True
                PicPipeSS.Visible = True
                rbt316LPipe.Checked = True
                lblBranchDN.Visible = False
                cbxBranchDN.Visible = False
                lblPipeLenght.Visible = True
                cbxPipeLenght.Visible = True
                Set_BranchLenght()
                setParameters()
                Get_description()
                Get_filename()
                Get_ProjectPath()
            Case 2
                cbxDN.Visible = True
                lblDN.Visible = True
                btnPipeRoute.Visible = True
                oMaterial = "PVC"
                oItemName = "Pipe"
                cbxDN.Items.Clear()
                cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
                cbxDN.Text = "DE63"
                all_Pictures_Off()
                btnPipeLenghtChange.Visible = True
                PicPipePVC.Visible = True
                rbtPVCPipe.Checked = True
                lblBranchDN.Visible = False
                cbxBranchDN.Visible = False
                lblPipeLenght.Visible = True
                cbxPipeLenght.Visible = True
                Set_BranchLenght()
                setParameters()
                Get_description()
                Get_filename()
                Get_ProjectPath()
            Case 3
                cbxDN.Visible = True
                lblDN.Visible = True
                btnPipeRoute.Visible = True
                oMaterial = "HDPE"
                oItemName = "Pipe"
                cbxDN.Items.Clear()
                cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400", "DE450", "DE500"})
                cbxDN.Text = "DE63"
                all_Pictures_Off()
                btnPipeLenghtChange.Visible = True
                PicPipeHDPE.Visible = True
                rbtHDPEPipe.Checked = True
                lblBranchDN.Visible = False
                cbxBranchDN.Visible = False
                lblPipeLenght.Visible = True
                cbxPipeLenght.Visible = True
                Set_BranchLenght()
                setParameters()
                Get_description()
                Get_filename()
                Get_ProjectPath()
            Case 5
                cbxDN.Visible = False
                lblDN.Visible = False
                btnPipeRoute.Visible = False
                btnPipeLenghtChange.Visible = False
                oMaterial = "8.8"
                oItemName = "BoltSet"
                cbxDN.Items.Clear()
                cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
                cbxDN.Text = "DN50"
                all_Pictures_Off()
                picBolts88.Visible = True
                rbtBolts88.Checked = True
                lblBranchDN.Visible = False
                cbxBranchDN.Visible = False
                lblPipeLenght.Visible = False
                cbxPipeLenght.Visible = False
                Set_BranchLenght()
                setParameters()
                Get_description()
                Get_filename()
                Get_ProjectPath()
        End Select
    End Sub

    Private Sub Set_ReducerSizeFill()

        If oItemName = "PulledTee" Then
            cbxBranchDN.Items.Clear()
            Select Case cbxDN.Text
                Case "DN20"
                    cbxBranchDN.Items.AddRange(New Object() {"DN15", "DN20"})
                    cbxBranchDN.Text = "DN20"
                    oPulledTeeBranchLenght = 15.5
                Case "DN25"
                    cbxBranchDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25"})
                    cbxBranchDN.Text = "DN25"
                    oPulledTeeBranchLenght = 18.9
                Case "DN32"
                    cbxBranchDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32"})
                    cbxBranchDN.Text = "DN32"
                    oPulledTeeBranchLenght = 23.2
                Case "DN40"
                    cbxBranchDN.Items.AddRange(New Object() {"DN20", "DN25", "DN32", "DN40"})
                    cbxBranchDN.Text = "DN40"
                    oPulledTeeBranchLenght = 26.2
                Case "DN50"
                    cbxBranchDN.Items.AddRange(New Object() {"DN25", "DN32", "DN40", "DN50"})
                    cbxBranchDN.Text = "DN50"
                    oPulledTeeBranchLenght = 33.2
                Case "DN65"
                    cbxBranchDN.Items.AddRange(New Object() {"DN32", "DN40", "DN50", "DN65"})
                    cbxBranchDN.Text = "DN65"
                    oPulledTeeBranchLenght = 42.1
                Case "DN80"
                    cbxBranchDN.Items.AddRange(New Object() {"DN40", "DN50", "DN65", "DN80"})
                    cbxBranchDN.Text = "DN80"
                    oPulledTeeBranchLenght = 49.5
                Case "DN100"
                    cbxBranchDN.Items.AddRange(New Object() {"DN50", "DN65", "DN80", "DN100"})
                    cbxBranchDN.Text = "DN100"
                    oPulledTeeBranchLenght = 64.2
                Case "DN125"
                    cbxBranchDN.Items.AddRange(New Object() {"DN65", "DN80", "DN100", "DN125"})
                    cbxBranchDN.Text = "DN125"
                    oPulledTeeBranchLenght = 77.9
                Case "DN150"
                    cbxBranchDN.Items.AddRange(New Object() {"DN80", "DN100", "DN125", "DN150"})
                    cbxBranchDN.Text = "DN150"
                    oPulledTeeBranchLenght = 94.2
                Case "DN200"
                    cbxBranchDN.Items.AddRange(New Object() {"DN100", "DN125", "DN150", "DN200"})
                    cbxBranchDN.Text = "DN200"
                    oPulledTeeBranchLenght = 121.6
                Case "DN250"
                    cbxBranchDN.Items.AddRange(New Object() {"DN125", "DN150", "DN200", "DN250"})
                    cbxBranchDN.Text = "DN250"
                    oPulledTeeBranchLenght = 140
                Case "DN300"
                    cbxBranchDN.Items.AddRange(New Object() {"DN150", "DN200", "DN250", "DN300"})
                    cbxBranchDN.Text = "DN300"
                    oPulledTeeBranchLenght = 167
                Case "DN350"
                    cbxBranchDN.Items.AddRange(New Object() {"DN200", "DN250", "DN300", "DN350"})
                    cbxBranchDN.Text = "DN350"
                Case "DN400"
                    cbxBranchDN.Items.AddRange(New Object() {"DN250", "DN300", "DN350", "DN400"})
                    cbxBranchDN.Text = "DN400"
                Case "DN450"
                    cbxBranchDN.Items.AddRange(New Object() {"DN300", "DN350", "DN400", "DN450"})
                    cbxBranchDN.Text = "DN450"
                Case "DN500"
                    cbxBranchDN.Items.AddRange(New Object() {"DN350", "DN400", "DN450", "DN500"})
                    cbxBranchDN.Text = "DN500"
            End Select
        End If

        If oItemName = "EccRed" Or oItemName = "ConcRed" Or oItemName = "RedTee" Or oItemName = "RedBush" Then
            cbxBranchDN.Items.Clear()
            Select Case cbxDN.Text
                Case "DN20"
                    cbxBranchDN.Items.AddRange(New Object() {"DN15"})
                    cbxBranchDN.Text = "DN15"
                Case "DN25"
                    cbxBranchDN.Items.AddRange(New Object() {"DN15", "DN20"})
                    cbxBranchDN.Text = "DN20"
                Case "DN32"
                    cbxBranchDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25"})
                    cbxBranchDN.Text = "DN25"
                Case "DN40"
                    cbxBranchDN.Items.AddRange(New Object() {"DN20", "DN25", "DN32"})
                    cbxBranchDN.Text = "DN32"
                Case "DN50"
                    cbxBranchDN.Items.AddRange(New Object() {"DN25", "DN32", "DN40"})
                    cbxBranchDN.Text = "DN40"
                Case "DN65"
                    cbxBranchDN.Items.AddRange(New Object() {"DN32", "DN40", "DN50"})
                    cbxBranchDN.Text = "DN50"
                Case "DN80"
                    cbxBranchDN.Items.AddRange(New Object() {"DN40", "DN50", "DN65"})
                    cbxBranchDN.Text = "DN65"
                Case "DN100"
                    cbxBranchDN.Items.AddRange(New Object() {"DN50", "DN65", "DN80"})
                    cbxBranchDN.Text = "DN80"
                Case "DN125"
                    cbxBranchDN.Items.AddRange(New Object() {"DN65", "DN80", "DN100"})
                    cbxBranchDN.Text = "DN100"
                Case "DN150"
                    cbxBranchDN.Items.AddRange(New Object() {"DN80", "DN100", "DN125"})
                    cbxBranchDN.Text = "DN125"
                Case "DN200"
                    cbxBranchDN.Items.AddRange(New Object() {"DN100", "DN125", "DN150"})
                    cbxBranchDN.Text = "DN150"
                Case "DN250"
                    cbxBranchDN.Items.AddRange(New Object() {"DN125", "DN150", "DN200"})
                    cbxBranchDN.Text = "DN200"
                Case "DN300"
                    cbxBranchDN.Items.AddRange(New Object() {"DN150", "DN200", "DN250"})
                    cbxBranchDN.Text = "DN250"
                Case "DN350"
                    cbxBranchDN.Items.AddRange(New Object() {"DN200", "DN250", "DN300"})
                    cbxBranchDN.Text = "DN300"
                Case "DN400"
                    cbxBranchDN.Items.AddRange(New Object() {"DN250", "DN300", "DN350"})
                    cbxBranchDN.Text = "DN350"
                Case "DN450"
                    cbxBranchDN.Items.AddRange(New Object() {"DN300", "DN350", "DN400"})
                    cbxBranchDN.Text = "DN400"
                Case "DN500"
                    cbxBranchDN.Items.AddRange(New Object() {"DN350", "DN400", "DN450"})
                    cbxBranchDN.Text = "DN450"
                Case "DE25"
                    cbxBranchDN.Items.AddRange(New Object() {"DE20"})
                    cbxBranchDN.Text = "DE20"
                Case "DE32"
                    cbxBranchDN.Items.AddRange(New Object() {"DE20", "DE25"})
                    cbxBranchDN.Text = "DE25"
                Case "DE40"
                    cbxBranchDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32"})
                    cbxBranchDN.Text = "DE32"
                Case "DE50"
                    cbxBranchDN.Items.AddRange(New Object() {"DE25", "DE32", "DE40"})
                    cbxBranchDN.Text = "DE40"
                Case "DE63"
                    cbxBranchDN.Items.AddRange(New Object() {"DE32", "DE40", "DE50"})
                    cbxBranchDN.Text = "DE50"
                Case "DE75"
                    cbxBranchDN.Items.AddRange(New Object() {"DE40", "DE50", "DE63"})
                    cbxBranchDN.Text = "DE63"
                Case "DE90"
                    cbxBranchDN.Items.AddRange(New Object() {"DE50", "DE63", "DE75"})
                    cbxBranchDN.Text = "DE75"
                Case "DE110"
                    cbxBranchDN.Items.AddRange(New Object() {"DE63", "DE75", "DE90"})
                    cbxBranchDN.Text = "DE90"
                Case "DE140"
                    cbxBranchDN.Items.AddRange(New Object() {"DE75", "DE90", "DE110"})
                    cbxBranchDN.Text = "DE110"
                Case "DE160"
                    cbxBranchDN.Items.AddRange(New Object() {"DE90", "DE110", "DE140"})
                    cbxBranchDN.Text = "DE140"
                Case "DE225"
                    cbxBranchDN.Items.AddRange(New Object() {"DE110", "DE140", "DE160"})
                    cbxBranchDN.Text = "DE160"
                Case "DE280"
                    cbxBranchDN.Items.AddRange(New Object() {"DE140", "DE160", "DE225"})
                    cbxBranchDN.Text = "DE225"
                Case "DE315"
                    cbxBranchDN.Items.AddRange(New Object() {"DE160", "DE225", "DE280"})
                    cbxBranchDN.Text = "DE280"
                Case "DE355"
                    cbxBranchDN.Items.AddRange(New Object() {"DE225", "DE280", "DE315"})
                    cbxBranchDN.Text = "DE315"
                Case "DE400"
                    cbxBranchDN.Items.AddRange(New Object() {"DE280", "DE315", "DE355"})
                    cbxBranchDN.Text = "DE355"
                Case "DE450"
                    cbxBranchDN.Items.AddRange(New Object() {"DE315", "DE355", "DE400"})
                    cbxBranchDN.Text = "DE400"
                Case "DE500"
                    cbxBranchDN.Items.AddRange(New Object() {"DE355", "DE400", "DE450"})
                    cbxBranchDN.Text = "DE450"
            End Select
        End If

        If oItemName = "AdapterBush" Or oItemName = "MaleAdapter" Or oItemName = "FemaleAdapter" Then
            cbxBranchDN.Items.Clear()
            Select Case cbxDN.Text
                Case "DE25"
                    cbxBranchDN.Items.AddRange(New Object() {"DE20", "DE25"})
                    cbxBranchDN.Text = "DE20"
                Case "DE32"
                    cbxBranchDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32"})
                    cbxBranchDN.Text = "DE25"
                Case "DE40"
                    cbxBranchDN.Items.AddRange(New Object() {"DE25", "DE32", "DE40"})
                    cbxBranchDN.Text = "DE32"
                Case "DE50"
                    cbxBranchDN.Items.AddRange(New Object() {"DE32", "DE40", "DE50"})
                    cbxBranchDN.Text = "DE40"
                Case "DE63"
                    cbxBranchDN.Items.AddRange(New Object() {"DE40", "DE50", "DE63"})
                    cbxBranchDN.Text = "DE50"
                Case "DE75"
                    cbxBranchDN.Items.AddRange(New Object() {"DE50", "DE63", "DE75"})
                    cbxBranchDN.Text = "DE63"
                Case "DE90"
                    cbxBranchDN.Items.AddRange(New Object() {"DE63", "DE75", "DE90"})
                    cbxBranchDN.Text = "DE75"
                Case "DE110"
                    cbxBranchDN.Items.AddRange(New Object() {"DE63", "DE75", "DE90"})
                    cbxBranchDN.Text = "DE90"
            End Select
        End If
    End Sub

    Private Sub rbtS235Elbow45gr_CheckedChanged(sender As Object, e As EventArgs) Handles rbtS235Elbow45gr.CheckedChanged
        oItemName = "Elbow45gr"
        oMaterial = "S235"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        Pic45grElbowSteel.Visible = True
        If rbtS235Elbow45gr.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtS235RedTee_CheckedChanged(sender As Object, e As EventArgs) Handles rbtS235RedTee.CheckedChanged
        oItemName = "RedTee"
        oMaterial = "S235"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        If oPipeSize = "DN15" Then
            cbxDN.Text = "DN20"
        Else cbxDN.Text = oPipeSize
        End If

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicRedTeeSteel.Visible = True
        If rbtS235RedTee.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtS235EccReducer_CheckedChanged(sender As Object, e As EventArgs) Handles rbtS235EccReducer.CheckedChanged
        oItemName = "EccRed"
        oMaterial = "S235"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        If oPipeSize = "DN15" Then
            cbxDN.Text = "DN20"
        Else cbxDN.Text = oPipeSize
        End If

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        btnPipeLenghtChange.Visible = True
        PicEccReducerSteel.Visible = True
        If rbtS235EccReducer.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtS235Olet_CheckedChanged(sender As Object, e As EventArgs) Handles rbtS235Olet.CheckedChanged
        oItemName = "Olet"
        oMaterial = "S235"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = "DN50"

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        cbxBranchDN.Items.Clear()
        cbxBranchDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50"})
        cbxBranchDN.Text = "DN25"
        all_Pictures_Off()
        PicOletSteel.Visible = True
        If rbtS235Olet.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtS235Cap_CheckedChanged(sender As Object, e As EventArgs) Handles rbtS235Cap.CheckedChanged
        oItemName = "Cap"
        oMaterial = "S235"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicCapSteel.Visible = True
        If rbtS235Cap.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtS235FlangeSO_CheckedChanged(sender As Object, e As EventArgs) Handles rbtS235FlangeSO.CheckedChanged
        oItemName = "FlangeSO"
        oMaterial = "S235"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicSOFLangeSteel.Visible = True
        If rbtS235FlangeSO.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtS235FlangeLJ_CheckedChanged(sender As Object, e As EventArgs) Handles rbtS235FlangeLJ.CheckedChanged
        oItemName = "FlangeLJ"
        oMaterial = "S235"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicLJFlangeSteel.Visible = True
        If rbtS235FlangeLJ.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub cbxPipeLenght_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cbxPipeLenght.SelectedIndexChanged
        oPipeLenght = cbxPipeLenght.Text
        If oPipeLenght < 50 Then
            oPipeLenght = 50
            cbxPipeLenght.Text = 50
        End If
        If oPipeLenght > 6000 Then
            oPipeLenght = 6000
            cbxPipeLenght.Text = 6000
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub cbxPipeLenght_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cbxPipeLenght.KeyPress
        If Not Char.IsNumber(e.KeyChar) AndAlso Not Char.IsControl(e.KeyChar) Then e.KeyChar = ""
        If Asc(e.KeyChar) = 22 Then
            e.KeyChar = ""
        End If
        If Asc(e.KeyChar) = 13 Then
            If cbxPipeLenght.Text = Nothing Then
                cbxPipeLenght.Text = "50"
            End If
            If CDbl(cbxPipeLenght.Text) < 50 Then
                oPipeLenght = 50
                cbxPipeLenght.Text = 50
            End If
            If CDbl(cbxPipeLenght.Text) > 6000 Then
                oPipeLenght = 6000
                cbxPipeLenght.Text = 6000
            End If
            oPipeLenght = CDbl(cbxPipeLenght.Text)
            setParameters()
            Set_BranchLenght()
            Set_BranchSize()
            Set_ReducerSizeFill()
            Get_description()
            Get_filename()
            Get_ProjectPath()
        End If
    End Sub

    Private Sub cbxPipeLenght_MouseLeave(sender As Object, e As EventArgs) Handles cbxPipeLenght.MouseLeave
        If cbxPipeLenght.Text = Nothing Then
            cbxPipeLenght.Text = "50"
        End If
        If CDbl(cbxPipeLenght.Text) < 50 Then
            oPipeLenght = 50
            cbxPipeLenght.Text = 50
        End If
        If CDbl(cbxPipeLenght.Text) > 6000 Then
            oPipeLenght = 6000
            cbxPipeLenght.Text = 6000
        End If
        oPipeLenght = CDbl(cbxPipeLenght.Text)
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub
    Private Sub all_Pictures_Off()
        picStudBoltsA2.Visible = False
        picStudBolts88.Visible = False
        PicBrancheConnectionStainless.Visible = False
        PicPulledTEEstainless.Visible = False
        PicLJFlangeALU.Visible = False
        PicConcReducerSS.Visible = False
        PicCouplingSS.Visible = False
        PicUnionSS.Visible = False
        PicWNFlangeSS.Visible = False
        PicBlindFlangeSS.Visible = False
        PicLJFlangeSS.Visible = False
        PicNippleSS.Visible = False
        Pic45grElbowSS.Visible = False
        PicEccReducerSS.Visible = False
        PicOletSS.Visible = False
        PicCapSS.Visible = False
        PicSOFlangeSS.Visible = False
        PicStubEndSS.Visible = False
        PicTeeSS.Visible = False
        PicTeeHDPE.Visible = False
        PicPipeHDPE.Visible = False
        PicElbowHDPE.Visible = False
        Pic45grElbowHDPE.Visible = False
        PicRedTeeHDPE.Visible = False
        PicConcRedHDPE.Visible = False
        PicEccReducerHDPE.Visible = False
        PicUnionHDPE.Visible = False
        PicElectroCouplingHDPE.Visible = False
        PicMaleAdapterHDPE.Visible = False
        PicFemaleAdapterHDPE.Visible = False
        PicBlindFlangeHDPE.Visible = False
        PicLJFlangeHDPE.Visible = False
        PicStubEndHDPE.Visible = False
        PicCapHDPE.Visible = False
        PicTeePVC.Visible = False
        PicConcRedPVC.Visible = False
        PicCouplingPVC.Visible = False
        PicUnionPVC.Visible = False
        PicSWFlangePVC.Visible = False
        PicBlindFlangePVC.Visible = False
        PicMaleAdaptorPVC.Visible = False
        Pic45grElbowPVC.Visible = False
        PicRedTeePVC.Visible = False
        PicEccRedPVC.Visible = False
        PicRedBushPVC.Visible = False
        PicCapPVC.Visible = False
        PicStubEndPVC.Visible = False
        PicLJFlangePVC.Visible = False
        PicAdapBushPVC.Visible = False
        PicElbowPVC.Visible = False
        PicPipePVC.Visible = False
        PicStubEndSteel.Visible = False
        PicSOFLangeSteel.Visible = False
        PicCapSteel.Visible = False
        PicOletSteel.Visible = False
        PicEccReducerSteel.Visible = False
        PicRedTeeSteel.Visible = False
        Pic45grElbowSteel.Visible = False
        PicNippleSteel.Visible = False
        PicLJFlangeSteel.Visible = False
        PicWNFlangeSteel.Visible = False
        PicUnionSteel.Visible = False
        PicCouplingSteel.Visible = False
        PicConcReducerSteel.Visible = False
        PicTeeSteel.Visible = False
        PicELbowSteel.Visible = False
        PicPipeSteel.Visible = False
        PicPipeSS.Visible = False
        PicElbowSS.Visible = False
        PicBlindFlangeSteel.Visible = False
        PicRedTeeSS.Visible = False
        btnPipeLenghtChange.Visible = False
        picBolts88.Visible = False
        picBoltsA2.Visible = False
        picBoltsA4.Visible = False
        picGasketEPDM.Visible = False
        picGasketNBR.Visible = False
        picGasketSilicone.Visible = False
        picGasketPTFE.Visible = False
        picUBolt88.Visible = False
        picUBoltA2.Visible = False
        picPipeClampGalva.Visible = False
        picPipeClamp304L.Visible = False
        picDammgulast.Visible = False
        picPipeClipASV.Visible = False
        picPipeClipGoema.Visible = False
        picPipeClampStauff.Visible = False
    End Sub

    Private Sub rbtS235StubEnd_CheckedChanged(sender As Object, e As EventArgs) Handles rbtS235StubEnd.CheckedChanged
        oItemName = "StubEnd"
        oMaterial = "S235"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicStubEndSteel.Visible = True
        If rbtS235StubEnd.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LStubEnd_CheckedChanged(sender As Object, e As EventArgs) Handles rbt304LStubEnd.CheckedChanged
        oItemName = "StubEnd"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicStubEndSS.Visible = True
        If rbt304LStubEnd.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LPipe_CheckedChanged(sender As Object, e As EventArgs) Handles rbt304LPipe.CheckedChanged
        oItemName = "Pipe"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        btnPipeLenghtChange.Visible = True
        PicPipeSS.Visible = True


        If rbt304LPipe.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = True
            cbxPipeLenght.Visible = True
        End If
        If rbt304LPipe.Checked = False Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LBranchePipe_CheckedChanged(sender As Object, e As EventArgs) Handles rbt304LBranchPipe.CheckedChanged
        oItemName = "BranchPipe"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        btnPipeLenghtChange.Visible = True
        PicBrancheConnectionStainless.Visible = True

        If rbt304LBranchPipe.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = True
            cbxPipeLenght.Visible = True
        End If

        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt316LBranchePipe_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LBranchPipe.CheckedChanged
        oItemName = "BranchPipe"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        btnPipeLenghtChange.Visible = True
        PicBrancheConnectionStainless.Visible = True

        If rbt316LBranchPipe.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = True
            cbxPipeLenght.Visible = True
        End If

        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub


    Private Sub rbt316LPipe_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LPipe.CheckedChanged
        oItemName = "Pipe"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        btnPipeLenghtChange.Visible = True
        PicPipeSS.Visible = True
        If rbt316LPipe.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = True
            cbxPipeLenght.Visible = True
        End If
        If rbt316LPipe.Checked = False Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPVCPipe_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPVCPipe.CheckedChanged
        oItemName = "Pipe"
        oMaterial = "PVC"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = True
        PicPipePVC.Visible = True
        If rbtPVCPipe.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = True
            cbxPipeLenght.Visible = True
        End If
        If rbtPVCPipe.Checked = False Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtHDPEPipe_CheckedChanged(sender As Object, e As EventArgs) Handles rbtHDPEPipe.CheckedChanged
        oItemName = "Pipe"
        oMaterial = "HDPE"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400", "DE450", "DE500"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = True
        PicPipeHDPE.Visible = True
        If rbtHDPEPipe.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = True
            cbxPipeLenght.Visible = True
        End If
        If rbtHDPEPipe.Checked = False Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LElbow_CheckedChanged(sender As Object, e As EventArgs) Handles rbt304LElbow.CheckedChanged
        oItemName = "Elbow"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicElbowSS.Visible = True
        If rbt304LElbow.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt316LElbow_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LElbow.CheckedChanged
        oItemName = "Elbow"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicElbowSS.Visible = True
        If rbt316LElbow.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPVCElbow_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPVCElbow.CheckedChanged
        oItemName = "Elbow"
        oMaterial = "PVC"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        PicElbowPVC.Visible = True
        If rbtPVCElbow.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtHDPEElbow_CheckedChanged(sender As Object, e As EventArgs) Handles rbtHDPEElbow.CheckedChanged
        oItemName = "Elbow"
        oMaterial = "HDPE"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        PicElbowHDPE.Visible = True
        If rbtHDPEElbow.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LTee_CheckedChanged(sender As Object, e As EventArgs) Handles rbt304LTee.CheckedChanged
        oItemName = "Tee"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicTeeSS.Visible = True
        If rbt304LTee.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LPulledTee_CheckedChanged(sender As Object, e As EventArgs) Handles rbt304LPulledTee.CheckedChanged
        oItemName = "PulledTee"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize
        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If
        all_Pictures_Off()
        PicPulledTEEstainless.Visible = True

        If rbt304LPulledTee.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If

        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt316LPulledTee_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LPulledTee.CheckedChanged
        oItemName = "PulledTee"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicPulledTEEstainless.Visible = True
        If rbt316LPulledTee.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub


    Private Sub rbt316LTee_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LTee.CheckedChanged
        oItemName = "Tee"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicTeeSS.Visible = True
        If rbt316LTee.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPVCTee_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPVCTee.CheckedChanged
        oItemName = "Tee"
        oMaterial = "PVC"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        PicTeePVC.Visible = True
        If rbtPVCTee.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtHDPETee_CheckedChanged(sender As Object, e As EventArgs) Handles rbtHDPETee.CheckedChanged
        oItemName = "Tee"
        oMaterial = "HDPE"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        PicTeeHDPE.Visible = True
        If rbtHDPETee.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LConcReducer_CheckedChanged(sender As Object, e As EventArgs) Handles rbt304LConcReducer.CheckedChanged
        oItemName = "ConcRed"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        If oPipeSize = "DN15" Then
            cbxDN.Text = "DN20"
        Else cbxDN.Text = oPipeSize
        End If

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If


        all_Pictures_Off()
        PicConcReducerSS.Visible = True
        If rbt304LConcReducer.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        If rbt304LConcReducer.Checked = False Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = True
            cbxPipeLenght.Visible = True
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub
    Private Sub rbt316LConcReducer_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LConcReducer.CheckedChanged
        oItemName = "ConcRed"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        If oPipeSize = "DN15" Then
            cbxDN.Text = "DN20"
        Else cbxDN.Text = oPipeSize
        End If

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If


        all_Pictures_Off()
        PicConcReducerSS.Visible = True
        If rbt316LConcReducer.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        If rbt316LConcReducer.Checked = False Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = True
            cbxPipeLenght.Visible = True
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub
    Private Sub rbtPVCConcReducer_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPVCConcReducer.CheckedChanged
        oItemName = "ConcRed"
        oMaterial = "PVC"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        If oPipeSize = "DE20" Then
            cbxDN.Text = "DE25"
        Else cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicConcRedPVC.Visible = True
        If rbtPVCConcReducer.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        If rbtPVCConcReducer.Checked = False Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = True
            cbxPipeLenght.Visible = True
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub
    Private Sub rbtHDPEConcReducer_CheckedChanged(sender As Object, e As EventArgs) Handles rbtHDPEConcReducer.CheckedChanged
        oItemName = "ConcRed"
        oMaterial = "HDPE"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        PicConcRedHDPE.Visible = True
        If rbtHDPEConcReducer.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        If rbtHDPEConcReducer.Checked = False Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = True
            cbxPipeLenght.Visible = True
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LCoupling_CheckedChanged(sender As Object, e As EventArgs) Handles rbt314LCoupling.CheckedChanged
        oItemName = "Coupling"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"1/2" & ControlChars.Quote, "3/4" & ControlChars.Quote, "1" & ControlChars.Quote, "1 1/4" & ControlChars.Quote, "1 1/2" & ControlChars.Quote, "2" & ControlChars.Quote})
        cbxDN.Text = "1/2" & ControlChars.Quote
        all_Pictures_Off()
        PicCouplingSS.Visible = True
        If rbt314LCoupling.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt316LCoupling_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LCoupling.CheckedChanged
        oItemName = "Coupling"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"1/2" & ControlChars.Quote, "3/4" & ControlChars.Quote, "1" & ControlChars.Quote, "1 1/4" & ControlChars.Quote, "1 1/2" & ControlChars.Quote, "2" & ControlChars.Quote})
        cbxDN.Text = "1/2" & ControlChars.Quote
        all_Pictures_Off()
        PicCouplingSS.Visible = True
        If rbt316LCoupling.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPVCCoupling_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPVCCoupling.CheckedChanged
        oItemName = "Coupling"
        oMaterial = "PVC"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        PicCouplingPVC.Visible = True
        If rbtPVCCoupling.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LUnion_CheckedChanged(sender As Object, e As EventArgs) Handles rbt304LUnion.CheckedChanged
        oItemName = "Union"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"1/2" & ControlChars.Quote, "3/4" & ControlChars.Quote, "1" & ControlChars.Quote, "1 1/4" & ControlChars.Quote, "1 1/2" & ControlChars.Quote, "2" & ControlChars.Quote})
        cbxDN.Text = "1/2" & ControlChars.Quote
        all_Pictures_Off()
        PicUnionSS.Visible = True
        If rbt304LUnion.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt316LUnion_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LUnion.CheckedChanged
        oItemName = "Union"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"1/2" & ControlChars.Quote, "3/4" & ControlChars.Quote, "1" & ControlChars.Quote, "1 1/4" & ControlChars.Quote, "1 1/2" & ControlChars.Quote, "2" & ControlChars.Quote})
        cbxDN.Text = "1/2" & ControlChars.Quote
        all_Pictures_Off()
        PicUnionSS.Visible = True
        If rbt316LUnion.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPVCUnion_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPVCUnion.CheckedChanged
        oItemName = "Union"
        oMaterial = "PVC"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90"})
        cbxDN.Text = "DE63"
        all_Pictures_Off()
        PicUnionPVC.Visible = True
        If rbtPVCUnion.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtHDPEUnion_CheckedChanged(sender As Object, e As EventArgs) Handles rbtHDPEUnion.CheckedChanged
        oItemName = "Union"
        oMaterial = "HDPE"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90"})
        cbxDN.Text = "DE63"
        all_Pictures_Off()
        PicUnionHDPE.Visible = True
        If rbtHDPEUnion.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LFlangeWN_CheckedChanged(sender As Object, e As EventArgs) Handles rbt304LFlangeWN.CheckedChanged
        oItemName = "FlangeWN"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicWNFlangeSS.Visible = True
        If rbt304LFlangeWN.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt316LFlangeWN_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LFlangeWN.CheckedChanged
        oItemName = "FlangeWN"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicWNFlangeSS.Visible = True
        If rbt316LFlangeWN.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPVCFlangeSW_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPVCFlangeSW.CheckedChanged
        oItemName = "FlangeSW"
        oMaterial = "PVC"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        PicSWFlangePVC.Visible = True
        If rbtPVCFlangeSW.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LFlangeBL_CheckedChanged(sender As Object, e As EventArgs) Handles rbt304LFlangeBL.CheckedChanged
        oItemName = "BlindFlange"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicBlindFlangeSS.Visible = True
        If rbt304LFlangeBL.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt316LFlangeBL_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LFlangeBL.CheckedChanged
        oItemName = "BlindFlange"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicBlindFlangeSS.Visible = True
        If rbt316LFlangeBL.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPVCFlangeBL_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPVCFlangeBL.CheckedChanged
        oItemName = "BlindFlange"
        oMaterial = "PVC"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        cbxDN.Text = oPipeSize

        all_Pictures_Off()
        PicBlindFlangePVC.Visible = True
        If rbtPVCFlangeBL.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtHDPEFlangeBL_CheckedChanged(sender As Object, e As EventArgs) Handles rbtHDPEFlangeBL.CheckedChanged
        oItemName = "BlindFlange"
        oMaterial = "HDPE"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        PicBlindFlangeHDPE.Visible = True
        If rbtHDPEFlangeBL.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LFlangeLJ_CheckedChanged(sender As Object, e As EventArgs) Handles rbt304LFlangeLJ.CheckedChanged
        oItemName = "FlangeLJ"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicLJFlangeSS.Visible = True
        If rbt304LFlangeLJ.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtALU304LFlangeLJ_CheckedChanged(sender As Object, e As EventArgs) Handles rbtALU304FlangeLJ.CheckedChanged
        oItemName = "FlangeLJ"
        oMaterial = "ALU"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicLJFlangeALU.Visible = True
        If rbtALU304FlangeLJ.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt316LFlangeLJ_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LFlangeLJ.CheckedChanged
        oItemName = "FlangeLJ"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicLJFlangeSS.Visible = True
        If rbt316LFlangeLJ.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt316ALUFlangeLJ_CheckedChanged(sender As Object, e As EventArgs) Handles rbtALU316FlangeLJ.CheckedChanged

        oItemName = "FlangeLJ"
        oMaterial = "ALU"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicLJFlangeALU.Visible = True
        If rbtALU316FlangeLJ.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPVCFlangeLJ_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPVCFlangeLJ.CheckedChanged
        oItemName = "FlangeLJ"
        oMaterial = "PVC"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicLJFlangePVC.Visible = True
        If rbtPVCFlangeLJ.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtHDPEFlangeLJ_CheckedChanged(sender As Object, e As EventArgs) Handles rbtHDPEFlangeLJ.CheckedChanged
        oItemName = "FlangeLJ"
        oMaterial = "HDPE"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicLJFlangeHDPE.Visible = True
        If rbtHDPEFlangeLJ.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LNipple_CheckedChanged(sender As Object, e As EventArgs) Handles rbt304LNipple.CheckedChanged
        oItemName = "Nipple"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"1/2" & ControlChars.Quote, "3/4" & ControlChars.Quote, "1" & ControlChars.Quote, "1 1/4" & ControlChars.Quote, "1 1/2" & ControlChars.Quote, "2" & ControlChars.Quote})
        cbxDN.Text = "1/2" & ControlChars.Quote
        all_Pictures_Off()
        PicNippleSS.Visible = True
        If rbt304LNipple.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt316LNipple_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LNipple.CheckedChanged
        oItemName = "Nipple"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"1/2" & ControlChars.Quote, "3/4" & ControlChars.Quote, "1" & ControlChars.Quote, "1 1/4" & ControlChars.Quote, "1 1/2" & ControlChars.Quote, "2" & ControlChars.Quote})
        cbxDN.Text = "1/2" & ControlChars.Quote
        all_Pictures_Off()
        PicNippleSS.Visible = True
        If rbt316LNipple.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LElbow45gr_CheckedChanged(sender As Object, e As EventArgs) Handles rbt304LElbow45gr.CheckedChanged
        oItemName = "Elbow45gr"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        Pic45grElbowSS.Visible = True
        If rbt304LElbow45gr.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt316LElbow45gr_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LElbow45gr.CheckedChanged
        oItemName = "Elbow45gr"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        Pic45grElbowSS.Visible = True
        If rbt316LElbow45gr.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPVCElbow45gr_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPVCElbow45gr.CheckedChanged
        oItemName = "Elbow45gr"
        oMaterial = "PVC"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        Pic45grElbowPVC.Visible = True
        If rbtPVCElbow45gr.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtHDPEElbow45gr_CheckedChanged(sender As Object, e As EventArgs) Handles rbtHDPEElbow45gr.CheckedChanged
        oItemName = "Elbow45gr"
        oMaterial = "HDPE"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        Pic45grElbowHDPE.Visible = True
        If rbtHDPEElbow45gr.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LRedTee_CheckedChanged(sender As Object, e As EventArgs) Handles rbt304LRedTee.CheckedChanged
        oItemName = "RedTee"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        If oPipeSize = "DN15" Then
            cbxDN.Text = "DN20"
        Else cbxDN.Text = oPipeSize
        End If

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicRedTeeSS.Visible = True
        If rbt304LRedTee.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt316LRedTee_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LRedTee.CheckedChanged
        oItemName = "RedTee"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        If oPipeSize = "DN15" Then
            cbxDN.Text = "DN20"
        Else cbxDN.Text = oPipeSize
        End If

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicRedTeeSS.Visible = True
        If rbt316LRedTee.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPVCRedTee_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPVCRedTee.CheckedChanged
        oItemName = "RedTee"
        oMaterial = "PVC"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110"})
        If oPipeSize = "DE20" Then
            cbxDN.Text = "DE25"
        Else cbxDN.Text = oPipeSize
        End If
        all_Pictures_Off()
        PicRedTeePVC.Visible = True
        If rbtPVCRedTee.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtHDPERedTee_CheckedChanged(sender As Object, e As EventArgs) Handles rbtHDPERedTee.CheckedChanged
        oItemName = "RedTee"
        oMaterial = "HDPE"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        PicRedTeeHDPE.Visible = True
        If rbtHDPERedTee.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LEccReducer_CheckedChanged(sender As Object, e As EventArgs) Handles rbt304LEccReducer.CheckedChanged
        oItemName = "EccRed"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        If oPipeSize = "DN15" Then
            cbxDN.Text = "DN20"
        Else cbxDN.Text = oPipeSize
        End If

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicEccReducerSS.Visible = True
        If rbt304LEccReducer.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt316LEccReducer_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LEccReducer.CheckedChanged
        oItemName = "EccRed"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        If oPipeSize = "DN15" Then
            cbxDN.Text = "DN20"
        Else cbxDN.Text = oPipeSize
        End If

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicEccReducerSS.Visible = True
        If rbt316LEccReducer.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPVCEccReducer_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPVCEccReducer.CheckedChanged
        oItemName = "EccRed"
        oMaterial = "PVC"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        If oPipeSize = "DE20" Then
            cbxDN.Text = "DE25"
        Else cbxDN.Text = oPipeSize
        End If
        all_Pictures_Off()
        PicEccRedPVC.Visible = True
        If rbtPVCEccReducer.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtHDPEEccReducer_CheckedChanged(sender As Object, e As EventArgs) Handles rbtHDPEEccReducer.CheckedChanged
        oItemName = "EccRed"
        oMaterial = "HDPE"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        PicEccReducerHDPE.Visible = True
        If rbtHDPEEccReducer.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LOlet_CheckedChanged(sender As Object, e As EventArgs) Handles rbt304LOlet.CheckedChanged
        oItemName = "Olet"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = "DN50"
        cbxBranchDN.Items.Clear()
        cbxBranchDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50"})
        cbxBranchDN.Text = "DN25"
        all_Pictures_Off()
        PicOletSS.Visible = True
        If rbt304LOlet.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt316LOlet_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LOlet.CheckedChanged
        oItemName = "Olet"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = "DN50"
        cbxBranchDN.Items.Clear()
        cbxBranchDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50"})
        cbxBranchDN.Text = "DN25"
        all_Pictures_Off()
        PicOletSS.Visible = True
        If rbt316LOlet.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LCap_CheckedChanged(sender As Object, e As EventArgs) Handles rbt304LCap.CheckedChanged
        oItemName = "Cap"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicCapSS.Visible = True
        If rbt304LCap.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt316LCap_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LCap.CheckedChanged
        oItemName = "Cap"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicCapSS.Visible = True
        If rbt316LCap.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPVCCap_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPVCCap.CheckedChanged
        oItemName = "Cap"
        oMaterial = "PVC"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        PicCapPVC.Visible = True
        If rbtPVCCap.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtHDPECap_CheckedChanged(sender As Object, e As EventArgs) Handles rbtHDPECap.CheckedChanged
        oItemName = "Cap"
        oMaterial = "HDPE"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        PicCapHDPE.Visible = True
        If rbtHDPECap.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt304LFlangeSO_CheckedChanged(sender As Object, e As EventArgs) Handles rbt304LFlangeSO.CheckedChanged
        oItemName = "FlangeSO"
        oMaterial = "304L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicSOFlangeSS.Visible = True
        If rbt304LFlangeSO.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt316LFlangeSO_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LFlangeSO.CheckedChanged
        oItemName = "FlangeSO"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicSOFlangeSS.Visible = True
        If rbt316LFlangeSO.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPVCStubEnd_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPVCStubEnd.CheckedChanged
        oItemName = "StubEnd"
        oMaterial = "PVC"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        PicStubEndPVC.Visible = True
        If rbtPVCStubEnd.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtHDPEStubEnd_CheckedChanged(sender As Object, e As EventArgs) Handles rbtHDPEStubEnd.CheckedChanged
        oItemName = "StubEnd"
        oMaterial = "HDPE"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        PicStubEndHDPE.Visible = True
        If rbtHDPEStubEnd.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbt316LStubEnd_CheckedChanged(sender As Object, e As EventArgs) Handles rbt316LStubEnd.CheckedChanged
        oItemName = "StubEnd"
        oMaterial = "316L"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize

        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
            cbxDN.Text = oPipeSize
        End If

        all_Pictures_Off()
        PicStubEndSS.Visible = True
        If rbt316LStubEnd.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPVCReducingBush_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPVCReducingBush.CheckedChanged
        oItemName = "RedBush"
        oMaterial = "PVC"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315", "DE355", "DE400"})
        If oPipeSize = "DE20" Then
            cbxDN.Text = "DE25"
        Else cbxDN.Text = oPipeSize
        End If
        all_Pictures_Off()
        PicRedBushPVC.Visible = True
        If rbtPVCReducingBush.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        If rbtPVCReducingBush.Checked = False Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = True
            cbxPipeLenght.Visible = True
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPVCAdapterBush_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPVCAdapterBush.CheckedChanged
        oItemName = "AdapterBush"
        oMaterial = "PVC"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110"})
        cbxDN.Text = "DE63"
        cbxBranchDN.Items.Clear()
        cbxBranchDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63"})
        cbxBranchDN.Text = "DE32"
        all_Pictures_Off()
        PicAdapBushPVC.Visible = True
        If rbtPVCAdapterBush.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        If rbtPVCAdapterBush.Checked = False Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = True
            cbxPipeLenght.Visible = True
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPVCMaleAdapter_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPVCMaleAdapter.CheckedChanged
        oItemName = "MaleAdapter"
        oMaterial = "PVC"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110"})
        cbxDN.Text = "DE63"
        cbxBranchDN.Items.Clear()
        cbxBranchDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63"})
        cbxBranchDN.Text = "DE32"
        all_Pictures_Off()
        PicMaleAdaptorPVC.Visible = True
        If rbtPVCMaleAdapter.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        If rbtPVCMaleAdapter.Checked = False Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = True
            cbxPipeLenght.Visible = True
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtHDPEElectroCoupling_CheckedChanged(sender As Object, e As EventArgs) Handles rbtHDPEElectroCoupling.CheckedChanged
        oItemName = "ElectroCoupling"
        oMaterial = "HDPE"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160", "DE225", "DE280", "DE315"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        PicElectroCouplingHDPE.Visible = True
        If rbtHDPEElectroCoupling.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtHDPEMaleAdapter_CheckedChanged(sender As Object, e As EventArgs) Handles rbtHDPEMaleAdapter.CheckedChanged
        oItemName = "MaleAdapter"
        oMaterial = "HDPE"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110"})
        cbxDN.Text = "DE32"
        cbxBranchDN.Items.Clear()
        cbxBranchDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63"})
        cbxBranchDN.Text = "DE20"
        all_Pictures_Off()
        PicMaleAdapterHDPE.Visible = True
        If rbtHDPEMaleAdapter.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        If rbtHDPEMaleAdapter.Checked = False Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = True
            cbxPipeLenght.Visible = True
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtHDPEFemaleAdapter_CheckedChanged(sender As Object, e As EventArgs) Handles rbtHDPEFemaleAdapter.CheckedChanged
        oItemName = "FemaleAdapter"
        oMaterial = "HDPE"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63", "DE75", "DE90", "DE110"})
        cbxDN.Text = "DE32"
        cbxBranchDN.Items.Clear()
        cbxBranchDN.Items.AddRange(New Object() {"DE20", "DE25", "DE32", "DE40", "DE50", "DE63"})
        cbxBranchDN.Text = "DE20"
        all_Pictures_Off()
        PicFemaleAdapterHDPE.Visible = True

        If rbtHDPEFemaleAdapter.Checked = True Then
            lblBranchDN.Visible = True
            cbxBranchDN.Visible = True
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        If rbtHDPEFemaleAdapter.Checked = False Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = True
            cbxPipeLenght.Visible = True
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        'Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub cbxBranchDN_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cbxBranchDN.SelectedIndexChanged
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub


    Private Sub setParameters()
        Select Case cbxDN.Text
            Case "DN10"
                oPipeSize = "DN10"
                Select Case oMaterial
                    Case "PP"
                        oPipeDia = 16
                End Select

            Case "DN15"
                oPipeSize = "DN15"
                oNippleLenght = 3.5
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 21.3
                        oFlangeKDia = 65
                        oFlangeBoltHoleDia = 14
                        oPipeSch = 2
                    Case "GALVA"
                        oPipeDia = 21.3
                        oPipeSch = 2
                        oElbowRadius = 29
                        oElbowLenght = 29
                        oTeeLenght = 50
                        oCapLenght = 25
                        oCouplingLenght = 48
                        oUnionLenght = 49
                        oFlangeDia = 95
                        oFlangeLenght = 35
                        oFlangeThick = 16
                        oFlangeKDia = 65
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                    Case "S235"
                        oPipeDia = 21.3
                        oPipeSch = 2
                        oElbowRadius = 29
                        oElbowLenght = 29
                        oTeeLenght = 50
                        oCapLenght = 25
                        oCouplingLenght = 48
                        oUnionLenght = 49
                        oFlangeDia = 95
                        oFlangeLenght = 35
                        oFlangeThick = 16
                        oFlangeKDia = 65
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                    Case "304L", "316L", "ALU"
                        oPipeDia = 21.3
                        oPipeSch = 2
                        oElbowRadius = 29
                        oElbowLenght = 29
                        oTeeLenght = 50
                        oCapLenght = 25
                        oCouplingLenght = 48
                        oUnionLenght = 49
                        oFlangeDia = 95
                        oFlangeLenght = 35
                        oFlangeThick = 16
                        oFlangeKDia = 65
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                End Select

            Case "1/2" & ControlChars.Quote
                oPipeSize = "050in"
                oNippleLenght = 3.5
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 21.3
                        oFlangeKDia = 65
                        oFlangeBoltHoleDia = 14
                        oPipeSch = 2
                    Case "GALVA"
                        oPipeDia = 21.3
                        oPipeSch = 2
                        oElbowRadius = 29
                        oElbowLenght = 29
                        oTeeLenght = 50
                        oCapLenght = 25
                        oCouplingLenght = 48
                        oUnionLenght = 49
                        oFlangeDia = 95
                        oFlangeLenght = 35
                        oFlangeThick = 16
                        oFlangeKDia = 65
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                    Case "S235"
                        oPipeDia = 21.3
                        oPipeSch = 2
                        oElbowRadius = 29
                        oElbowLenght = 29
                        oTeeLenght = 50
                        oCapLenght = 25
                        oCouplingLenght = 48
                        oUnionLenght = 49
                        oFlangeDia = 95
                        oFlangeLenght = 35
                        oFlangeThick = 16
                        oFlangeKDia = 65
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                    Case "304L", "316L", "ALU"
                        oPipeDia = 21.3
                        oPipeSch = 2
                        oElbowRadius = 29
                        oElbowLenght = 29
                        oTeeLenght = 50
                        oCapLenght = 25
                        oCouplingLenght = 48
                        oUnionLenght = 49
                        oFlangeDia = 95
                        oFlangeLenght = 35
                        oFlangeThick = 16
                        oFlangeKDia = 65
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                End Select

            Case "DE20"
                oPipeSize = "DE20"
                oNippleLenght = 3.5
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 21.3
                        oFlangeKDia = 65
                        oFlangeBoltHoleDia = 14
                        oPipeSch = 2
                    Case "PVC"
                        oPipeDia = 20
                        oPipeSch = 1.5
                        oElbowRadius = 12
                        oElbowLenght = 12
                        oTeeLenght = 54
                        oReducerLenght = 888
                        oCapLenght = 16
                        oCouplingLenght = 48
                        oSockLenght = 16
                        oUnionLenght = 49
                        oFlangeDia = 96
                        oFlangeLenght = 19.5
                        oFlangeThick = 11
                        oFlangeKDia = 65
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                        oFlangeStubThick = 7
                    Case "HDPE", "PP"
                        oPipeDia = 20
                        oPipeSch = 3
                        oElbowRadius = 12
                        oElbowLenght = 75
                        oTeeLenght = 150
                        oReducerLenght = 36
                        oCapLenght = 52
                        oCouplingLenght = 48
                        oSockLenght = 75
                        oUnionLenght = 108
                        oFlangeDia = 96
                        oFlangeLenght = 19.5
                        oFlangeThick = 11
                        oFlangeKDia = 65
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                        oFlangeStubThick = 7
                End Select
            Case "DN20"
                oPipeSize = "DN20"
                oNippleLenght = 4
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 26.9
                        oFlangeKDia = 75
                        oFlangeBoltHoleDia = 14
                        oPipeSch = 2
                    Case "GALVA"
                        oPipeDia = 26.9
                        oPipeSch = 2
                        oElbowRadius = 29
                        oElbowLenght = 29
                        oTeeLenght = 58
                        oReducerLenght = 38
                        oCapLenght = 25
                        oCouplingLenght = 51
                        oUnionLenght = 56.9
                        oFlangeDia = 105
                        oFlangeLenght = 38
                        oFlangeThick = 16
                        oFlangeKDia = 75
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                    Case "S235"
                        oPipeDia = 26.9
                        oPipeSch = 2
                        oElbowRadius = 29
                        oElbowLenght = 29
                        oTeeLenght = 58
                        oReducerLenght = 38
                        oCapLenght = 25
                        oCouplingLenght = 51
                        oUnionLenght = 56.9
                        oFlangeDia = 105
                        oFlangeLenght = 38
                        oFlangeThick = 16
                        oFlangeKDia = 75
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                    Case "304L", "316L", "ALU"
                        oPipeDia = 26.9
                        oPipeSch = 2
                        oElbowRadius = 29
                        oElbowLenght = 29
                        oTeeLenght = 58
                        oReducerLenght = 38
                        oCapLenght = 25
                        oCouplingLenght = 51
                        oUnionLenght = 56.9
                        oFlangeDia = 105
                        oFlangeLenght = 38
                        oFlangeThick = 16
                        oFlangeKDia = 75
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                End Select

            Case "3/4" & ControlChars.Quote
                oPipeSize = "075in"
                oNippleLenght = 4
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 26.9
                        oFlangeKDia = 75
                        oFlangeBoltHoleDia = 14
                        oPipeSch = 2
                    Case "GALVA"
                        oPipeDia = 26.9
                        oPipeSch = 2
                        oElbowRadius = 29
                        oElbowLenght = 29
                        oTeeLenght = 58
                        oReducerLenght = 38
                        oCapLenght = 25
                        oCouplingLenght = 51
                        oUnionLenght = 56.9
                        oFlangeDia = 105
                        oFlangeLenght = 38
                        oFlangeThick = 16
                        oFlangeKDia = 75
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                    Case "S235"
                        oPipeDia = 26.9
                        oPipeSch = 2
                        oElbowRadius = 29
                        oElbowLenght = 29
                        oTeeLenght = 58
                        oReducerLenght = 38
                        oCapLenght = 25
                        oCouplingLenght = 51
                        oUnionLenght = 56.9
                        oFlangeDia = 105
                        oFlangeLenght = 38
                        oFlangeThick = 16
                        oFlangeKDia = 75
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                    Case "304L", "316L", "ALU"
                        oPipeDia = 26.9
                        oPipeSch = 2
                        oElbowRadius = 29
                        oElbowLenght = 29
                        oTeeLenght = 58
                        oReducerLenght = 38
                        oCapLenght = 25
                        oCouplingLenght = 51
                        oUnionLenght = 56.9
                        oFlangeDia = 105
                        oFlangeLenght = 38
                        oFlangeThick = 16
                        oFlangeKDia = 75
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                End Select


            Case "DE25"
                oPipeSize = "DE25"
                oNippleLenght = 4
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 26.9
                        oFlangeKDia = 75
                        oFlangeBoltHoleDia = 14
                        oPipeSch = 2
                    Case "PVC"
                        oPipeDia = 25
                        oPipeSch = 1.5
                        oElbowRadius = 15
                        oElbowLenght = 15
                        oTeeLenght = 66
                        oReducerLenght = 38.5
                        oCapLenght = 19
                        oCouplingLenght = 51
                        oSockLenght = 19
                        oUnionLenght = 56.9
                        oFlangeDia = 107
                        oFlangeLenght = 22
                        oFlangeThick = 12
                        oFlangeKDia = 75
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                        oFlangeStubThick = 7
                    Case "HDPE", "PP"
                        oPipeDia = 25
                        oPipeSch = 3
                        oElbowRadius = 12
                        oElbowLenght = 75
                        oTeeLenght = 150
                        oReducerLenght = 36
                        oCapLenght = 52
                        oCouplingLenght = 48
                        oSockLenght = 75
                        oUnionLenght = 114
                        oFlangeDia = 96
                        oFlangeLenght = 19.5
                        oFlangeThick = 11
                        oFlangeKDia = 65
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                        oFlangeStubThick = 9
                End Select



            Case "DN25"
                oPipeSize = "DN25"
                oNippleLenght = 4
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 33.7
                        oFlangeKDia = 85
                        oFlangeBoltHoleDia = 14
                        oPipeSch = 2
                    Case "GALVA"
                        oPipeDia = 33.7
                        oPipeSch = 2
                        oElbowRadius = 38
                        oElbowLenght = 38
                        oTeeLenght = 76
                        oReducerLenght = 51
                        oCapLenght = 38
                        oCouplingLenght = 60
                        oUnionLenght = 62
                        oFlangeDia = 115
                        oFlangeLenght = 40
                        oFlangeThick = 18
                        oFlangeKDia = 85
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                    Case "S235"
                        oPipeDia = 33.7
                        oPipeSch = 2
                        oElbowRadius = 38
                        oElbowLenght = 38
                        oTeeLenght = 76
                        oReducerLenght = 51
                        oCapLenght = 38
                        oCouplingLenght = 60
                        oUnionLenght = 62
                        oFlangeDia = 115
                        oFlangeLenght = 40
                        oFlangeThick = 18
                        oFlangeKDia = 85
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                    Case "304L", "316L", "ALU"
                        oPipeDia = 33.7
                        oPipeSch = 2
                        oElbowRadius = 38
                        oElbowLenght = 38
                        oTeeLenght = 76
                        oReducerLenght = 51
                        oCapLenght = 38
                        oCouplingLenght = 60
                        oUnionLenght = 62
                        oFlangeDia = 115
                        oFlangeLenght = 40
                        oFlangeThick = 18
                        oFlangeKDia = 85
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4

                End Select

            Case "1" & ControlChars.Quote
                oPipeSize = "100in"
                oNippleLenght = 4
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 33.7
                        oFlangeKDia = 85
                        oFlangeBoltHoleDia = 14
                        oPipeSch = 2
                    Case "GALVA"
                        oPipeDia = 33.7
                        oPipeSch = 2
                        oElbowRadius = 38
                        oElbowLenght = 38
                        oTeeLenght = 76
                        oReducerLenght = 51
                        oCapLenght = 38
                        oCouplingLenght = 60
                        oUnionLenght = 62
                        oFlangeDia = 115
                        oFlangeLenght = 40
                        oFlangeThick = 18
                        oFlangeKDia = 85
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                    Case "S235"
                        oPipeDia = 33.7
                        oPipeSch = 2
                        oElbowRadius = 38
                        oElbowLenght = 38
                        oTeeLenght = 76
                        oReducerLenght = 51
                        oCapLenght = 38
                        oCouplingLenght = 60
                        oUnionLenght = 62
                        oFlangeDia = 115
                        oFlangeLenght = 40
                        oFlangeThick = 18
                        oFlangeKDia = 85
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                    Case "304L", "316L", "ALU"
                        oPipeDia = 33.7
                        oPipeSch = 2
                        oElbowRadius = 38
                        oElbowLenght = 38
                        oTeeLenght = 76
                        oReducerLenght = 51
                        oCapLenght = 38
                        oCouplingLenght = 60
                        oUnionLenght = 62
                        oFlangeDia = 115
                        oFlangeLenght = 40
                        oFlangeThick = 18
                        oFlangeKDia = 85
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4

                End Select


            Case "DE32"
                oPipeSize = "DE32"
                oNippleLenght = 4
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 33.7
                        oFlangeKDia = 85
                        oFlangeBoltHoleDia = 14
                        oPipeSch = 2

                    Case "PVC"
                        oPipeDia = 32
                        oPipeSch = 1.8
                        oElbowRadius = 19
                        oElbowLenght = 19
                        oTeeLenght = 80
                        oReducerLenght = 49
                        oCapLenght = 22
                        oCouplingLenght = 60
                        oSockLenght = 22
                        oUnionLenght = 62
                        oFlangeDia = 117
                        oFlangeLenght = 25
                        oFlangeThick = 14
                        oFlangeKDia = 85
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                        oFlangeStubThick = 7
                    Case "HDPE", "PP"
                        oPipeDia = 32
                        oPipeSch = 3
                        oElbowRadius = 19
                        oElbowLenght = 85
                        oTeeLenght = 170
                        oReducerLenght = 36
                        oCapLenght = 54
                        oCouplingLenght = 60
                        oSockLenght = 89
                        oUnionLenght = 122
                        oFlangeDia = 117
                        oFlangeLenght = 25
                        oFlangeThick = 14
                        oFlangeKDia = 85
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                        oFlangeStubThick = 10
                End Select

            Case "1 1/4" & ControlChars.Quote
                oPipeSize = "125in"
                oNippleLenght = 5
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 42.4
                        oFlangeKDia = 100
                        oFlangeBoltHoleDia = 14
                        oPipeSch = 2
                    Case "GALVA"
                        oPipeDia = 42.4
                        oPipeSch = 2
                        oElbowRadius = 48
                        oElbowLenght = 48
                        oTeeLenght = 96
                        oReducerLenght = 51
                        oCapLenght = 38
                        oCouplingLenght = 67
                        oUnionLenght = 71.1
                        oFlangeDia = 140
                        oFlangeLenght = 40
                        oFlangeThick = 18
                        oFlangeKDia = 100
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                    Case "S235"
                        oPipeDia = 42.4
                        oPipeSch = 2
                        oElbowRadius = 48
                        oElbowLenght = 48
                        oTeeLenght = 96
                        oReducerLenght = 51
                        oCapLenght = 38
                        oCouplingLenght = 67
                        oUnionLenght = 71.1
                        oFlangeDia = 140
                        oFlangeLenght = 40
                        oFlangeThick = 18
                        oFlangeKDia = 100
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                    Case "304L", "316L", "ALU"
                        oPipeDia = 42.4
                        oPipeSch = 2
                        oElbowRadius = 48
                        oElbowLenght = 48
                        oTeeLenght = 96
                        oReducerLenght = 51
                        oCapLenght = 38
                        oCouplingLenght = 67
                        oUnionLenght = 71.1
                        oFlangeDia = 140
                        oFlangeLenght = 40
                        oFlangeThick = 18
                        oFlangeKDia = 100
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                End Select


            Case "DN32"
                oNippleLenght = 5
                oPipeSize = "DN32"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 42.4
                        oFlangeKDia = 100
                        oFlangeBoltHoleDia = 14
                        oPipeSch = 2
                    Case "GALVA"
                        oPipeDia = 42.4
                        oPipeSch = 2
                        oElbowRadius = 48
                        oElbowLenght = 48
                        oTeeLenght = 96
                        oReducerLenght = 51
                        oCapLenght = 38
                        oCouplingLenght = 67
                        oUnionLenght = 71.1
                        oFlangeDia = 140
                        oFlangeLenght = 40
                        oFlangeThick = 18
                        oFlangeKDia = 100
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                    Case "S235"
                        oPipeDia = 42.4
                        oPipeSch = 2
                        oElbowRadius = 48
                        oElbowLenght = 48
                        oTeeLenght = 96
                        oReducerLenght = 51
                        oCapLenght = 38
                        oCouplingLenght = 67
                        oUnionLenght = 71.1
                        oFlangeDia = 140
                        oFlangeLenght = 40
                        oFlangeThick = 18
                        oFlangeKDia = 100
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                    Case "304L", "316L", "ALU"
                        oPipeDia = 42.4
                        oPipeSch = 2
                        oElbowRadius = 48
                        oElbowLenght = 48
                        oTeeLenght = 96
                        oReducerLenght = 51
                        oCapLenght = 38
                        oCouplingLenght = 67
                        oUnionLenght = 71.1
                        oFlangeDia = 140
                        oFlangeLenght = 40
                        oFlangeThick = 18
                        oFlangeKDia = 100
                        oFlangeBoltHoleDia = 14
                        oFlangeBoltNumber = 4
                End Select

            Case "DE40"
                oNippleLenght = 5
                oPipeSize = "DE40"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 42.4
                        oFlangeKDia = 100
                        oFlangeBoltHoleDia = 14
                        oPipeSch = 2
                    Case "PVC"
                        oPipeDia = 40
                        oPipeSch = 1.9
                        oElbowRadius = 22
                        oElbowLenght = 22
                        oTeeLenght = 96
                        oReducerLenght = 58
                        oCapLenght = 26
                        oCouplingLenght = 67
                        oSockLenght = 26
                        oUnionLenght = 71.1
                        oFlangeDia = 143
                        oFlangeLenght = 29
                        oFlangeThick = 15
                        oFlangeKDia = 100
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                        oFlangeStubThick = 8
                    Case "HDPE", "PP"
                        oPipeDia = 40
                        oPipeSch = 3.7
                        oElbowRadius = 22
                        oElbowLenght = 95
                        oTeeLenght = 190
                        oReducerLenght = 45
                        oCapLenght = 57
                        oCouplingLenght = 67
                        oSockLenght = 99
                        oUnionLenght = 128
                        oFlangeDia = 143
                        oFlangeLenght = 29
                        oFlangeThick = 15
                        oFlangeKDia = 100
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                        oFlangeStubThick = 11
                End Select

            Case "DN40"
                oNippleLenght = 5
                oPipeSize = "DN40"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 48.3
                        oFlangeKDia = 110
                        oFlangeBoltHoleDia = 18
                        oPipeSch = 2.3
                    Case "GALVA"
                        oPipeDia = 48.3
                        oPipeSch = 2.3
                        oElbowRadius = 57
                        oElbowLenght = 57
                        oTeeLenght = 114
                        oReducerLenght = 64
                        oCapLenght = 38
                        oCouplingLenght = 79
                        oUnionLenght = 75.5
                        oFlangeDia = 150
                        oFlangeLenght = 42
                        oFlangeThick = 18
                        oFlangeKDia = 110
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                    Case "S235"
                        oPipeDia = 48.3
                        oPipeSch = 2.3
                        oElbowRadius = 57
                        oElbowLenght = 57
                        oTeeLenght = 114
                        oReducerLenght = 64
                        oCapLenght = 38
                        oCouplingLenght = 79
                        oUnionLenght = 75.5
                        oFlangeDia = 150
                        oFlangeLenght = 42
                        oFlangeThick = 18
                        oFlangeKDia = 110
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                    Case "304L", "316L", "ALU"
                        oPipeDia = 48.3
                        oPipeSch = 2
                        oElbowRadius = 57
                        oElbowLenght = 57
                        oTeeLenght = 114
                        oReducerLenght = 64
                        oCapLenght = 38
                        oCouplingLenght = 79
                        oUnionLenght = 75.5
                        oFlangeDia = 150
                        oFlangeLenght = 42
                        oFlangeThick = 18
                        oFlangeKDia = 110
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4

                End Select

            Case "1 1/2" & ControlChars.Quote
                oPipeSize = "150in"
                oNippleLenght = 5
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 48.3
                        oFlangeKDia = 110
                        oFlangeBoltHoleDia = 18
                        oPipeSch = 2.3
                    Case "GALVA"
                        oPipeDia = 48.3
                        oPipeSch = 2.3
                        oElbowRadius = 57
                        oElbowLenght = 57
                        oTeeLenght = 114
                        oReducerLenght = 64
                        oCapLenght = 38
                        oCouplingLenght = 79
                        oUnionLenght = 75.5
                        oFlangeDia = 150
                        oFlangeLenght = 42
                        oFlangeThick = 18
                        oFlangeKDia = 110
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                    Case "S235"
                        oPipeDia = 48.3
                        oPipeSch = 2.3
                        oElbowRadius = 57
                        oElbowLenght = 57
                        oTeeLenght = 114
                        oReducerLenght = 64
                        oCapLenght = 38
                        oCouplingLenght = 79
                        oUnionLenght = 75.5
                        oFlangeDia = 150
                        oFlangeLenght = 42
                        oFlangeThick = 18
                        oFlangeKDia = 110
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                    Case "304L", "316L", "ALU"
                        oPipeDia = 48.3
                        oPipeSch = 2
                        oElbowRadius = 57
                        oElbowLenght = 57
                        oTeeLenght = 114
                        oReducerLenght = 64
                        oCapLenght = 38
                        oCouplingLenght = 79
                        oUnionLenght = 75.5
                        oFlangeDia = 150
                        oFlangeLenght = 42
                        oFlangeThick = 18
                        oFlangeKDia = 110
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4

                End Select

            Case "DE50"
                oNippleLenght = 5
                oPipeSize = "DE50"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 48.3
                        oFlangeKDia = 110
                        oFlangeBoltHoleDia = 18
                        oPipeSch = 2.3

                    Case "PVC"
                        oPipeDia = 50
                        oPipeSch = 2.4
                        oElbowRadius = 27.5
                        oElbowLenght = 27.5
                        oTeeLenght = 114
                        oReducerLenght = 70
                        oCapLenght = 31
                        oCouplingLenght = 79
                        oSockLenght = 31
                        oUnionLenght = 75.5
                        oFlangeDia = 153
                        oFlangeLenght = 34
                        oFlangeThick = 16
                        oFlangeKDia = 110
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                        oFlangeStubThick = 8
                    Case "HDPE", "PP"
                        oPipeDia = 50
                        oPipeSch = 4.6
                        oElbowRadius = 27.5
                        oElbowLenght = 105
                        oTeeLenght = 210
                        oReducerLenght = 47
                        oCapLenght = 63
                        oCouplingLenght = 79
                        oSockLenght = 110
                        oUnionLenght = 134
                        oFlangeDia = 153
                        oFlangeLenght = 34
                        oFlangeThick = 16
                        oFlangeKDia = 110
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                        oFlangeStubThick = 12
                End Select




            Case "DN50"
                oNippleLenght = 5
                oPipeSize = "DN50"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 60.3
                        oFlangeKDia = 125
                        oFlangeBoltHoleDia = 18
                        oPipeSch = 2.3
                    Case "GALVA"
                        oPipeDia = 60.3
                        oPipeSch = 2.3
                        oElbowRadius = 76
                        oElbowLenght = 76
                        oTeeLenght = 128
                        oReducerLenght = 76
                        oCapLenght = 44
                        oCouplingLenght = 86
                        oUnionLenght = 86.1
                        oFlangeDia = 165
                        oFlangeLenght = 45
                        oFlangeThick = 18
                        oFlangeKDia = 125
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                    Case "S235"
                        oPipeDia = 60.3
                        oPipeSch = 2.3
                        oElbowRadius = 76
                        oElbowLenght = 76
                        oTeeLenght = 128
                        oReducerLenght = 76
                        oCapLenght = 44
                        oCouplingLenght = 86
                        oUnionLenght = 86.1
                        oFlangeDia = 165
                        oFlangeLenght = 45
                        oFlangeThick = 18
                        oFlangeKDia = 125
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                    Case "304L", "316L", "ALU"
                        oPipeDia = 60.3
                        oPipeSch = 2
                        oElbowRadius = 76
                        oElbowLenght = 76
                        oTeeLenght = 128
                        oReducerLenght = 76
                        oCapLenght = 44
                        oCouplingLenght = 86
                        oUnionLenght = 86.1
                        oFlangeDia = 165
                        oFlangeLenght = 45
                        oFlangeThick = 18
                        oFlangeKDia = 125
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                End Select


            Case "2" & ControlChars.Quote
                oPipeSize = "200in"
                oNippleLenght = 5
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 60.3
                        oFlangeKDia = 125
                        oFlangeBoltHoleDia = 18
                        oPipeSch = 2.3
                    Case "GALVA"
                        oPipeDia = 60.3
                        oPipeSch = 2.3
                        oElbowRadius = 76
                        oElbowLenght = 76
                        oTeeLenght = 128
                        oReducerLenght = 76
                        oCapLenght = 44
                        oCouplingLenght = 86
                        oUnionLenght = 86.1
                        oFlangeDia = 165
                        oFlangeLenght = 45
                        oFlangeThick = 18
                        oFlangeKDia = 125
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                    Case "S235"
                        oPipeDia = 60.3
                        oPipeSch = 2.3
                        oElbowRadius = 76
                        oElbowLenght = 76
                        oTeeLenght = 128
                        oReducerLenght = 76
                        oCapLenght = 44
                        oCouplingLenght = 86
                        oUnionLenght = 86.1
                        oFlangeDia = 165
                        oFlangeLenght = 45
                        oFlangeThick = 18
                        oFlangeKDia = 125
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                    Case "304L", "316L", "ALU"
                        oPipeDia = 60.3
                        oPipeSch = 2
                        oElbowRadius = 76
                        oElbowLenght = 76
                        oTeeLenght = 128
                        oReducerLenght = 76
                        oCapLenght = 44
                        oCouplingLenght = 86
                        oUnionLenght = 86.1
                        oFlangeDia = 165
                        oFlangeLenght = 45
                        oFlangeThick = 18
                        oFlangeKDia = 125
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                End Select


            Case "DE63"
                oNippleLenght = 5
                oPipeSize = "DE63"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 60.3
                        oFlangeKDia = 125
                        oFlangeBoltHoleDia = 18
                        oPipeSch = 2.3

                    Case "PVC"
                        oPipeDia = 63
                        oPipeSch = 3
                        oElbowRadius = 35
                        oElbowLenght = 35
                        oTeeLenght = 144
                        oReducerLenght = 100
                        oCapLenght = 38
                        oCouplingLenght = 86
                        oSockLenght = 38
                        oUnionLenght = 86.1
                        oFlangeDia = 168
                        oFlangeLenght = 41
                        oFlangeThick = 18
                        oFlangeKDia = 125
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                        oFlangeStubThick = 9
                    Case "HDPE", "PP"
                        oPipeDia = 63
                        oPipeSch = 5.8
                        oElbowRadius = 33.5
                        oElbowLenght = 115
                        oTeeLenght = 230
                        oReducerLenght = 59
                        oCapLenght = 65
                        oCouplingLenght = 86
                        oSockLenght = 127
                        oUnionLenght = 138
                        oFlangeDia = 168
                        oFlangeLenght = 41
                        oFlangeThick = 18
                        oFlangeKDia = 125
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                        oFlangeStubThick = 14
                End Select
            Case "DN65"
                oNippleLenght = 6
                oPipeSize = "DN65"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 76.1
                        oFlangeKDia = 145
                        oFlangeBoltHoleDia = 18
                        oPipeSch = 2.6
                    Case "GALVA"
                        oPipeDia = 76.1
                        oPipeSch = 2.6
                        oElbowRadius = 95
                        oElbowLenght = 95
                        oTeeLenght = 152
                        oReducerLenght = 89
                        oCapLenght = 51
                        oCouplingLenght = 92
                        oUnionLenght = 102.4
                        oFlangeDia = 185
                        oFlangeLenght = 45
                        oFlangeThick = 18
                        oFlangeKDia = 145
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                    Case "S235"
                        oPipeDia = 76.1
                        oPipeSch = 2.6
                        oElbowRadius = 95
                        oElbowLenght = 95
                        oTeeLenght = 152
                        oReducerLenght = 89
                        oCapLenght = 51
                        oCouplingLenght = 92
                        oUnionLenght = 102.4
                        oFlangeDia = 185
                        oFlangeLenght = 45
                        oFlangeThick = 18
                        oFlangeKDia = 145
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                    Case "304L", "316L", "ALU"
                        oPipeDia = 76.1
                        oPipeSch = 2
                        oElbowRadius = 95
                        oElbowLenght = 95
                        oTeeLenght = 152
                        oReducerLenght = 89
                        oCapLenght = 51
                        oCouplingLenght = 92
                        oUnionLenght = 102.4
                        oFlangeDia = 185
                        oFlangeLenght = 45
                        oFlangeThick = 18
                        oFlangeKDia = 145
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4

                End Select
            Case "DE75"
                oNippleLenght = 6
                oPipeSize = "DE75"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 76.1
                        oFlangeKDia = 145
                        oFlangeBoltHoleDia = 18
                        oPipeSch = 2.6

                    Case "PVC"
                        oPipeDia = 75
                        oPipeSch = 3.6
                        oElbowRadius = 41.5
                        oElbowLenght = 41.5
                        oTeeLenght = 169
                        oReducerLenght = 100
                        oCapLenght = 44
                        oCouplingLenght = 92
                        oSockLenght = 44
                        oUnionLenght = 102.4
                        oFlangeDia = 188
                        oFlangeLenght = 47
                        oFlangeThick = 19
                        oFlangeKDia = 145
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                        oFlangeStubThick = 10
                    Case "HDPE", "PP"
                        oPipeDia = 75
                        oPipeSch = 6.8
                        oElbowRadius = 41.5
                        oElbowLenght = 130
                        oTeeLenght = 264
                        oReducerLenght = 78
                        oCapLenght = 72
                        oCouplingLenght = 92
                        oSockLenght = 141
                        oUnionLenght = 132
                        oFlangeDia = 188
                        oFlangeLenght = 47
                        oFlangeThick = 19
                        oFlangeKDia = 145
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 4
                        oFlangeStubThick = 16
                End Select
            Case "DN80"
                oNippleLenght = 6.5
                oPipeSize = "DN80"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 88.9
                        oFlangeKDia = 160
                        oFlangeBoltHoleDia = 18
                        oPipeSch = 2.9
                    Case "GALVA"
                        oPipeDia = 88.9
                        oPipeSch = 2.9
                        oElbowRadius = 114
                        oElbowLenght = 114
                        oTeeLenght = 172
                        oReducerLenght = 89
                        oCapLenght = 64
                        oCouplingLenght = 108
                        oUnionLenght = 109
                        oFlangeDia = 200
                        oFlangeLenght = 45
                        oFlangeThick = 18
                        oFlangeKDia = 160
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 8
                    Case "S235"
                        oPipeDia = 88.9
                        oPipeSch = 2.9
                        oElbowRadius = 114
                        oElbowLenght = 114
                        oTeeLenght = 172
                        oReducerLenght = 89
                        oCapLenght = 64
                        oCouplingLenght = 108
                        oUnionLenght = 109
                        oFlangeDia = 200
                        oFlangeLenght = 45
                        oFlangeThick = 18
                        oFlangeKDia = 160
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 8
                    Case "304L", "316L", "ALU"
                        oPipeDia = 88.9
                        oPipeSch = 2
                        oElbowRadius = 114
                        oElbowLenght = 114
                        oTeeLenght = 172
                        oReducerLenght = 89
                        oCapLenght = 64
                        oCouplingLenght = 108
                        oUnionLenght = 109
                        oFlangeDia = 200
                        oFlangeLenght = 45
                        oFlangeThick = 18
                        oFlangeKDia = 160
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 8

                End Select
            Case "DE90"
                oNippleLenght = 6.5
                oPipeSize = "DE90"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 88.9
                        oFlangeKDia = 160
                        oFlangeBoltHoleDia = 18
                        oPipeSch = 2.9

                    Case "PVC"
                        oPipeDia = 90
                        oPipeSch = 4.3
                        oElbowRadius = 50
                        oElbowLenght = 50
                        oTeeLenght = 199
                        oReducerLenght = 118
                        oCapLenght = 51
                        oCouplingLenght = 108
                        oSockLenght = 51
                        oUnionLenght = 109
                        oFlangeDia = 203
                        oFlangeLenght = 56
                        oFlangeThick = 20
                        oFlangeKDia = 160
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 8
                        oFlangeStubThick = 10
                    Case "HDPE", "PP"
                        oPipeDia = 90
                        oPipeSch = 8.2
                        oElbowRadius = 47.5
                        oElbowLenght = 150
                        oTeeLenght = 300
                        oReducerLenght = 78
                        oCapLenght = 81
                        oCouplingLenght = 108
                        oSockLenght = 141
                        oUnionLenght = 133
                        oFlangeDia = 203
                        oFlangeLenght = 56
                        oFlangeThick = 20
                        oFlangeKDia = 160
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 8
                        oFlangeStubThick = 17
                End Select
            Case "DN100"
                oNippleLenght = 8
                oPipeSize = "DN100"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 114.3
                        oFlangeKDia = 180
                        oFlangeBoltHoleDia = 18
                        oPipeSch = 3.2
                    Case "GALVA"
                        oPipeDia = 114.3
                        oPipeSch = 3.2
                        oElbowRadius = 152
                        oElbowLenght = 152
                        oTeeLenght = 210
                        oReducerLenght = 102
                        oCapLenght = 76
                        oCouplingLenght = 121
                        oUnionLenght = 122
                        oFlangeDia = 220
                        oFlangeLenght = 50
                        oFlangeThick = 20
                        oFlangeKDia = 180
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 8
                    Case "S235"
                        oPipeDia = 114.3
                        oPipeSch = 3.2
                        oElbowRadius = 152
                        oElbowLenght = 152
                        oTeeLenght = 210
                        oReducerLenght = 102
                        oCapLenght = 76
                        oCouplingLenght = 121
                        oUnionLenght = 122
                        oFlangeDia = 220
                        oFlangeLenght = 50
                        oFlangeThick = 20
                        oFlangeKDia = 180
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 8
                    Case "304L", "316L", "ALU"
                        oPipeDia = 114.3
                        oPipeSch = 2
                        oElbowRadius = 152
                        oElbowLenght = 152
                        oTeeLenght = 210
                        oReducerLenght = 102
                        oCapLenght = 76
                        oCouplingLenght = 121
                        oUnionLenght = 122
                        oFlangeDia = 220
                        oFlangeLenght = 50
                        oFlangeThick = 20
                        oFlangeKDia = 180
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 8

                End Select
            Case "DE110"
                oNippleLenght = 8
                oPipeSize = "DE110"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 114.3
                        oFlangeKDia = 180
                        oFlangeBoltHoleDia = 18
                        oPipeSch = 3.2

                    Case "PVC"
                        oPipeDia = 110
                        oPipeSch = 5.3
                        oElbowRadius = 61
                        oElbowLenght = 61
                        oTeeLenght = 244
                        oReducerLenght = 139
                        oCapLenght = 61
                        oCouplingLenght = 122
                        oSockLenght = 60
                        oUnionLenght = 122
                        oFlangeDia = 222
                        oFlangeLenght = 65
                        oFlangeThick = 22
                        oFlangeKDia = 180
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 8
                        oFlangeStubThick = 12
                    Case "HDPE", "PP"
                        oPipeDia = 110
                        oPipeSch = 10
                        oElbowRadius = 61
                        oElbowLenght = 165
                        oTeeLenght = 330
                        oReducerLenght = 102
                        oCapLenght = 86
                        oCouplingLenght = 121
                        oSockLenght = 152
                        oUnionLenght = 888
                        oFlangeDia = 222
                        oFlangeLenght = 65
                        oFlangeThick = 22
                        oFlangeKDia = 180
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 8
                        oFlangeStubThick = 18
                End Select
            Case "DN125"
                oPipeSize = "DN125"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 139.7
                        oFlangeKDia = 210
                        oFlangeBoltHoleDia = 18
                        oPipeSch = 3.6
                    Case "S235", "GALVA"
                        oPipeDia = 139.7
                        oPipeSch = 3.6
                        oElbowRadius = 190
                        oElbowLenght = 190
                        oTeeLenght = 248
                        oReducerLenght = 127
                        oCapLenght = 89
                        oCouplingLenght = 888
                        oUnionLenght = 888
                        oFlangeDia = 250
                        oFlangeLenght = 52
                        oFlangeThick = 20
                        oFlangeKDia = 210
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 8
                    Case "304L", "316L", "ALU"
                        oPipeDia = 139.7
                        oPipeSch = 2
                        oElbowRadius = 190
                        oElbowLenght = 190
                        oTeeLenght = 248
                        oReducerLenght = 127
                        oCapLenght = 89
                        oCouplingLenght = 888
                        oUnionLenght = 888
                        oFlangeDia = 250
                        oFlangeLenght = 52
                        oFlangeThick = 20
                        oFlangeKDia = 210
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 8
                End Select
            Case "DE140"
                oPipeSize = "DE140"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 139.7
                        oFlangeKDia = 210
                        oFlangeBoltHoleDia = 18
                        oPipeSch = 3.6

                    Case "PVC"
                        oPipeDia = 140
                        oPipeSch = 6.7
                        oElbowRadius = 77
                        oElbowLenght = 77
                        oTeeLenght = 306
                        oReducerLenght = 888
                        oCapLenght = 76
                        oCouplingLenght = 160
                        oSockLenght = 76
                        oUnionLenght = 160
                        oFlangeDia = 251
                        oFlangeLenght = 81
                        oFlangeThick = 26
                        oFlangeKDia = 210
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 8
                        oFlangeStubThick = 14
                    Case "HDPE", "PP"
                        oPipeDia = 140
                        oPipeSch = 12.7
                        oElbowRadius = 77
                        oElbowLenght = 194
                        oTeeLenght = 393
                        oReducerLenght = 120
                        oCapLenght = 92
                        oCouplingLenght = 170
                        oSockLenght = 181
                        oFlangeDia = 251
                        oFlangeLenght = 81
                        oFlangeThick = 26
                        oFlangeKDia = 210
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 8
                        oFlangeStubThick = 25
                End Select
            Case "DN150"
                oPipeSize = "DN150"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 168.3
                        oFlangeKDia = 240
                        oFlangeBoltHoleDia = 18
                        oPipeSch = 4
                    Case "S235", "GALVA"
                        oPipeDia = 168.3
                        oPipeSch = 4
                        oElbowRadius = 229
                        oElbowLenght = 229
                        oTeeLenght = 286
                        oReducerLenght = 140
                        oCapLenght = 102
                        oCouplingLenght = 888
                        oUnionLenght = 888
                        oFlangeDia = 285
                        oFlangeLenght = 55
                        oFlangeThick = 22
                        oFlangeKDia = 240
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 8
                    Case "304L", "316L", "ALU"
                        oPipeDia = 168.3
                        oPipeSch = 2
                        oElbowRadius = 229
                        oElbowLenght = 229
                        oTeeLenght = 286
                        oReducerLenght = 140
                        oCapLenght = 102
                        oCouplingLenght = 888
                        oUnionLenght = 888
                        oFlangeDia = 285
                        oFlangeLenght = 55
                        oFlangeThick = 22
                        oFlangeKDia = 240
                        oFlangeBoltHoleDia = 18
                        oFlangeBoltNumber = 8

                End Select
            Case "DE160"
                oPipeSize = "DE160"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 168.3
                        oFlangeKDia = 240
                        oFlangeBoltHoleDia = 18
                        oPipeSch = 4

                    Case "PVC"
                        oPipeDia = 160
                        oPipeSch = 7.7
                        oElbowRadius = 89
                        oElbowLenght = 89
                        oTeeLenght = 348
                        oReducerLenght = 186
                        oCapLenght = 86
                        oCouplingLenght = 180
                        oSockLenght = 86
                        oUnionLenght = 888
                        oFlangeDia = 290
                        oFlangeLenght = 90.5
                        oFlangeThick = 32
                        oFlangeKDia = 240
                        oFlangeBoltHoleDia = 22
                        oFlangeBoltNumber = 8
                        oFlangeStubThick = 16
                    Case "HDPE", "PP"
                        oPipeDia = 160
                        oPipeSch = 16.4
                        oElbowRadius = 89
                        oElbowLenght = 210
                        oTeeLenght = 420
                        oReducerLenght = 109
                        oCapLenght = 102
                        oCouplingLenght = 190
                        oSockLenght = 181
                        oUnionLenght = 888
                        oFlangeDia = 290
                        oFlangeLenght = 90.5
                        oFlangeThick = 32
                        oFlangeKDia = 240
                        oFlangeBoltHoleDia = 22
                        oFlangeBoltNumber = 8
                        oFlangeStubThick = 25
                End Select
            Case "DN200"
                oPipeSize = "DN200"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 219.1
                        oFlangeKDia = 295
                        oFlangeBoltHoleDia = 22
                        oPipeSch = 4.5
                    Case "S235", "GALVA"
                        oPipeDia = 219.1
                        oPipeSch = 4.5
                        oElbowRadius = 305
                        oElbowLenght = 305
                        oTeeLenght = 356
                        oReducerLenght = 152
                        oCapLenght = 127
                        oCouplingLenght = 888
                        oUnionLenght = 888
                        oFlangeDia = 340
                        oFlangeLenght = 55
                        oFlangeThick = 22
                        oFlangeKDia = 295
                        oFlangeBoltHoleDia = 22
                        oFlangeBoltNumber = 8
                    Case "304L", "316L", "ALU"
                        oPipeDia = 219.1
                        oPipeSch = 2
                        oElbowRadius = 305
                        oElbowLenght = 305
                        oTeeLenght = 356
                        oReducerLenght = 152
                        oCapLenght = 127
                        oCouplingLenght = 888
                        oUnionLenght = 888
                        oFlangeDia = 340
                        oFlangeLenght = 55
                        oFlangeThick = 22
                        oFlangeKDia = 295
                        oFlangeBoltHoleDia = 22
                        oFlangeBoltNumber = 8

                End Select
            Case "DE225"
                oPipeSize = "DE225"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 219.1
                        oFlangeKDia = 295
                        oFlangeBoltHoleDia = 22
                        oPipeSch = 4.5

                    Case "PVC"
                        oPipeDia = 225
                        oPipeSch = 9.6
                        oElbowRadius = 171.5
                        oElbowLenght = 171.5
                        oTeeLenght = 466
                        oReducerLenght = 242
                        oCapLenght = 119
                        oCouplingLenght = 248
                        oSockLenght = 119
                        oUnionLenght = 888
                        oFlangeDia = 340
                        oFlangeLenght = 124.5
                        oFlangeThick = 30
                        oFlangeKDia = 295
                        oFlangeBoltHoleDia = 22
                        oFlangeBoltNumber = 8
                        oFlangeStubThick = 25
                    Case "HDPE", "PP"
                        oPipeDia = 225
                        oPipeSch = 20.5
                        oElbowRadius = 171.5
                        oElbowLenght = 353
                        oTeeLenght = 540
                        oReducerLenght = 167
                        oCapLenght = 122
                        oCouplingLenght = 255
                        oSockLenght = 231
                        oUnionLenght = 888
                        oFlangeDia = 340
                        oFlangeLenght = 124.5
                        oFlangeThick = 30
                        oFlangeKDia = 295
                        oFlangeBoltHoleDia = 22
                        oFlangeBoltNumber = 8
                        oFlangeStubThick = 32
                End Select
            Case "DN250"
                oPipeSize = "DN250"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 273
                        oFlangeKDia = 355
                        oFlangeBoltHoleDia = 22
                        oPipeSch = 5
                    Case "S235", "GALVA"
                        oPipeDia = 273
                        oPipeSch = 5
                        oElbowRadius = 381
                        oElbowLenght = 381
                        oTeeLenght = 432
                        oReducerLenght = 178
                        oCapLenght = 152
                        oCouplingLenght = 888
                        oUnionLenght = 888
                        oFlangeDia = 405
                        oFlangeLenght = 62
                        oFlangeThick = 24
                        oFlangeKDia = 350
                        oFlangeBoltHoleDia = 22
                        oFlangeBoltNumber = 12
                    Case "304L", "316L", "ALU"
                        oPipeDia = 256
                        oPipeSch = 3
                        oElbowRadius = 381
                        oElbowLenght = 381
                        oTeeLenght = 432
                        oReducerLenght = 178
                        oCapLenght = 152
                        oCouplingLenght = 888
                        oUnionLenght = 888
                        oFlangeDia = 405
                        oFlangeLenght = 62
                        oFlangeThick = 24
                        oFlangeKDia = 350
                        oFlangeBoltHoleDia = 22
                        oFlangeBoltNumber = 12

                End Select
            Case "DE280"
                oPipeSize = "DE280"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 273
                        oFlangeKDia = 355
                        oFlangeBoltHoleDia = 22
                        oPipeSch = 5

                    Case "PVC"
                        oPipeDia = 280
                        oPipeSch = 13.4
                        oElbowRadius = 210
                        oElbowLenght = 210
                        oTeeLenght = 582
                        oReducerLenght = 440
                        oCapLenght = 183
                        oCouplingLenght = 300
                        oSockLenght = 146
                        oUnionLenght = 888
                        oFlangeDia = 396
                        oFlangeLenght = 161.5
                        oFlangeThick = 35
                        oFlangeKDia = 350
                        oFlangeBoltHoleDia = 22
                        oFlangeBoltNumber = 12
                        oFlangeStubThick = 32
                    Case "HDPE", "PP"
                        oPipeDia = 280
                        oPipeSch = 22.7
                        oElbowRadius = 210
                        oElbowLenght = 320
                        oTeeLenght = 615
                        oReducerLenght = 206
                        oCapLenght = 139
                        oCouplingLenght = 310
                        oSockLenght = 251
                        oUnionLenght = 888
                        oFlangeDia = 396
                        oFlangeLenght = 161.5
                        oFlangeThick = 35
                        oFlangeKDia = 350
                        oFlangeBoltHoleDia = 22
                        oFlangeBoltNumber = 12
                        oFlangeStubThick = 35
                End Select
            Case "DN300"
                oPipeSize = "DN300"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 323.9
                        oFlangeKDia = 410
                        oFlangeBoltHoleDia = 26
                        oPipeSch = 5.6
                    Case "S235", "GALVA"
                        oPipeDia = 323.9
                        oPipeSch = 5.6
                        oElbowRadius = 457
                        oElbowLenght = 457
                        oTeeLenght = 508
                        oReducerLenght = 203
                        oCapLenght = 178
                        oCouplingLenght = 888
                        oUnionLenght = 888
                        oFlangeDia = 460
                        oFlangeLenght = 70
                        oFlangeThick = 26
                        oFlangeKDia = 400
                        oFlangeBoltHoleDia = 22
                        oFlangeBoltNumber = 12
                    Case "304L", "316L", "ALU"
                        oPipeDia = 306
                        oPipeSch = 3
                        oElbowRadius = 457
                        oElbowLenght = 457
                        oTeeLenght = 508
                        oReducerLenght = 203
                        oCapLenght = 178
                        oCouplingLenght = 888
                        oUnionLenght = 888
                        oFlangeDia = 460
                        oFlangeLenght = 70
                        oFlangeThick = 26
                        oFlangeKDia = 400
                        oFlangeBoltHoleDia = 22
                        oFlangeBoltNumber = 12

                End Select
            Case "DE315"
                oPipeSize = "DE315"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 323.9
                        oFlangeKDia = 410
                        oFlangeBoltHoleDia = 26
                        oPipeSch = 5.6

                    Case "PVC"
                        oPipeDia = 315
                        oPipeSch = 15
                        oElbowRadius = 236
                        oElbowLenght = 236
                        oTeeLenght = 652
                        oReducerLenght = 440
                        oCapLenght = 228
                        oCouplingLenght = 340
                        oSockLenght = 164
                        oUnionLenght = 888
                        oFlangeDia = 465
                        oFlangeLenght = 181
                        oFlangeThick = 40
                        oFlangeKDia = 400
                        oFlangeBoltHoleDia = 22
                        oFlangeBoltNumber = 12
                        oFlangeStubThick = 32
                    Case "HDPE", "PP"
                        oPipeDia = 315
                        oPipeSch = 28.6
                        oElbowRadius = 236
                        oElbowLenght = 370
                        oTeeLenght = 695
                        oReducerLenght = 222
                        oCapLenght = 150
                        oCouplingLenght = 350
                        oSockLenght = 262
                        oUnionLenght = 888
                        oFlangeDia = 465
                        oFlangeLenght = 181
                        oFlangeThick = 40
                        oFlangeKDia = 400
                        oFlangeBoltHoleDia = 22
                        oFlangeBoltNumber = 12
                        oFlangeStubThick = 35
                End Select
            Case "DN350"
                oPipeSize = "DN350"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 355.6
                        oFlangeKDia = 470
                        oFlangeBoltHoleDia = 26
                        oPipeSch = 5.6
                    Case "S235", "GALVA"
                        oPipeDia = 355.6
                        oPipeSch = 5.6
                        oElbowRadius = 533
                        oElbowLenght = 533
                        oTeeLenght = 558
                        oReducerLenght = 330
                        oCapLenght = 191
                        oCouplingLenght = 888
                        oUnionLenght = 888
                        oFlangeDia = 520
                        oFlangeLenght = 78
                        oFlangeThick = 28
                        oFlangeKDia = 460
                        oFlangeBoltHoleDia = 22
                        oFlangeBoltNumber = 16
                    Case "304L", "316L", "ALU"
                        oPipeDia = 356
                        oPipeSch = 3
                        oElbowRadius = 533
                        oElbowLenght = 533
                        oTeeLenght = 558
                        oReducerLenght = 330
                        oCapLenght = 191
                        oCouplingLenght = 888
                        oUnionLenght = 888
                        oFlangeDia = 520
                        oFlangeLenght = 78
                        oFlangeThick = 28
                        oFlangeKDia = 460
                        oFlangeBoltHoleDia = 22
                        oFlangeBoltNumber = 16

                End Select
            Case "DE355"
                oPipeSize = "DE355"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 355.6
                        oFlangeKDia = 470
                        oFlangeBoltHoleDia = 26
                        oPipeSch = 5.6

                    Case "PVC"
                        oPipeDia = 355
                        oPipeSch = 16.9
                        oElbowRadius = 236
                        oElbowLenght = 236
                        oTeeLenght = 956
                        oReducerLenght = 440
                        oCapLenght = 888
                        oCouplingLenght = 390
                        oSockLenght = 185
                        oUnionLenght = 888
                        oFlangeDia = 511
                        oFlangeLenght = 192
                        oFlangeThick = 34
                        oFlangeKDia = 460
                        oFlangeBoltHoleDia = 22
                        oFlangeBoltNumber = 16
                        oFlangeStubThick = 30
                    Case "HDPE", "PP"
                        oPipeDia = 355
                        oPipeSch = 32.3
                        oElbowRadius = 236
                        oElbowLenght = 888
                        oTeeLenght = 820
                        oReducerLenght = 270
                        oCapLenght = 165
                        oCouplingLenght = 400
                        oSockLenght = 282
                        oUnionLenght = 888
                        oFlangeDia = 511
                        oFlangeLenght = 192
                        oFlangeThick = 34
                        oFlangeKDia = 460
                        oFlangeBoltHoleDia = 22
                        oFlangeBoltNumber = 16
                        oFlangeStubThick = 40
                End Select
            Case "DN400"
                oPipeSize = "DN400"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 406.4
                        oFlangeKDia = 525
                        oFlangeBoltHoleDia = 26
                        oPipeSch = 6.3
                    Case "S235", "GALVA"
                        oPipeDia = 406.4
                        oPipeSch = 6.3
                        oElbowRadius = 610
                        oElbowLenght = 610
                        oTeeLenght = 610
                        oReducerLenght = 356
                        oCapLenght = 203
                        oCouplingLenght = 888
                        oUnionLenght = 888
                        oFlangeDia = 580
                        oFlangeLenght = 82
                        oFlangeThick = 30
                        oFlangeKDia = 515
                        oFlangeBoltHoleDia = 26
                        oFlangeBoltNumber = 16
                    Case "304L", "316L", "ALU"
                        oPipeDia = 406
                        oPipeSch = 3
                        oElbowRadius = 610
                        oElbowLenght = 610
                        oTeeLenght = 610
                        oReducerLenght = 356
                        oCapLenght = 203
                        oCouplingLenght = 888
                        oUnionLenght = 888
                        oFlangeDia = 580
                        oFlangeLenght = 82
                        oFlangeThick = 30
                        oFlangeKDia = 515
                        oFlangeBoltHoleDia = 26
                        oFlangeBoltNumber = 16

                End Select
            Case "DE400"
                oPipeSize = "DE400"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 406.4
                        oFlangeKDia = 525
                        oFlangeBoltHoleDia = 26
                        oPipeSch = 6.3

                    Case "PVC"
                        oPipeDia = 400
                        oPipeSch = 19.1
                        oElbowRadius = 220
                        oElbowLenght = 202
                        oTeeLenght = 972
                        oReducerLenght = 888
                        oCapLenght = 888
                        oCouplingLenght = 420
                        oSockLenght = 206
                        oUnionLenght = 888
                        oFlangeDia = 572
                        oFlangeLenght = 218
                        oFlangeThick = 34
                        oFlangeKDia = 515
                        oFlangeBoltHoleDia = 26
                        oFlangeBoltNumber = 16
                        oFlangeStubThick = 30
                    Case "HDPE", "PP"
                        oPipeDia = 400
                        oPipeSch = 36.4
                        oElbowRadius = 202
                        oElbowLenght = 888
                        oTeeLenght = 900
                        oReducerLenght = 300
                        oCapLenght = 180
                        oCouplingLenght = 888
                        oSockLenght = 302
                        oUnionLenght = 888
                        oFlangeDia = 572
                        oFlangeLenght = 218
                        oFlangeThick = 34
                        oFlangeKDia = 515
                        oFlangeBoltHoleDia = 26
                        oFlangeBoltNumber = 16
                        oFlangeStubThick = 46
                End Select
            Case "DN450"
                oPipeSize = "DN450"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 457
                        oFlangeKDia = 585
                        oFlangeBoltHoleDia = 30
                        oPipeSch = 6.3
                    Case "S235", "GALVA"
                        oPipeDia = 457
                        oPipeSch = 6.3
                        oElbowRadius = 686
                        oElbowLenght = 686
                        oTeeLenght = 686
                        oReducerLenght = 381
                        oCapLenght = 330
                        oCouplingLenght = 888
                        oUnionLenght = 888
                        oFlangeDia = 640
                        oFlangeLenght = 85
                        oFlangeThick = 32
                        oFlangeKDia = 565
                        oFlangeBoltHoleDia = 26
                        oFlangeBoltNumber = 20
                    Case "304L", "316L", "ALU"
                        oPipeDia = 456
                        oPipeSch = 3
                        oElbowRadius = 686
                        oElbowLenght = 686
                        oTeeLenght = 686
                        oReducerLenght = 381
                        oCapLenght = 330
                        oCouplingLenght = 888
                        oUnionLenght = 888
                        oFlangeDia = 640
                        oFlangeLenght = 85
                        oFlangeThick = 32
                        oFlangeKDia = 565
                        oFlangeBoltHoleDia = 26
                        oFlangeBoltNumber = 20

                End Select
            Case "DE450"
                oPipeSize = "DE450"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 457
                        oFlangeKDia = 585
                        oFlangeBoltHoleDia = 30
                        oPipeSch = 6.3

                End Select
            Case "DN500"
                oPipeSize = "DN500"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 508
                        oFlangeKDia = 650
                        oFlangeBoltHoleDia = 30
                        oPipeSch = 6.3
                    Case "S235", "GALVA"
                        oPipeDia = 508
                        oPipeSch = 6.3
                        oElbowRadius = 762
                        oElbowLenght = 762
                        oTeeLenght = 762
                        oReducerLenght = 508
                        oCapLenght = 381
                        oCouplingLenght = 888
                        oUnionLenght = 888
                        oFlangeDia = 715
                        oFlangeLenght = 83
                        oFlangeThick = 34
                        oFlangeKDia = 620
                        oFlangeBoltHoleDia = 26
                        oFlangeBoltNumber = 20
                    Case "304L", "316L", "ALU"
                        oPipeDia = 506
                        oPipeSch = 3
                        oElbowRadius = 762
                        oElbowLenght = 762
                        oTeeLenght = 762
                        oReducerLenght = 508
                        oCapLenght = 381
                        oCouplingLenght = 888
                        oUnionLenght = 888
                        oFlangeDia = 715
                        oFlangeLenght = 83
                        oFlangeThick = 34
                        oFlangeKDia = 620
                        oFlangeBoltHoleDia = 26
                        oFlangeBoltNumber = 20

                End Select
            Case "DE500"
                oPipeSize = "DE500"
                Select Case oMaterial
                    Case "NBR", "EPDM", "Silicone", "PTFE", "8.8", "A2"
                        oPipeDia = 508
                        oFlangeKDia = 650
                        oFlangeBoltHoleDia = 30
                        oPipeSch = 6.3
                End Select
        End Select
    End Sub

    Private Sub Set_BranchLenght()
        Select Case cbxBranchDN.Text
            Case "DN15"
                Select Case cbxDN.Text
                    Case "DN20"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 29
                            Case "PVC"
                                oBranchLenght = 30
                        End Select
                    Case "DN25"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 38
                            Case "PVC"
                                oBranchLenght = 33.5
                        End Select
                    Case "DN32"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 48
                            Case "PVC"
                                oBranchLenght = 38
                        End Select
                    Case "DN40"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 57
                            Case "PVC"
                                oBranchLenght = 43
                        End Select
                End Select
            Case "DN20"
                Select Case cbxDN.Text
                    Case "DN25"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 38
                            Case "PVC"
                                oBranchLenght = 36.5
                        End Select
                    Case "DN32"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 48
                            Case "PVC"
                                oBranchLenght = 41
                        End Select
                    Case "DN40"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 57
                            Case "PVC"
                                oBranchLenght = 41
                        End Select
                    Case "DN50"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 44
                            Case "PVC"
                                oBranchLenght = 46
                        End Select
                End Select
            Case "DN25"
                Select Case cbxDN.Text
                    Case "DN32"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 48
                            Case "PVC"
                                oBranchLenght = 38
                        End Select
                    Case "DN40"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 57
                            Case "PVC"
                                oBranchLenght = 44
                        End Select
                    Case "DN50"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 51
                            Case "PVC"
                                oBranchLenght = 55
                            Case "HDPE"
                                oBranchLenght = 86
                        End Select
                    Case "DN65"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 57
                            Case "PVC"
                                oBranchLenght = 62
                            Case "HDPE"
                                oBranchLenght = 98
                        End Select
                End Select
            Case "DN32"
                Select Case cbxDN.Text
                    Case "DN40"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 57
                            Case "PVC"
                                oBranchLenght = 53
                        End Select
                    Case "DN50"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 57
                            Case "PVC"
                                oBranchLenght = 59.5
                            Case "HDPE"
                                oBranchLenght = 107
                        End Select
                    Case "DN65"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 64
                            Case "PVC"
                                oBranchLenght = 66
                        End Select
                    Case "DN80"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 70
                            Case "PVC"
                                oBranchLenght = 74
                        End Select
                End Select
            Case "DN40"
                Select Case cbxDN.Text
                    Case "DN50"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 60
                            Case "PVC"
                                oBranchLenght = 64.5
                            Case "HDPE"
                                oBranchLenght = 100
                        End Select
                    Case "DN65"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 67
                            Case "PVC"
                                oBranchLenght = 78
                        End Select
                    Case "DN80"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 73
                            Case "PVC"
                                oBranchLenght = 79
                            Case "HDPE"
                                oBranchLenght = 120
                        End Select
                    Case "DN100"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 86
                            Case "PVC"
                                oBranchLenght = 92
                        End Select
                End Select
            Case "DN65"
                Select Case cbxDN.Text
                    Case "DN80"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 83
                            Case "PVC"
                                oBranchLenght = 92
                            Case "HDPE"
                                oBranchLenght = 132
                        End Select
                    Case "DN100"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 95
                            Case "PVC"
                                oBranchLenght = 105
                            Case "HDPE"
                                oBranchLenght = 148
                        End Select
                    Case "DN125"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 108
                        End Select
                    Case "DN150"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 121
                            Case "HDPE"
                                oBranchLenght = 179
                        End Select
                End Select
            Case "DN80"
                Select Case cbxDN.Text
                    Case "DN100"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 98
                            Case "HDPE"
                                oBranchLenght = 164
                        End Select
                    Case "DN125"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 111
                            Case "HDPE"
                                oBranchLenght = 168
                        End Select
                    Case "DN150"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 124
                            Case "HDPE"
                                oBranchLenght = 190
                        End Select
                    Case "DN200"
                        Select Case oMaterial
                            Case "HDPE"
                                oBranchLenght = 228
                        End Select
                End Select
            Case "DN100"
                Select Case cbxDN.Text
                    Case "DN125"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 117
                            Case "HDPE"
                                oBranchLenght = 167
                        End Select
                    Case "DN150"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 130
                            Case "HDPE"
                                oBranchLenght = 200
                        End Select
                    Case "DN200"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 156
                            Case "HDPE"
                                oBranchLenght = 238
                        End Select
                    Case "DN250"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 184
                            Case "HDPE"
                                oBranchLenght = 284
                        End Select
                    Case "DN300"
                        Select Case oMaterial
                            Case "HDPE"
                                oBranchLenght = 282
                        End Select
                End Select
            Case "DN125"
                Select Case cbxDN.Text
                    Case "DN150"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 137
                        End Select
                    Case "DN200"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 162
                            Case "PVC"
                                oBranchLenght = 160
                        End Select
                    Case "DN250"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 191
                        End Select
                End Select
            Case "DN150"
                Select Case cbxDN.Text
                    Case "DN200"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 168
                            Case "HDPE"
                                oBranchLenght = 258
                        End Select
                    Case "DN250"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 194
                        End Select
                    Case "DN300"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 219
                            Case "HDPE"
                                oBranchLenght = 301
                        End Select
                    Case "DN350"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 238
                        End Select
                    Case "DN400"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 264
                        End Select
                End Select
            Case "DN200"
                Select Case cbxDN.Text
                    Case "DN250"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 203
                        End Select
                    Case "DN300"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 229
                            Case "HDPE"
                                oBranchLenght = 335
                        End Select
                    Case "DN350"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 248
                        End Select
                    Case "DN400"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 273
                        End Select
                    Case "DN450"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 298
                        End Select
                End Select
            Case "DN250"
                Select Case cbxDN.Text
                    Case "DN300"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 241
                        End Select
                    Case "DN350"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 257
                        End Select
                    Case "DN400"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 283
                        End Select
                    Case "DN450"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 308
                        End Select
                    Case "DN500"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 333
                        End Select
                End Select
            Case "DN300"
                Select Case cbxDN.Text
                    Case "DN350"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 270
                        End Select
                    Case "DN400"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 295
                        End Select
                    Case "DN450"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 321
                        End Select
                    Case "DN500"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 346
                        End Select
                End Select
            Case "DN350"
                Select Case cbxDN.Text
                    Case "DN400"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 305
                        End Select
                    Case "DN450"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 330
                        End Select
                    Case "DN500"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 346
                        End Select
                End Select
            Case "DN400"
                Select Case cbxDN.Text
                    Case "DN450"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 330
                        End Select
                    Case "DN500"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 356
                        End Select
                End Select
            Case "DN450"
                Select Case cbxDN.Text
                    Case "DN500"
                        Select Case oMaterial
                            Case "S235", "304L", "316L"
                                oBranchLenght = 368
                        End Select
                End Select


            Case "DE20"
                Select Case cbxDN.Text
                    Case "DE25"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 30
                        End Select
                    Case "DE32"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 33.5
                        End Select
                    Case "DE40"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 38
                        End Select
                    Case "DE50"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 43
                        End Select
                End Select
            Case "DE25"
                Select Case cbxDN.Text
                    Case "DE32"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 36.5
                        End Select
                    Case "DE40"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 41
                        End Select
                    Case "DE50"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 41
                        End Select
                    Case "DE63"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 46
                        End Select
                End Select
            Case "DE32"
                Select Case cbxDN.Text
                    Case "DE40"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 38
                        End Select
                    Case "DE50"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 44
                        End Select
                    Case "DE63"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 55
                            Case "HDPE"
                                oBranchLenght = 86
                        End Select
                    Case "DE75"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 62
                            Case "HDPE"
                                oBranchLenght = 98
                        End Select
                End Select
            Case "DE40"
                Select Case cbxDN.Text
                    Case "DE50"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 53
                        End Select
                    Case "DE63"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 59.5
                            Case "HDPE"
                                oBranchLenght = 107
                        End Select
                    Case "DE75"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 66
                        End Select
                    Case "DE90"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 74
                        End Select
                End Select
            Case "DE50"
                Select Case cbxDN.Text
                    Case "DE63"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 64.5
                            Case "HDPE"
                                oBranchLenght = 100
                        End Select
                    Case "DE75"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 78
                            Case "HDPE"
                                oBranchLenght = 111
                        End Select
                    Case "DE90"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 79
                            Case "HDPE"
                                oBranchLenght = 120
                        End Select
                    Case "DE110"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 92
                        End Select
                End Select
            Case "DE63"
                Select Case cbxDN.Text
                    Case "DE75"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 78
                            Case "HDPE"
                                oBranchLenght = 117
                        End Select
                    Case "DE90"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 79
                            Case "HDPE"
                                oBranchLenght = 137
                        End Select
                    Case "DE110"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 92
                            Case "HDPE"
                                oBranchLenght = 156
                        End Select
                End Select
            Case "DE75"
                Select Case cbxDN.Text
                    Case "DE90"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 92
                            Case "HDPE"
                                oBranchLenght = 138
                        End Select
                    Case "DE110"
                        Select Case oMaterial
                            Case "PVC"
                                oBranchLenght = 105
                            Case "HDPE"
                                oBranchLenght = 152
                        End Select
                    Case "DE160"
                        Select Case oMaterial
                            Case "HDPE"
                                oBranchLenght = 179
                        End Select
                End Select
            Case "DE90"
                Select Case cbxDN.Text
                    Case "DE110"
                        Select Case oMaterial
                            Case "HDPE"
                                oBranchLenght = 164
                        End Select
                    Case "DE160"
                        Select Case oMaterial
                            Case "HDPE"
                                oBranchLenght = 177
                        End Select
                    Case "DE225"
                        Select Case oMaterial
                            Case "HDPE"
                                oBranchLenght = 224
                        End Select
                    Case "DE315"
                        Select Case oMaterial
                            Case "HDPE"
                                oBranchLenght = 290
                        End Select
                End Select
            Case "DE110"
                Select Case cbxDN.Text
                    Case "DE160"
                        Select Case oMaterial
                            Case "HDPE"
                                oBranchLenght = 200
                        End Select
                    Case "DE225"
                        Select Case oMaterial
                            Case "HDPE"
                                oBranchLenght = 226
                        End Select
                    Case "DE315"
                        Select Case oMaterial
                            Case "HDPE"
                                oBranchLenght = 290
                        End Select
                End Select

            Case "DE160"
                Select Case cbxDN.Text
                    Case "DE225"
                        Select Case oMaterial
                            Case "HDPE"
                                oBranchLenght = 246
                        End Select

                    Case "DE315"
                        Select Case oMaterial
                            Case "HDPE"
                                oBranchLenght = 310
                        End Select
                End Select
            Case "DE225"
                Select Case cbxDN.Text
                    Case "DE315"
                        Select Case oMaterial
                            Case "HDPE"
                                oBranchLenght = 335
                        End Select

                End Select

        End Select

    End Sub


    '-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    '
    '
    '------------------------------------------------------PLACING PARTS------------------------------------------------------------------------------------------------
    '
    '
    '-------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Private Sub PlaceSteelPipe()
        '------------------------------------------------
        '
        '          PLACING STEEL PIPES
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oCenterPlane As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oCenterPoint As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oWorkAx As Object
        Dim oProfile As Profile
        Dim oExtrDef As ExtrudeDefinition
        Dim oExtrusion As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create Or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:

        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        oCenterPlane = oDef.WorkPlanes.Item(3)
        oSketch01 = oDef.Sketches.Add(oCenterPlane)
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oPipeDia / 10) / 2)
        oCircle2 = oCircles.AddByCenterRadius(oCenterPoint, ((oPipeDia - (oPipeSch * 2)) / 10) / 2)
        oWorkAx = oDef.WorkAxes.Item(1)
        oProfile = oSketch01.Profiles.AddForSolid
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef.SetDistanceExtent(oPipeLenght / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)



        oDef.Parameters.Item(1).Name = "PipeLenght"
        'Get the parameter
        Dim oParam As Parameter
        oParam = oInvDoc.ComponentDefinition.Parameters("PipeLenght")
        'oParam.ExposedAsProperty = True
        oDef.BOMQuantity.SetBaseQuantity(BOMQuantityTypeEnum.kParameterBOMQuantity, oParam)
        oDef.BOMQuantity.BaseUnits = "m"
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits
        Dim oNewPartnumber As String
        oNewPartnumber = oItemName & " " & oPipeDia & "x" & oPipeSch & "mm" & " " & oMaterial

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        propSet1.ItemByPropId(2).Value = "Piping Parts" 'Titel
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Pipe Is generated With the Panta Pipe App. The software is part of the Pantarein Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pantarein Water BVBA"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        propSet3.ItemByPropId(5).Value = oNewPartnumber
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "EN 10220"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"


        '---------Maak een AttributeSet "InsertEdges"----------
        Dim entity As Edge
        Dim attribSets As AttributeSets
        Dim attribSet As AttributeSet
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(4)
        attribSets = entity.AttributeSets
        attribSet = attribSets.Add("PipInsA")
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(3)
        attribSets = entity.AttributeSets
        attribSet = attribSets.Add("PipInsB")

        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'light Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'light Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select
        ' oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '---------Nieuw part saven in juiste DIR-------------------------------------------


        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try
        oInvDoc.Close()
        oInvApp.ScreenUpdating = True


        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document


        Try
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("PipInsA")
            elbowEdge = attrSets.Item(1).Parent.Parent
        Catch ex As Exception
            ' ------------------------to be compatible with the old version------------------------
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdges")
            elbowEdge = attrSets.Item(1).Parent.Parent
        End Try

        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
EndRoutine:
        Me.Show()
    End Sub

    Private Sub PlacePlasticPipe()
        '------------------------------------------------
        '
        '          PLACING Plastic PIPES
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oCenterPlane As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oCenterPoint As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oWorkAx As Object
        Dim oProfile As Profile
        Dim oExtrDef As ExtrudeDefinition
        Dim oExtrusion As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:

        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If

        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1)
        oElbowAngle = (90 * pi / 180)
        oCenterPlane = oDef.WorkPlanes.Item(3)
        oSketch01 = oDef.Sketches.Add(oCenterPlane)
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oPipeDia / 10) / 2)
        oCircle2 = oCircles.AddByCenterRadius(oCenterPoint, ((oPipeDia - (oPipeSch * 2)) / 10) / 2)
        oWorkAx = oDef.WorkAxes.Item(1)
        oProfile = oSketch01.Profiles.AddForSolid
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef.SetDistanceExtent(oPipeLenght / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)
        oDef.Parameters.Item(1).Name = "PipeLenght"

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        Dim attribSets As AttributeSets
        Dim attribSet As AttributeSet
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(4)
        attribSets = entity.AttributeSets
        attribSet = attribSets.Add("PipInsA")
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(3)
        attribSets = entity.AttributeSets
        attribSet = attribSets.Add("PipInsB")


        'Get the parameter
        Dim oParam As Parameter
        oParam = oInvDoc.ComponentDefinition.Parameters("PipeLenght")
        'oParam.ExposedAsProperty = True
        oDef.BOMQuantity.SetBaseQuantity(BOMQuantityTypeEnum.kParameterBOMQuantity, oParam)
        oDef.BOMQuantity.BaseUnits = "m"
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits
        Dim oNewPartnumber As String
        oNewPartnumber = oItemName & " " & oPipeDia & "x" & oPipeSch & "mm" & " " & oMaterial


        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        propSet1.ItemByPropId(2).Value = "Piping Parts" 'Titel
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Pipe Is generated With the Panta Pipe App. The software is part of the Pantarein Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pantarein Water BVBA"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        propSet3.ItemByPropId(5).Value = oNewPartnumber
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        If oMaterial = "PVC" Then
            propSet3.ItemByPropId(29).Value = "DIN 8061"
        End If
        If oMaterial = "HDPE" Then
            propSet3.ItemByPropId(29).Value = "EN 13244"
        End If
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"


        Select Case oMaterial
            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        Try
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("PipInsA")
            elbowEdge = attrSets.Item(1).Parent.Parent
        Catch ex As Exception
            ' ------------------------to be compatible with the old version------------------------
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdges")
            elbowEdge = attrSets.Item(1).Parent.Parent
        End Try

        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
EndRoutine:
        Me.Show()
    End Sub

    Public Sub PlaceSteelElbow()
        '------------------------------------------------
        '
        '          PLACING STEEL ELBOWS 
        '
        '------------------------------------------------

        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oCenterPlane As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oCenterPoint As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oWorkAx As Object
        Dim oProfile As Profile
        Dim oRevFeature As RevolveFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge

        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy


        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:

        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1)
        oElbowAngle = (90 * pi / 180)
        oCenterPlane = oDef.WorkPlanes.Item(3)
        oSketch01 = oDef.Sketches.Add(oCenterPlane)
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, (oElbowRadius / 10)), False)
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oPipeDia / 10) / 2)
        oCircle2 = oCircles.AddByCenterRadius(oCenterPoint, ((oPipeDia - (oPipeSch * 2)) / 10) / 2)
        oWorkAx = oDef.WorkAxes.Item(1)
        oProfile = oSketch01.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile, oWorkAx, oElbowAngle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        Dim oNewPartnumber As String
        oNewPartnumber = oItemName & " " & oPipeDia & "x" & oPipeSch & "mm" & " " & oMaterial



        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        propSet1.ItemByPropId(2).Value = "Piping Parts" 'Titel
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Elbow Is generated With the Panta Pipe App. The software is part of the Pantarein Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pantarein Water BVBA"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        propSet3.ItemByPropId(5).Value = oNewPartnumber
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "EN 10253"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"


        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        Dim attribSets As AttributeSets
        Dim attribSet As AttributeSet
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(3)
        attribSets = entity.AttributeSets
        attribSet = attribSets.Add("ElbwInsA")
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(4)
        attribSets = entity.AttributeSets
        attribSet = attribSets.Add("ElbwInsB")
        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")

                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------


        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try


        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        Try
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("ElbwInsA")
            elbowEdge = attrSets.Item(1).Parent.Parent
        Catch ex As Exception
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdges")
            elbowEdge = attrSets.Item(1).Parent.Parent
        End Try

        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)



        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 

        'Start Angle Constraint aligned ELBOW

        'Define the horizontal and vertical plane of the part


        pi = Math.Acos(-1)

        'Proxyplane maken van het werkvlak paralel met het insertvlak

        Dim oCrossPlane As WorkPlane
        Dim oCrossPlaneProxy As WorkPlaneProxy
        oCrossPlaneProxy = Nothing
        oCrossPlane = elbowDoc.ComponentDefinition.WorkPlanes(2)
        Call elbowOcc.CreateGeometryProxy(oCrossPlane, oCrossPlaneProxy)

        'bepaal de hoek tussen het insertvlak en één der werkvlakken van de assembly in graden

        Dim oOrientXY As Double
        Dim oOrientXZ As Double
        Dim oOrientYZ As Double

        oOrientXY = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(3), oCrossPlaneProxy) / pi * 180)
        oOrientXZ = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(2), oCrossPlaneProxy) / pi * 180)
        oOrientYZ = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(1), oCrossPlaneProxy) / pi * 180)

        'oOrient is public gedeclareerd zie begin

        oOrient = "Not aligned"

        'Check the orientation of the part

        If oOrientXY = 90 Then
            oOrient = "XYaxis"
        End If
        If oOrientXZ = 90 Then
            oOrient = "XZaxis"
        End If
        If oOrientYZ = 90 Then
            oOrient = "YZaxis"
        End If

        'MsgBox(oOrient)


        oElbowInsertAngle = 0

        'Afhangkelijk van welk vlak er haaks tov het insertvlak staat wordt er een constraint gemaakt met middenvlak (werkvlak1) van de elbow

        If oOrient = "XYaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(3), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If

        End If

        If oOrient = "XZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(2), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If

        If oOrient = "YZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(1), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If
        'END TEST ROTATION ELBOW
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 


EndRoutine:
        Me.Show()
    End Sub










    Private Sub PlaceSteel45grElbow()
        '------------------------------------------------
        '
        '          PLACING STEEL 45gr ELBOWS 
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oCenterPlane As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oCenterPoint As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oWorkAx As Object
        Dim oProfile As Profile
        Dim oRevFeature As RevolveFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1)
        oElbowAngle = (45 * pi / 180)
        oCenterPlane = oDef.WorkPlanes.Item(3)
        oSketch01 = oDef.Sketches.Add(oCenterPlane)
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, (oElbowRadius / 10)), False)
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oPipeDia / 10) / 2)
        oCircle2 = oCircles.AddByCenterRadius(oCenterPoint, ((oPipeDia - (oPipeSch * 2)) / 10) / 2)
        oWorkAx = oDef.WorkAxes.Item(1)
        oProfile = oSketch01.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile, oWorkAx, oElbowAngle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        Dim oNewPartnumber As String
        oNewPartnumber = oItemName & " " & oPipeDia & "x" & oPipeSch & "mm" & " " & oMaterial

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        propSet1.ItemByPropId(2).Value = "Piping Parts" 'Titel
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Elbow Is generated With the Panta Pipe App. The software is part of the Pantarein Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pantarein Water BVBA"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        propSet3.ItemByPropId(5).Value = oNewPartnumber
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "EN 10253"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"
        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(1)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdges")
        ' Dim attrib As Attribute

        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")

                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat

                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdges")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)










EndRoutine:
        Me.Show()
    End Sub

    Private Sub PlaceSteelTee()
        '------------------------------------------------
        '
        '          PLACING STEEL TEES
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oCenterPlane1 As WorkPlane
        Dim oBranchePlane1 As WorkPlane
        Dim oCenterPlane2 As WorkPlane
        Dim oBranchePlane2 As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oSketch02 As PlanarSketch
        Dim oSketch03 As PlanarSketch
        Dim oSketch04 As PlanarSketch
        Dim oCenterPoint1 As SketchPoint
        Dim oCenterPoint2 As SketchPoint
        Dim oCenterPoint3 As SketchPoint
        Dim oCenterPoint4 As SketchPoint
        Dim oCircles1 As SketchCircles
        Dim oCircles2 As SketchCircles
        Dim oCircles3 As SketchCircles
        Dim oCircles4 As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oCircle3 As SketchCircle
        Dim oCircle4 As SketchCircle
        Dim oProfile1 As Profile
        Dim oProfile2 As Profile
        Dim oProfile3 As Profile
        Dim oProfile4 As Profile
        Dim oExtrDef1 As ExtrudeDefinition
        Dim oExtrDef2 As ExtrudeDefinition
        Dim oExtrDef3 As ExtrudeDefinition
        Dim oExtrDef4 As ExtrudeDefinition
        Dim oExtrusion1 As ExtrudeFeature
        Dim oExtrusion2 As ExtrudeFeature
        Dim oExtrusion3 As ExtrudeFeature
        Dim oExtrusion4 As ExtrudeFeature
        Dim oConnectionCheck As String
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        ' Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim TeeEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        oCenterPlane1 = oDef.WorkPlanes.Item(3)
        oSketch01 = oDef.Sketches.Add(oCenterPlane1)
        oCenterPoint1 = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles1 = oSketch01.SketchCircles
        oCircle1 = oCircles1.AddByCenterRadius(oCenterPoint1, (oPipeDia / 10) / 2)
        oProfile1 = oSketch01.Profiles.AddForSolid
        oExtrDef1 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile1, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef1.SetDistanceExtent(oTeeLenght / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        oExtrusion1 = oDef.Features.ExtrudeFeatures.Add(oExtrDef1)

        oBranchePlane1 = oDef.WorkPlanes.Item(2)
        oSketch02 = oDef.Sketches.Add(oBranchePlane1)
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles2 = oSketch02.SketchCircles
        oCircle2 = oCircles2.AddByCenterRadius(oCenterPoint2, (oPipeDia / 10) / 2)
        oProfile2 = oSketch02.Profiles.AddForSolid
        oExtrDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef2.SetDistanceExtent(oTeeLenght / 2 / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion2 = oDef.Features.ExtrudeFeatures.Add(oExtrDef2)

        oCenterPlane2 = oDef.WorkPlanes.Item(3)
        oSketch03 = oDef.Sketches.Add(oCenterPlane2)
        oCenterPoint3 = oSketch03.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles3 = oSketch03.SketchCircles
        oCircle3 = oCircles3.AddByCenterRadius(oCenterPoint3, ((oPipeDia - oPipeSch * 2) / 10) / 2)
        oProfile3 = oSketch03.Profiles.AddForSolid
        oExtrDef3 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile3, PartFeatureOperationEnum.kCutOperation)
        Call oExtrDef3.SetDistanceExtent(oTeeLenght / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        oExtrusion3 = oDef.Features.ExtrudeFeatures.Add(oExtrDef3)

        oBranchePlane2 = oDef.WorkPlanes.Item(2)
        oSketch04 = oDef.Sketches.Add(oBranchePlane2)
        oCenterPoint4 = oSketch04.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles4 = oSketch04.SketchCircles
        oCircle4 = oCircles4.AddByCenterRadius(oCenterPoint4, (oPipeDia - oPipeSch * 2) / 10 / 2)
        oProfile4 = oSketch04.Profiles.AddForSolid
        oExtrDef4 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile4, PartFeatureOperationEnum.kCutOperation)
        Call oExtrDef4.SetDistanceExtent(oTeeLenght / 2 / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion4 = oDef.Features.ExtrudeFeatures.Add(oExtrDef4)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits


        Dim oNewPartnumber As String
        oNewPartnumber = oItemName & " " & oPipeDia & "x" & oPipeSch & "mm" & " " & oMaterial



        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        propSet1.ItemByPropId(2).Value = "Piping Parts" 'Titel
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Tee Is generated With the Panta Pipe App. The software is part of the Pantarein Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pantarein Water BVBA"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        propSet3.ItemByPropId(5).Value = oNewPartnumber
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "EN 10253"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"
        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing
        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(4)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")
        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(8)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")

        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oExtrusion1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oExtrusion1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()

        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        TeeEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, TeeEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, TeeEdgeProxy, True, 0)
        oConnectionCheck = "Header"


        If MessageBox.Show(Me, "Would you keep this connection?", "Select connection", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo RotateTee1

        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            TeeEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, TeeEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, TeeEdgeProxy, True, 0)
            oConnectionCheck = "Branch"
        End If
        If MessageBox.Show(Me, "Would you keep this connection?", "Select connection", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo RotateTee2
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If


RotateTee1:

        'MsgBox("start rotate tee 1")

        'Start Angle Constraint aligned TEE
        'Define the horizontal and vertical plane of the part
        pi = Math.Acos(-1)

        'Proxyplane maken van het werkvlak paralel met het insertvlak

        Dim oCrossPlane As WorkPlane
        oCrossPlane = Nothing
        Dim oCrossPlaneProxy As WorkPlaneProxy
        oCrossPlaneProxy = Nothing
        oCrossPlane = elbowDoc.ComponentDefinition.WorkPlanes(2)
        Call elbowOcc.CreateGeometryProxy(oCrossPlane, oCrossPlaneProxy)

        'bepaal de hoek tussen het insertvlak en één der werkvlakken van de assembly in graden

        Dim oOrientXY As Double
        Dim oOrientXZ As Double
        Dim oOrientYZ As Double

        oOrientXY = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(1), oCrossPlaneProxy) / pi * 180)
        oOrientXZ = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(3), oCrossPlaneProxy) / pi * 180)
        oOrientYZ = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(2), oCrossPlaneProxy) / pi * 180)

        'oOrient is public gedeclareerd zie begin

        oOrient = "Not aligned"

        'Check the orientation of the part

        If oOrientXY = 90 Then
            oOrient = "XYaxis"
        End If
        If oOrientXZ = 90 Then
            oOrient = "XZaxis"
        End If
        If oOrientYZ = 90 Then
            oOrient = "YZaxis"
        End If

        'MsgBox(oOrient)


        oElbowInsertAngle = 0

        'Afhangkelijk van welk vlak er haaks tov het insertvlak staat wordt er een constraint gemaakt met middenvlak (werkvlak1) van de elbow

        If oOrient = "XYaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(3), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If

        End If

        If oOrient = "XZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(2), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If

        If oOrient = "YZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(1), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If
        'END  ROTATION TEE1
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 

RotateTee2:

        ' MsgBox("start rotate tee 2")

        'Start Angle Constraint aligned TEE
        'Define the horizontal and vertical plane of the part
        pi = Math.Acos(-1)

        'Proxyplane maken van het werkvlak paralel met het insertvlak

        Dim oCrossPlane2 As WorkPlane
        oCrossPlane2 = Nothing
        Dim oCrossPlaneProxy2 As WorkPlaneProxy
        oCrossPlaneProxy2 = Nothing
        oCrossPlane2 = elbowDoc.ComponentDefinition.WorkPlanes(2)
        Call elbowOcc.CreateGeometryProxy(oCrossPlane2, oCrossPlaneProxy2)

        'bepaal de hoek tussen het insertvlak en één der werkvlakken van de assembly in graden

        Dim oOrientXY2 As Double
        Dim oOrientXZ2 As Double
        Dim oOrientYZ2 As Double

        oOrientXY2 = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(3), oCrossPlaneProxy2) / pi * 180)
        oOrientXZ2 = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(2), oCrossPlaneProxy2) / pi * 180)
        oOrientYZ2 = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(1), oCrossPlaneProxy2) / pi * 180)

        'oOrient is public gedeclareerd zie begin

        oOrient = "Not aligned"

        'Check the orientation of the part

        If oOrientXY2 = 90 Then
            oOrient = "XYaxis"
        End If
        If oOrientXZ2 = 90 Then
            oOrient = "XZaxis"
        End If
        If oOrientYZ2 = 90 Then
            oOrient = "YZaxis"
        End If

        'MsgBox(oOrient)


        oElbowInsertAngle = 0

        'Afhangkelijk van welk vlak er haaks tov het insertvlak staat wordt er een constraint gemaakt met middenvlak (werkvlak1) van de elbow

        If oOrient = "XYaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(3), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If

        End If

        If oOrient = "XZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(2), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If

        If oOrient = "YZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(1), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If
        'END  ROTATION TEE2
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 


EndRoutine:
        Me.Show()
    End Sub

    Private Sub PlacePulledTee()
        '------------------------------------------------
        '
        '          PLACING PULLED TEES
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oCenterPlane1 As WorkPlane
        Dim oBranchePlane1 As WorkPlane
        Dim oCenterPlane2 As WorkPlane
        Dim oBranchePlane2 As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oSketch02 As PlanarSketch
        Dim oSketch03 As PlanarSketch
        Dim oSketch04 As PlanarSketch
        Dim oCenterPoint1 As SketchPoint
        Dim oCenterPoint2 As SketchPoint
        Dim oCenterPoint3 As SketchPoint
        Dim oCenterPoint4 As SketchPoint
        Dim oCircles1 As SketchCircles
        Dim oCircles2 As SketchCircles
        Dim oCircles3 As SketchCircles
        Dim oCircles4 As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oCircle3 As SketchCircle
        Dim oCircle4 As SketchCircle
        Dim oProfile1 As Profile
        Dim oProfile2 As Profile
        Dim oProfile3 As Profile
        Dim oProfile4 As Profile
        Dim oExtrDef1 As ExtrudeDefinition
        Dim oExtrDef2 As ExtrudeDefinition
        Dim oExtrDef3 As ExtrudeDefinition
        Dim oExtrDef4 As ExtrudeDefinition
        Dim oExtrusion1 As ExtrudeFeature
        Dim oExtrusion2 As ExtrudeFeature
        Dim oExtrusion3 As ExtrudeFeature
        Dim oExtrusion4 As ExtrudeFeature
        Dim oConnectionCheck As String
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        'Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim TeeEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        oCenterPlane1 = oDef.WorkPlanes.Item(3)
        oSketch01 = oDef.Sketches.Add(oCenterPlane1)
        oCenterPoint1 = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles1 = oSketch01.SketchCircles
        oCircle1 = oCircles1.AddByCenterRadius(oCenterPoint1, (oPipeDia / 10) / 2)
        oProfile1 = oSketch01.Profiles.AddForSolid
        oExtrDef1 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile1, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef1.SetDistanceExtent(oTeeLenght / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        oExtrusion1 = oDef.Features.ExtrudeFeatures.Add(oExtrDef1)

        oBranchePlane1 = oDef.WorkPlanes.Item(2)
        oSketch02 = oDef.Sketches.Add(oBranchePlane1)
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles2 = oSketch02.SketchCircles
        oCircle2 = oCircles2.AddByCenterRadius(oCenterPoint2, (oPipeDia / 10) / 2)
        oProfile2 = oSketch02.Profiles.AddForSolid
        oExtrDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef2.SetDistanceExtent(oPulledTeeBranchLenght / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion2 = oDef.Features.ExtrudeFeatures.Add(oExtrDef2)

        oCenterPlane2 = oDef.WorkPlanes.Item(3)
        oSketch03 = oDef.Sketches.Add(oCenterPlane2)
        oCenterPoint3 = oSketch03.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles3 = oSketch03.SketchCircles
        oCircle3 = oCircles3.AddByCenterRadius(oCenterPoint3, ((oPipeDia - oPipeSch * 2) / 10) / 2)
        oProfile3 = oSketch03.Profiles.AddForSolid
        oExtrDef3 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile3, PartFeatureOperationEnum.kCutOperation)
        Call oExtrDef3.SetDistanceExtent(oTeeLenght / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        oExtrusion3 = oDef.Features.ExtrudeFeatures.Add(oExtrDef3)

        oBranchePlane2 = oDef.WorkPlanes.Item(2)
        oSketch04 = oDef.Sketches.Add(oBranchePlane2)
        oCenterPoint4 = oSketch04.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles4 = oSketch04.SketchCircles
        oCircle4 = oCircles4.AddByCenterRadius(oCenterPoint4, (oPipeDia - oPipeSch * 2) / 10 / 2)
        oProfile4 = oSketch04.Profiles.AddForSolid
        oExtrDef4 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile4, PartFeatureOperationEnum.kCutOperation)
        Call oExtrDef4.SetDistanceExtent(oPulledTeeBranchLenght / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion4 = oDef.Features.ExtrudeFeatures.Add(oExtrDef4)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits


        Dim oNewPartnumber As String
        oNewPartnumber = oItemName & " " & oPipeDia & "x" & oPipeSch & "mm" & " " & oMaterial



        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        propSet1.ItemByPropId(2).Value = "Piping Parts" 'Titel
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Pulled Tee Is generated With the Panta Pipe App. The software is part of the Pantarein Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pantarein Water BVBA"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        propSet3.ItemByPropId(5).Value = oNewPartnumber
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "EN 10253"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"
        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing
        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(4)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")
        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(8)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")

        Select Case oMaterial

            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()

        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        TeeEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, TeeEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, TeeEdgeProxy, True, 0)
        oConnectionCheck = "Header"


        If MessageBox.Show(Me, "Would you keep this connection?", "Select connection", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo RotateTee1

        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            TeeEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, TeeEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, TeeEdgeProxy, True, 0)
            oConnectionCheck = "Branch"
        End If
        If MessageBox.Show(Me, "Would you keep this connection?", "Select connection", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo RotateTee2
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If




RotateTee1:

        'MsgBox("start rotate tee 1")

        'Start Angle Constraint aligned TEE
        'Define the horizontal and vertical plane of the part
        pi = Math.Acos(-1)

        'Proxyplane maken van het werkvlak paralel met het insertvlak

        Dim oCrossPlane As WorkPlane
        oCrossPlane = Nothing
        Dim oCrossPlaneProxy As WorkPlaneProxy
        oCrossPlaneProxy = Nothing
        oCrossPlane = elbowDoc.ComponentDefinition.WorkPlanes(2)
        Call elbowOcc.CreateGeometryProxy(oCrossPlane, oCrossPlaneProxy)

        'bepaal de hoek tussen het insertvlak en één der werkvlakken van de assembly in graden

        Dim oOrientXY As Double
        Dim oOrientXZ As Double
        Dim oOrientYZ As Double

        oOrientXY = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(1), oCrossPlaneProxy) / pi * 180)
        oOrientXZ = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(3), oCrossPlaneProxy) / pi * 180)
        oOrientYZ = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(2), oCrossPlaneProxy) / pi * 180)

        'oOrient is public gedeclareerd zie begin

        oOrient = "Not aligned"

        'Check the orientation of the part

        If oOrientXY = 90 Then
            oOrient = "XYaxis"
        End If
        If oOrientXZ = 90 Then
            oOrient = "XZaxis"
        End If
        If oOrientYZ = 90 Then
            oOrient = "YZaxis"
        End If

        'MsgBox(oOrient)


        oElbowInsertAngle = 0

        'Afhangkelijk van welk vlak er haaks tov het insertvlak staat wordt er een constraint gemaakt met middenvlak (werkvlak1) van de elbow

        If oOrient = "XYaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(3), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If

        End If

        If oOrient = "XZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(2), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If

        If oOrient = "YZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(1), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If
        'END  ROTATION TEE1
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 

RotateTee2:

        ' MsgBox("start rotate tee 2")

        'Start Angle Constraint aligned TEE
        'Define the horizontal and vertical plane of the part
        pi = Math.Acos(-1)

        'Proxyplane maken van het werkvlak paralel met het insertvlak

        Dim oCrossPlane2 As WorkPlane
        oCrossPlane2 = Nothing
        Dim oCrossPlaneProxy2 As WorkPlaneProxy
        oCrossPlaneProxy2 = Nothing
        oCrossPlane2 = elbowDoc.ComponentDefinition.WorkPlanes(2)
        Call elbowOcc.CreateGeometryProxy(oCrossPlane2, oCrossPlaneProxy2)

        'bepaal de hoek tussen het insertvlak en één der werkvlakken van de assembly in graden

        Dim oOrientXY2 As Double
        Dim oOrientXZ2 As Double
        Dim oOrientYZ2 As Double

        oOrientXY2 = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(3), oCrossPlaneProxy2) / pi * 180)
        oOrientXZ2 = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(2), oCrossPlaneProxy2) / pi * 180)
        oOrientYZ2 = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(1), oCrossPlaneProxy2) / pi * 180)

        'oOrient is public gedeclareerd zie begin

        oOrient = "Not aligned"

        'Check the orientation of the part

        If oOrientXY2 = 90 Then
            oOrient = "XYaxis"
        End If
        If oOrientXZ2 = 90 Then
            oOrient = "XZaxis"
        End If
        If oOrientYZ2 = 90 Then
            oOrient = "YZaxis"
        End If

        'MsgBox(oOrient)


        oElbowInsertAngle = 0

        'Afhangkelijk van welk vlak er haaks tov het insertvlak staat wordt er een constraint gemaakt met middenvlak (werkvlak1) van de elbow

        If oOrient = "XYaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(3), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If

        End If

        If oOrient = "XZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(2), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If

        If oOrient = "YZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(1), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If
        'END  ROTATION TEE2
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 







EndRoutine:
        Me.Show()
    End Sub


    Private Sub PlaceSteelRedTee()
        '------------------------------------------------
        '
        '          PLACING STEEL RED TEES
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oCenterPlane1 As WorkPlane
        Dim oBranchePlane1 As WorkPlane
        Dim oCenterPlane2 As WorkPlane
        Dim oBranchePlane2 As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oSketch02 As PlanarSketch
        Dim oSketch03 As PlanarSketch
        Dim oSketch04 As PlanarSketch
        Dim oCenterPoint1 As SketchPoint
        Dim oCenterPoint2 As SketchPoint
        Dim oCenterPoint3 As SketchPoint
        Dim oCenterPoint4 As SketchPoint
        Dim oCircles1 As SketchCircles
        Dim oCircles2 As SketchCircles
        Dim oCircles3 As SketchCircles
        Dim oCircles4 As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oCircle3 As SketchCircle
        Dim oCircle4 As SketchCircle
        Dim oProfile1 As Profile
        Dim oProfile2 As Profile
        Dim oProfile3 As Profile
        Dim oProfile4 As Profile
        Dim oExtrDef1 As ExtrudeDefinition
        Dim oExtrDef2 As ExtrudeDefinition
        Dim oExtrDef3 As ExtrudeDefinition
        Dim oExtrDef4 As ExtrudeDefinition
        Dim oExtrusion1 As ExtrudeFeature
        Dim oExtrusion2 As ExtrudeFeature
        Dim oExtrusion3 As ExtrudeFeature
        Dim oExtrusion4 As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        'Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim TeeEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        oCenterPlane1 = oDef.WorkPlanes.Item(3) 'Kies Plane XY (3)om op te tekenen
        oSketch01 = oDef.Sketches.Add(oCenterPlane1) 'Maakt de schets aan
        oCenterPoint1 = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circle
        oCircles1 = oSketch01.SketchCircles
        oCircle1 = oCircles1.AddByCenterRadius(oCenterPoint1, (oPipeDia / 10) / 2) 'Teken circel 1
        oProfile1 = oSketch01.Profiles.AddForSolid 'Maakt het profiel om te revolven
        oExtrDef1 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile1, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef1.SetDistanceExtent(oTeeLenght / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        oExtrusion1 = oDef.Features.ExtrudeFeatures.Add(oExtrDef1)
        oBranchePlane1 = oDef.WorkPlanes.Item(2) 'Kies Plane XY (3)om op te tekenen
        oSketch02 = oDef.Sketches.Add(oBranchePlane1) 'Maakt de schets aan
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles2 = oSketch02.SketchCircles
        oCircle2 = oCircles2.AddByCenterRadius(oCenterPoint2, (oBranchDia / 10) / 2) 'Teken circel 1
        oProfile2 = oSketch02.Profiles.AddForSolid
        oExtrDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef2.SetDistanceExtent(oBranchLenght / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion2 = oDef.Features.ExtrudeFeatures.Add(oExtrDef2)
        oCenterPlane2 = oDef.WorkPlanes.Item(3) 'Kies Plane XY (3)om op te tekenen
        oSketch03 = oDef.Sketches.Add(oCenterPlane2) 'Maakt de schets aan
        oCenterPoint3 = oSketch03.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circle
        oCircles3 = oSketch03.SketchCircles
        oCircle3 = oCircles3.AddByCenterRadius(oCenterPoint3, ((oPipeDia - oPipeSch * 2) / 10) / 2) 'Teken circel 1
        oProfile3 = oSketch03.Profiles.AddForSolid 'Maakt het profiel om te revolven
        oExtrDef3 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile3, PartFeatureOperationEnum.kCutOperation)
        Call oExtrDef3.SetDistanceExtent(oTeeLenght / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        oExtrusion3 = oDef.Features.ExtrudeFeatures.Add(oExtrDef3)
        oBranchePlane2 = oDef.WorkPlanes.Item(2) 'Kies Plane XY (3)om op te tekenen
        oSketch04 = oDef.Sketches.Add(oBranchePlane2) 'Maakt de schets aan
        oCenterPoint4 = oSketch04.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles4 = oSketch04.SketchCircles
        oCircle4 = oCircles4.AddByCenterRadius(oCenterPoint4, (oBranchDia - oPipeSch * 2) / 10 / 2) 'Teken circel 1
        oProfile4 = oSketch04.Profiles.AddForSolid
        oExtrDef4 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile4, PartFeatureOperationEnum.kCutOperation)
        Call oExtrDef4.SetDistanceExtent(oBranchLenght / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion4 = oDef.Features.ExtrudeFeatures.Add(oExtrDef4)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        Dim oNewPartnumber As String
        oNewPartnumber = oItemName & " " & oPipeDia & "x" & oPipeSch & "-" & oBranchDia & "mm" & " " & oMaterial

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        propSet1.ItemByPropId(2).Value = "Piping Parts" 'Titel
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Red Tee Is generated With the Panta Pipe App. The software is part of the Pantarein Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pantarein Water BVBA"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = oNewPartnumber
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "EN 10253"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(4)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")

        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(2)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")
        'Dim attrib As Attribute
        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oExtrusion1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)



            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oExtrusion1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If


FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        TeeEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, TeeEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, TeeEdgeProxy, True, 0)



        If MessageBox.Show(Me, "Would you keep this connection?", "Select connection", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo RotateTee1

        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            TeeEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, TeeEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, TeeEdgeProxy, True, 0)
        End If
        If MessageBox.Show(Me, "Would you keep this connection?", "Select connection", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo RotateTee2
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If





RotateTee1:

        'MsgBox("start rotate tee 1")

        'Start Angle Constraint aligned TEE
        'Define the horizontal and vertical plane of the part
        pi = Math.Acos(-1)

        'Proxyplane maken van het werkvlak paralel met het insertvlak

        Dim oCrossPlane As WorkPlane
        oCrossPlane = Nothing
        Dim oCrossPlaneProxy As WorkPlaneProxy
        oCrossPlaneProxy = Nothing
        oCrossPlane = elbowDoc.ComponentDefinition.WorkPlanes(2)
        Call elbowOcc.CreateGeometryProxy(oCrossPlane, oCrossPlaneProxy)

        'bepaal de hoek tussen het insertvlak en één der werkvlakken van de assembly in graden

        Dim oOrientXY As Double
        Dim oOrientXZ As Double
        Dim oOrientYZ As Double

        oOrientXY = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(1), oCrossPlaneProxy) / pi * 180)
        oOrientXZ = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(3), oCrossPlaneProxy) / pi * 180)
        oOrientYZ = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(2), oCrossPlaneProxy) / pi * 180)

        'oOrient is public gedeclareerd zie begin

        oOrient = "Not aligned"

        'Check the orientation of the part

        If oOrientXY = 90 Then
            oOrient = "XYaxis"
        End If
        If oOrientXZ = 90 Then
            oOrient = "XZaxis"
        End If
        If oOrientYZ = 90 Then
            oOrient = "YZaxis"
        End If

        'MsgBox(oOrient)


        oElbowInsertAngle = 0

        'Afhangkelijk van welk vlak er haaks tov het insertvlak staat wordt er een constraint gemaakt met middenvlak (werkvlak1) van de elbow

        If oOrient = "XYaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(3), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If

        End If

        If oOrient = "XZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(2), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If

        If oOrient = "YZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(1), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If
        'END  ROTATION TEE1
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 

RotateTee2:

        ' MsgBox("start rotate tee 2")

        'Start Angle Constraint aligned TEE
        'Define the horizontal and vertical plane of the part
        pi = Math.Acos(-1)

        'Proxyplane maken van het werkvlak paralel met het insertvlak

        Dim oCrossPlane2 As WorkPlane
        oCrossPlane2 = Nothing
        Dim oCrossPlaneProxy2 As WorkPlaneProxy
        oCrossPlaneProxy2 = Nothing
        oCrossPlane2 = elbowDoc.ComponentDefinition.WorkPlanes(2)
        Call elbowOcc.CreateGeometryProxy(oCrossPlane2, oCrossPlaneProxy2)

        'bepaal de hoek tussen het insertvlak en één der werkvlakken van de assembly in graden

        Dim oOrientXY2 As Double
        Dim oOrientXZ2 As Double
        Dim oOrientYZ2 As Double

        oOrientXY2 = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(3), oCrossPlaneProxy2) / pi * 180)
        oOrientXZ2 = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(2), oCrossPlaneProxy2) / pi * 180)
        oOrientYZ2 = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(1), oCrossPlaneProxy2) / pi * 180)

        'oOrient is public gedeclareerd zie begin

        oOrient = "Not aligned"

        'Check the orientation of the part

        If oOrientXY2 = 90 Then
            oOrient = "XYaxis"
        End If
        If oOrientXZ2 = 90 Then
            oOrient = "XZaxis"
        End If
        If oOrientYZ2 = 90 Then
            oOrient = "YZaxis"
        End If

        'MsgBox(oOrient)


        oElbowInsertAngle = 0

        'Afhangkelijk van welk vlak er haaks tov het insertvlak staat wordt er een constraint gemaakt met middenvlak (werkvlak1) van de elbow

        If oOrient = "XYaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(3), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If

        End If

        If oOrient = "XZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(2), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If

        If oOrient = "YZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(1), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If
        'END  ROTATION TEE2
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 






EndRoutine:
        Me.Show()
    End Sub



    Private Sub PlaceSteelReducer()
        '------------------------------------------------
        '
        '          PLACING STEEL REDUCER 
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry

        'NEW------------------------------------------------------------------

        'Create  sketch1 on the X-Y work plane (X-Y is 3)
        Dim oSketch1 As PlanarSketch
        oSketch1 = oDef.Sketches.Add(oDef.WorkPlanes(3))

        ' Draw 2 concentric circles.
        Dim pCircle1 As SketchCircle
        pCircle1 = oSketch1.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), (oPipeDia / 10 / 2))
        Dim pCircle2 As SketchCircle
        pCircle2 = oSketch1.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), (oPipeDia / 10 - oPipeSch / 10 * 2) / 2)

        ' Create a profile based on the circles
        Dim pProfile1 As Profile
        pProfile1 = oSketch1.Profiles.AddForSolid

        ' Create a base extrusion.
        Dim oExtrudeDef1 As ExtrudeDefinition
        oExtrudeDef1 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(pProfile1, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrudeDef1.SetDistanceExtent(oReducerLenght / 10 / 5, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        Dim oExtrude1 As ExtrudeFeature
        oExtrude1 = oDef.Features.ExtrudeFeatures.Add(oExtrudeDef1)

        'Create  WorkPlane2
        Dim oPlane2 As WorkPlane
        oPlane2 = oDef.WorkPlanes.AddByPlaneAndOffset(oSketch1, oReducerLenght / 10 / 5 * 3)

        'Create  sketch2 on WorkPlane2
        Dim oSketch2 As Sketch
        oSketch2 = oDef.Sketches.Add(oDef.WorkPlanes(4))

        ' Draw 2 concentric circles.
        Dim pCircle3 As SketchCircle
        pCircle3 = oSketch2.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), (oBranchDia / 10 / 2))
        Dim pCircle4 As SketchCircle
        pCircle4 = oSketch2.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), (oBranchDia / 10 - oPipeSch / 10 * 2) / 2)

        ' Create a profile based on the circles
        Dim pProfile2 As Profile
        pProfile2 = oSketch2.Profiles.AddForSolid

        ' Create a base extrusion.
        Dim oExtrudeDef2 As ExtrudeDefinition
        oExtrudeDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(pProfile2, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrudeDef2.SetDistanceExtent(oReducerLenght / 10 / 5, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        Dim oExtrude2 As ExtrudeFeature
        oExtrude2 = oDef.Features.ExtrudeFeatures.Add(oExtrudeDef2)

        '---------------------LOFT1
        'Create  sketch3 on the X-Y work plane (X-Y is 3)
        Dim oSketch3 As PlanarSketch
        oSketch3 = oDef.Sketches.Add(oDef.WorkPlanes(3))

        ' Draw a circle.
        Dim pCircle5 As SketchCircle
        pCircle5 = oSketch3.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), (oPipeDia / 10 / 2))

        ' Create a profile based this circle
        Dim pProfile3 As Profile
        pProfile3 = oSketch3.Profiles.AddForSolid

        'Create  sketch4 on WorkPlane2
        Dim oSketch4 As Sketch
        oSketch4 = oDef.Sketches.Add(oDef.WorkPlanes(4))

        ' Draw a circle.
        Dim pCircle6 As SketchCircle
        pCircle6 = oSketch4.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), (oBranchDia / 10 / 2))

        ' Create a profile based this circle
        Dim pProfile4 As Profile
        pProfile4 = oSketch4.Profiles.AddForSolid

        ' Create an object collection for the sections.
        Dim oSections As ObjectCollection
        oSections = oInvApp.TransientObjects.CreateObjectCollection
        Call oSections.Add(pProfile3)
        Call oSections.Add(pProfile4)


        ' Create the loft definition. Because one of the ends isn't planar,
        ' a surface must be created instead of a solid.
        Dim oLoftDefinition As LoftDefinition
        oLoftDefinition = oDef.Features.LoftFeatures.CreateLoftDefinition(oSections, PartFeatureOperationEnum.kJoinOperation)

        ' Create the loft feature.
        Call oDef.Features.LoftFeatures.Add(oLoftDefinition)

        '---------------------LOFT2

        'Create  sketch5 on the X-Y work plane (X-Y is 3)
        Dim oSketch5 As PlanarSketch
        oSketch5 = oDef.Sketches.Add(oDef.WorkPlanes(3))

        ' Draw a circle.
        Dim pCircle7 As SketchCircle
        pCircle7 = oSketch5.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), ((oPipeDia / 10 - oPipeSch / 10 * 2) / 2))

        ' Create a profile based this circle
        Dim pProfile5 As Profile
        pProfile5 = oSketch5.Profiles.AddForSolid

        'Create  sketch6 on WorkPlane2
        Dim oSketch6 As Sketch
        oSketch6 = oDef.Sketches.Add(oDef.WorkPlanes(4))

        ' Draw a circle.
        Dim pCircle8 As SketchCircle
        pCircle8 = oSketch6.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), ((oBranchDia / 10 - oPipeSch / 10 * 2) / 2))

        ' Create a profile based this circle
        Dim pProfile6 As Profile
        pProfile6 = oSketch6.Profiles.AddForSolid

        ' Create an object collection for the sections.
        Dim oSections2 As ObjectCollection
        oSections2 = oInvApp.TransientObjects.CreateObjectCollection
        Call oSections2.Add(pProfile5)
        Call oSections2.Add(pProfile6)
        ' Create the loft definition. Because one of the ends isn't planar,
        ' a surface must be created instead of a solid.
        Dim oLoftDefinition2 As LoftDefinition
        oLoftDefinition2 = oDef.Features.LoftFeatures.CreateLoftDefinition(oSections2, PartFeatureOperationEnum.kCutOperation)

        ' Create the loft feature.
        Call oDef.Features.LoftFeatures.Add(oLoftDefinition2)
        oPlane2.Visible = False
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        Dim oNewPartnumber As String
        oNewPartnumber = oItemName & " " & oPipeDia & "x" & oPipeSch & "-" & oBranchDia & "mm" & " " & oMaterial


        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        propSet1.ItemByPropId(2).Value = "Piping Parts" 'Titel
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Reducer Is generated With the Panta Pipe App. The software is part of the Pantarein Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pantarein Water BVBA"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = oNewPartnumber
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "EN 10253"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing


        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(7)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")
        'Dim attrib As Attribute

        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(6)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")



        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oExtrude1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrude2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(3).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(4).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")

                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrude1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrude2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(3).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(4).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")

                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat

                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrude1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrude2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(3).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(4).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oExtrude1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrude2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(3).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(4).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True
        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)


        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
        End If
        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If
EndRoutine:
        Me.Show()
    End Sub




    Private Sub PlaceSteelEccReducer()
        '------------------------------------------------
        '
        '          PLACING STEEL ECCENTRIC REDUCER 
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry

        'NEW------------------------------------------------------------------

        'Create  sketch1 on the X-Y work plane (X-Y is 3)
        Dim oSketch1 As PlanarSketch
        oSketch1 = oDef.Sketches.Add(oDef.WorkPlanes(3))

        ' Draw 2 concentric circles.
        Dim pCircle1 As SketchCircle
        pCircle1 = oSketch1.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), (oPipeDia / 10 / 2))
        Dim pCircle2 As SketchCircle
        pCircle2 = oSketch1.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), (oPipeDia / 10 - oPipeSch / 10 * 2) / 2)

        ' Create a profile based on the circles
        Dim pProfile1 As Profile
        pProfile1 = oSketch1.Profiles.AddForSolid

        ' Create a base extrusion.
        Dim oExtrudeDef1 As ExtrudeDefinition
        oExtrudeDef1 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(pProfile1, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrudeDef1.SetDistanceExtent(oReducerLenght / 10 / 5, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        Dim oExtrude1 As ExtrudeFeature
        oExtrude1 = oDef.Features.ExtrudeFeatures.Add(oExtrudeDef1)

        'Create  WorkPlane2
        Dim oPlane2 As WorkPlane
        oPlane2 = oDef.WorkPlanes.AddByPlaneAndOffset(oSketch1, oReducerLenght / 10 / 5 * 3)

        'Create  sketch2 on WorkPlane2
        Dim oSketch2 As Sketch
        oSketch2 = oDef.Sketches.Add(oDef.WorkPlanes(4))

        ' Draw 2 concentric circles.
        Dim pCircle3 As SketchCircle
        pCircle3 = oSketch2.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, -(oPipeDia / 2 / 10) + (oBranchDia / 2 / 10)), (oBranchDia / 10 / 2))
        Dim pCircle4 As SketchCircle
        pCircle4 = oSketch2.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, -(oPipeDia / 2 / 10) + (oBranchDia / 2 / 10)), (oBranchDia / 10 - oPipeSch / 10 * 2) / 2)

        ' Create a profile based on the circles
        Dim pProfile2 As Profile
        pProfile2 = oSketch2.Profiles.AddForSolid

        ' Create a base extrusion.
        Dim oExtrudeDef2 As ExtrudeDefinition
        oExtrudeDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(pProfile2, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrudeDef2.SetDistanceExtent(oReducerLenght / 10 / 5, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        Dim oExtrude2 As ExtrudeFeature
        oExtrude2 = oDef.Features.ExtrudeFeatures.Add(oExtrudeDef2)

        '---------------------LOFT1
        'Create  sketch3 on the X-Y work plane (X-Y is 3)
        Dim oSketch3 As PlanarSketch
        oSketch3 = oDef.Sketches.Add(oDef.WorkPlanes(3))

        ' Draw a circle.
        Dim pCircle5 As SketchCircle
        pCircle5 = oSketch3.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), (oPipeDia / 10 / 2))

        ' Create a profile based this circle
        Dim pProfile3 As Profile
        pProfile3 = oSketch3.Profiles.AddForSolid

        'Create  sketch4 on WorkPlane2
        Dim oSketch4 As Sketch
        oSketch4 = oDef.Sketches.Add(oDef.WorkPlanes(4))

        ' Draw a circle.
        Dim pCircle6 As SketchCircle
        pCircle6 = oSketch4.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, -(oPipeDia / 2 / 10) + (oBranchDia / 2 / 10)), (oBranchDia / 10 / 2))

        ' Create a profile based this circle
        Dim pProfile4 As Profile
        pProfile4 = oSketch4.Profiles.AddForSolid

        ' Create an object collection for the sections.
        Dim oSections As ObjectCollection
        oSections = oInvApp.TransientObjects.CreateObjectCollection
        Call oSections.Add(pProfile3)
        Call oSections.Add(pProfile4)


        ' Create the loft definition. Because one of the ends isn't planar,
        ' a surface must be created instead of a solid.
        Dim oLoftDefinition As LoftDefinition
        oLoftDefinition = oDef.Features.LoftFeatures.CreateLoftDefinition(oSections, PartFeatureOperationEnum.kJoinOperation)

        ' Create the loft feature.
        Call oDef.Features.LoftFeatures.Add(oLoftDefinition)

        '---------------------LOFT2

        'Create  sketch5 on the X-Y work plane (X-Y is 3)
        Dim oSketch5 As PlanarSketch
        oSketch5 = oDef.Sketches.Add(oDef.WorkPlanes(3))

        ' Draw a circle.
        Dim pCircle7 As SketchCircle
        pCircle7 = oSketch5.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), ((oPipeDia / 10 - oPipeSch / 10 * 2) / 2))

        ' Create a profile based this circle
        Dim pProfile5 As Profile
        pProfile5 = oSketch5.Profiles.AddForSolid

        'Create  sketch6 on WorkPlane2
        Dim oSketch6 As Sketch
        oSketch6 = oDef.Sketches.Add(oDef.WorkPlanes(4))

        ' Draw a circle.
        Dim pCircle8 As SketchCircle
        pCircle8 = oSketch6.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, -(oPipeDia / 2 / 10) + (oBranchDia / 2 / 10)), ((oBranchDia / 10 - oPipeSch / 10 * 2) / 2))

        ' Create a profile based this circle
        Dim pProfile6 As Profile
        pProfile6 = oSketch6.Profiles.AddForSolid

        ' Create an object collection for the sections.
        Dim oSections2 As ObjectCollection
        oSections2 = oInvApp.TransientObjects.CreateObjectCollection
        Call oSections2.Add(pProfile5)
        Call oSections2.Add(pProfile6)
        ' Create the loft definition. Because one of the ends isn't planar,
        ' a surface must be created instead of a solid.
        Dim oLoftDefinition2 As LoftDefinition
        oLoftDefinition2 = oDef.Features.LoftFeatures.CreateLoftDefinition(oSections2, PartFeatureOperationEnum.kCutOperation)

        ' Create the loft feature.
        Call oDef.Features.LoftFeatures.Add(oLoftDefinition2)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits
        oPlane2.Visible = False


        Dim oNewPartnumber As String
        oNewPartnumber = oItemName & " " & oPipeDia & "x" & oPipeSch & "-" & oBranchDia & "mm" & " " & oMaterial

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = oNewPartnumber
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "EN 10253"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing


        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(7)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")
        'Dim attrib As Attribute

        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(6)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")


        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oExtrude1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrude2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(3).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(4).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")

                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrude1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrude2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(3).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(4).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")

                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat

                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrude1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrude2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(3).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(4).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oExtrude1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrude2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(3).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(4).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If







FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)


        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
        End If
        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If
EndRoutine:
        Me.Show()
    End Sub



    Private Sub frmPiping_Activated(sender As Object, e As EventArgs) Handles Me.Activated
        Me.TopMost = True
    End Sub

    Private Sub PlaceSteelCoupling()
        '------------------------------------------------
        '
        '          PLACING Steel Couplings
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oCenterPlane As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oCenterPoint As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oWorkAx As Object
        Dim oProfile As Profile
        Dim oExtrDef As ExtrudeDefinition
        Dim oExtrusion As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If



BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        oCenterPlane = oDef.WorkPlanes.Item(3) 'Kies Plane XY (3)om op te tekenen
        oSketch01 = oDef.Sketches.Add(oCenterPlane) 'Maakt de schets aan
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oPipeDia / 10) / 2) 'Teken circel 1
        oCircle2 = oCircles.AddByCenterRadius(oCenterPoint, ((oPipeDia + (oPipeSch * 4)) / 10) / 2) 'Teken circel 2
        oWorkAx = oDef.WorkAxes.Item(1)
        oProfile = oSketch01.Profiles.AddForSolid 'Maakt het profiel om te revolven
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef.SetDistanceExtent(oCouplingLenght / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "EN-10241"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(1)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdges")
        'Dim attrib As Attribute

        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(150, 150, 150)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If
        Me.Hide()

        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdges")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, -1)

EndRoutine:
        Me.Show()
    End Sub




    Private Sub PlaceSteelCaps()
        '------------------------------------------------
        '
        '          PLACING STEEL CAPS
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oProfile As Profile
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy
        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If
BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        Dim oWPlane As WorkPlane
        Dim oSketch As PlanarSketch
        Dim oWorkAxis As Object
        Dim Angle As Double
        Dim oRevFeature As RevolveFeature
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim arc1 As SketchArc
        Dim arc2 As SketchArc
        Dim arc3 As SketchArc
        Dim arc4 As SketchArc
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim pnt7 As Point2d
        Dim pnt8 As Point2d
        Dim pnt9 As Point2d
        Dim pnt10 As Point2d
        Dim pnt11 As Point2d
        Dim pnt12 As Point2d
        oWPlane = oDef.WorkPlanes.Item(3)
        oSketch = oDef.Sketches.Add(oWPlane)
        pnt1 = oTG.CreatePoint2d(0, 0) ' point 1
        pnt2 = oTG.CreatePoint2d(oPipeDia / 10 * 0.020913, oPipeDia / 10 * 0.19101) ' point 2
        pnt3 = oTG.CreatePoint2d(oPipeDia / 10 * 0.072975, oPipeDia / 10 * 0.375) ' point 3
        pnt4 = oTG.CreatePoint2d(oPipeDia / 10 * 0.145577, oPipeDia / 10 * 0.46583) ' point 4
        pnt5 = oTG.CreatePoint2d(oPipeDia / 10 * 0.25838, oPipeDia / 10 * 0.5) ' point 5
        pnt6 = oTG.CreatePoint2d(oCapLenght / 10, oPipeDia / 10 * 0.5) ' point 6
        pnt7 = oTG.CreatePoint2d(oPipeSch / 10, 0) ' point 7
        pnt8 = oTG.CreatePoint2d(oPipeDia / 10 * 0.020913 + (oPipeSch / 10 * 0.98156), oPipeDia / 10 * 0.19101 - (oPipeSch / 10 * 0.192)) ' point 8
        pnt9 = oTG.CreatePoint2d((oPipeDia / 10 * 0.072975) + (oPipeSch / 10 * 0.92702), (oPipeDia / 10 * 0.375) - (oPipeSch / 10 * 0.375)) ' point 9
        pnt10 = oTG.CreatePoint2d((oPipeDia / 10 * 0.145577) + (oPipeSch / 10 * 0.55902), (oPipeDia / 10 * 0.46583) - (oPipeSch / 10 * 0.82916)) ' point 10
        pnt11 = oTG.CreatePoint2d(oPipeDia / 10 * 0.25838, (oPipeDia / 10 * 0.5) - (oPipeSch / 10)) ' point 11
        pnt12 = oTG.CreatePoint2d(oCapLenght / 10, (oPipeDia / 10 * 0.5) - (oPipeSch / 10)) ' point 12
        ln1 = oSketch.SketchLines.AddByTwoPoints(pnt7, pnt1)
        ln2 = oSketch.SketchLines.AddByTwoPoints(pnt5, pnt6)
        ln3 = oSketch.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt12)
        ln4 = oSketch.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt11)
        arc1 = oSketch.SketchArcs.AddByThreePoints(ln1.EndSketchPoint, pnt2, pnt3)
        arc2 = oSketch.SketchArcs.AddByThreePoints(arc1.StartSketchPoint, pnt4, ln2.StartSketchPoint)
        arc3 = oSketch.SketchArcs.AddByThreePoints(ln1.StartSketchPoint, pnt8, pnt9)
        arc4 = oSketch.SketchArcs.AddByThreePoints(arc3.StartSketchPoint, pnt10, ln4.EndSketchPoint)
        oWorkAxis = oDef.WorkAxes.Item(1)
        Angle = pi * 2
        oProfile = oSketch.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile, oWorkAxis, Angle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        Dim oNewPartnumber As String
        oNewPartnumber = oItemName & " " & oPipeDia & "x" & oPipeSch & "mm" & " " & oMaterial

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = oNewPartnumber
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        Select Case oMaterial
            Case "S235", "304L", "316L"
                propSet3.ItemByPropId(29).Value = "EN 10253"
            Case "HDPE"
                propSet3.ItemByPropId(29).Value = "DIN 8076"
        End Select
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"
        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing
        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(4)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdges")
        'Dim attrib As Attribute

        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdges")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
EndRoutine:
        Me.Show()
    End Sub






    Private Sub PlaceSteelFlangeSO()
        '------------------------------------------------
        '
        '          PLACING STEEL FLANGES SO
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oFrontPlane As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oSketch02 As PlanarSketch
        Dim oCenterPoint As SketchPoint
        Dim oCenterPoint2 As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircles2 As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oCircle3 As SketchCircle
        Dim oWorkAx1 As Object
        Dim oProfile As Profile
        Dim oProfile2 As Profile
        Dim oExtrDef As ExtrudeDefinition
        Dim oExtrDef2 As ExtrudeDefinition
        Dim oExtrusion As ExtrudeFeature
        Dim oExtrusion2 As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If



BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        oElbowAngle = (90 * pi / 180)
        oFrontPlane = oDef.WorkPlanes.Item(1) 'Kies Plane XY (3)om op te tekenen
        oSketch01 = oDef.Sketches.Add(oFrontPlane) 'Maakt de schets aan
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oFlangeDia / 10) / 2) 'Teken circel 1
        oCircle2 = oCircles.AddByCenterRadius(oCenterPoint, (oPipeDia / 10) / 2) 'Teken circel 2
        oProfile = oSketch01.Profiles.AddForSolid 'Maakt het profiel om te extruden
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef.SetDistanceExtent(oFlangeThick / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)



        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(1)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")
        ' Dim attrib As Attribute

        Dim entity3 As Face
        entity3 = oDef.SurfaceBodies.Item(1).Faces.Item(4)
        attribSets = entity3.AttributeSets
        attribSet = attribSets.Add("BoltFace")


        oSketch02 = oDef.Sketches.Add(oFrontPlane) 'Maakt de schets aan
        oCircles2 = oSketch02.SketchCircles
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(Math.Sin(360 * pi / 180 / oFlangeBoltNumber / 2) * oFlangeKDia / 2 / 10, Math.Cos(360 * pi / 180 / oFlangeBoltNumber / 2) * oFlangeKDia / 2 / 10), False)
        oCircle3 = oCircles2.AddByCenterRadius(oCenterPoint2, oFlangeBoltHoleDia / 10 / 2) 'Teken circel 1
        oProfile2 = oSketch02.Profiles.AddForSolid 'Maakt het profiel van het eerste gat
        oExtrDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kCutOperation)
        Call oExtrDef2.SetDistanceExtent(oFlangeThick / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion2 = oDef.Features.ExtrudeFeatures.Add(oExtrDef2)
        oWorkAx1 = oDef.WorkAxes.Item(1)
        Dim bltpattrn As ObjectCollection
        bltpattrn = oInvApp.TransientObjects.CreateObjectCollection
        Call bltpattrn.Add(oDef.Features("Extrusion2"))
        Dim oDeg As Double
        oDeg = 10 * 0.0174532925
        Call oDef.Features.CircularPatternFeatures.Add(bltpattrn, oWorkAx1, True, oFlangeBoltNumber, 360 / oFlangeBoltNumber * pi / 180, False, PatternComputeTypeEnum.kIdenticalCompute)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "EN 1092 Type 01"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If


FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, False, 0.5)


        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
        End If
        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If
EndRoutine:
        Me.Show()
    End Sub




    Private Sub PlaceSteelFlangeLJ()
        '------------------------------------------------
        '
        '          PLACING STEEL FLANGES LAP JOINT
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oFrontPlane As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oSketch02 As PlanarSketch
        Dim oCenterPoint As SketchPoint
        Dim oCenterPoint2 As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircles2 As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oCircle3 As SketchCircle
        Dim oWorkAx1 As Object
        Dim oProfile As Profile
        Dim oProfile2 As Profile
        Dim oExtrDef As ExtrudeDefinition
        Dim oExtrDef2 As ExtrudeDefinition
        Dim oExtrusion As ExtrudeFeature
        Dim oExtrusion2 As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If



BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        oElbowAngle = (90 * pi / 180)
        oFrontPlane = oDef.WorkPlanes.Item(1) 'Kies Plane XY (3)om op te tekenen
        oSketch01 = oDef.Sketches.Add(oFrontPlane) 'Maakt de schets aan
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oFlangeDia / 10) / 2) 'Teken circel 1
        oCircle2 = oCircles.AddByCenterRadius(oCenterPoint, ((oPipeDia + 10) / 10) / 2) 'Teken circel 2
        oProfile = oSketch01.Profiles.AddForSolid 'Maakt het profiel om te extruden
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef.SetDistanceExtent(oFlangeThick / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)


        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(1)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")


        Dim entity3 As Face
        entity3 = oDef.SurfaceBodies.Item(1).Faces.Item(4)
        attribSets = entity3.AttributeSets
        attribSet = attribSets.Add("BoltFace")


        oSketch02 = oDef.Sketches.Add(oFrontPlane) 'Maakt de schets aan
        oCircles2 = oSketch02.SketchCircles
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(Math.Sin(360 * pi / 180 / oFlangeBoltNumber / 2) * oFlangeKDia / 2 / 10, Math.Cos(360 * pi / 180 / oFlangeBoltNumber / 2) * oFlangeKDia / 2 / 10), False)
        oCircle3 = oCircles2.AddByCenterRadius(oCenterPoint2, oFlangeBoltHoleDia / 10 / 2) 'Teken circel 1
        oProfile2 = oSketch02.Profiles.AddForSolid 'Maakt het profiel van het eerste gat
        oExtrDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kCutOperation)
        Call oExtrDef2.SetDistanceExtent(oFlangeThick / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion2 = oDef.Features.ExtrudeFeatures.Add(oExtrDef2)
        oWorkAx1 = oDef.WorkAxes.Item(1)
        Dim bltpattrn As ObjectCollection
        bltpattrn = oInvApp.TransientObjects.CreateObjectCollection
        Call bltpattrn.Add(oDef.Features("Extrusion2"))
        Dim oDeg As Double
        oDeg = 10 * 0.0174532925
        Call oDef.Features.CircularPatternFeatures.Add(bltpattrn, oWorkAx1, True, oFlangeBoltNumber, 360 / oFlangeBoltNumber * pi / 180, False, PatternComputeTypeEnum.kIdenticalCompute)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        Select Case oMaterial
            Case "S235", "304L", "316L", "ALU"
                propSet3.ItemByPropId(29).Value = "EN 1092 Type 02"
            Case "PVC"
                propSet3.ItemByPropId(29).Value = "PP-GFK-PVC"
            Case "HDPE"
                propSet3.ItemByPropId(29).Value = "PP-GFK-HDPE"
        End Select


        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "ALU"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Aluminum 6061", "ALU", "ALU")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("ALU")
                oMat.Density = 2.7
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("ALU")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("ALU")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(200, 250, 250)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)




            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "PVC", "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "GRFP", "PP-GFK", "PP-GFK")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PP-GFK")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PP-GFKflange")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PP-GFKflange")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(150, 150, 150)  'Greenisch
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True


        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
EndRoutine:
        Me.Show()
    End Sub


    Private Sub PlaceSteelBlindFlange()
        '------------------------------------------------
        '
        '          PLACING STEEL BLIND FLANGES
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oFrontPlane As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oSketch02 As PlanarSketch
        Dim oCenterPoint As SketchPoint
        Dim oCenterPoint2 As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircles2 As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle3 As SketchCircle
        Dim oWorkAx As Object
        Dim oWorkAx1 As Object
        Dim oProfile As Profile
        Dim oProfile2 As Profile
        Dim oExtrDef As ExtrudeDefinition
        Dim oExtrDef2 As ExtrudeDefinition
        Dim oExtrusion As ExtrudeFeature
        Dim oExtrusion2 As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If



BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        oElbowAngle = (90 * pi / 180)
        oFrontPlane = oDef.WorkPlanes.Item(1) 'Kies Plane XY (3)om op te tekenen
        oSketch01 = oDef.Sketches.Add(oFrontPlane) 'Maakt de schets aan
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oFlangeDia / 10) / 2) 'Teken circel 1
        'oCircle2 = oCircles.AddByCenterRadius(oCenterPoint, (oPipeDia / 10) / 2) 'Teken circel 2
        oWorkAx = oDef.WorkAxes.Item(1)
        oProfile = oSketch01.Profiles.AddForSolid 'Maakt het profiel om te extruden
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef.SetDistanceExtent(oFlangeThick / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)


        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(1)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")
        ' Dim attrib As Attribute
        Dim entity3 As Face
        entity3 = oDef.SurfaceBodies.Item(1).Faces.Item(3)
        attribSets = entity3.AttributeSets
        attribSet = attribSets.Add("BoltFace")


        oSketch02 = oDef.Sketches.Add(oFrontPlane) 'Maakt de schets aan
        oCircles2 = oSketch02.SketchCircles
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(Math.Sin(360 * pi / 180 / oFlangeBoltNumber / 2) * oFlangeKDia / 2 / 10, Math.Cos(360 * pi / 180 / oFlangeBoltNumber / 2) * oFlangeKDia / 2 / 10), False)
        oCircle3 = oCircles2.AddByCenterRadius(oCenterPoint2, oFlangeBoltHoleDia / 10 / 2) 'Teken circel 1
        oProfile2 = oSketch02.Profiles.AddForSolid 'Maakt het profiel van het eerste gat
        oExtrDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kCutOperation)
        Call oExtrDef2.SetDistanceExtent(oFlangeThick / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion2 = oDef.Features.ExtrudeFeatures.Add(oExtrDef2)
        oWorkAx1 = oDef.WorkAxes.Item(1)
        Dim bltpattrn As ObjectCollection
        bltpattrn = oInvApp.TransientObjects.CreateObjectCollection
        Call bltpattrn.Add(oDef.Features("Extrusion2"))
        Dim oDeg As Double
        oDeg = 10 * 0.0174532925
        Call oDef.Features.CircularPatternFeatures.Add(bltpattrn, oWorkAx1, True, oFlangeBoltNumber, 360 / oFlangeBoltNumber * pi / 180, False, PatternComputeTypeEnum.kIdenticalCompute)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "EN 1092 Type 05"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(150, 150, 150)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
EndRoutine:
        Me.Show()
    End Sub


    Private Sub PlaceSteelPipeNipple()
        '------------------------------------------------
        '
        '          PLACING STEEL PIPE NIPPLES
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oCenterPlane As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oCenterPoint As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oWorkAx As Object
        Dim oProfile As Profile
        Dim oExtrDef As ExtrudeDefinition
        Dim oExtrusion As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If



BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        oElbowAngle = (90 * pi / 180)
        oCenterPlane = oDef.WorkPlanes.Item(3) 'Kies Plane XY (3)om op te tekenen
        oSketch01 = oDef.Sketches.Add(oCenterPlane) 'Maakt de schets aan
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oPipeDia / 10) / 2) 'Teken circel 1
        oCircle2 = oCircles.AddByCenterRadius(oCenterPoint, ((oPipeDia - (oPipeSch * 2)) / 10) / 2) 'Teken circel 2
        oWorkAx = oDef.WorkAxes.Item(1)
        oProfile = oSketch01.Profiles.AddForSolid 'Maakt het profiel om te revolven
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef.SetDistanceExtent(oNippleLenght, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)

        ' Set a reference to the ThreadFeatures collection object.
        Dim oThreadFeatures As ThreadFeatures
        oThreadFeatures = oDef.Features.ThreadFeatures

        ' Define all of the thread information.
        Dim oThreadInfo As ThreadInfo
        oThreadInfo = oThreadFeatures.CreateTaperedThreadInfo(False, True, "ISO Taper External", "R 1")

        ' Get the face the thread will be applied to.
        Dim oFace As Face
        oFace = oExtrusion.SideFaces.Item(2)

        ' Get the edge the thread extent will be measured from.
        Dim oEdge As Edge
        oEdge = oExtrusion.EndFaces.Item(1).Edges.Item(2)

        ' Create the thread feature.
        Dim oThreadFeature As ThreadFeature
        oThreadFeature = oThreadFeatures.Add(oFace, oEdge, oThreadInfo, False, False, "2 cm", 0)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "EN 10220"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------


        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(4)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")
        'Dim attrib As Attribute

        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(3)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")

        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If

FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document

        Try  'Only to reuse old nipples 
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)

        Catch 'Only to reuse old nipples 
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdges")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
            GoTo EndRoutine

        End Try 'Only to reuse old nipples 


        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, -1.2)

        End If
        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If
EndRoutine:
        Me.Show()
    End Sub


    Private Sub PlaceSteelStubEnds()
        '------------------------------------------------
        '
        '          PLACING STEEL STUB ENDS
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oProfile As Profile
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        Dim oWPlane As WorkPlane
        Dim oSketch As PlanarSketch
        Dim oWorkAxis As Object
        Dim Angle As Double
        Dim oRevFeature As RevolveFeature
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d


        'Aanmaken part document zonder template

        oWPlane = oDef.WorkPlanes.Item(3)
        oSketch = oDef.Sketches.Add(oWPlane)

        pnt1 = oTG.CreatePoint2d(0, (oPipeDia / 2 / 10) - (oPipeSch / 10)) ' point 1
        pnt2 = oTG.CreatePoint2d(0, (oFlangeKDia - oFlangeBoltHoleDia - 5) / 2 / 10) ' point 2
        pnt3 = oTG.CreatePoint2d((oPipeSch / 10), (oFlangeKDia - oFlangeBoltHoleDia - 5) / 2 / 10) ' point 3
        pnt4 = oTG.CreatePoint2d((oPipeSch / 10), (oPipeDia / 2 / 10)) ' point 4
        pnt5 = oTG.CreatePoint2d((oFlangeLenght / 10), (oPipeDia / 2 / 10)) ' point 5
        pnt6 = oTG.CreatePoint2d((oFlangeLenght / 10), (oPipeDia / 2 / 10) - (oPipeSch / 10)) ' point 6


        ln1 = oSketch.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, ln1.StartSketchPoint)


        oWorkAxis = oDef.WorkAxes.Item(1)
        Angle = pi * 2
        oProfile = oSketch.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile, oWorkAxis, Angle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "EN 1092 Typ 33"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(2)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")

        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(6)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")

        Dim entity3 As Edge
        entity3 = oDef.SurfaceBodies.Item(1).Edges.Item(4)
        attribSets = entity3.AttributeSets
        attribSet = attribSets.Add("InsertEdgesC")

        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If


FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)

        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
        End If

        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine

        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesC")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
        End If

        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine

        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If
EndRoutine:
        Me.Show()
    End Sub



    Private Sub PlaceSteelFlangeWN()
        '------------------------------------------------
        '
        '          PLACING STEEL WN FLANGE
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oFrontPlane As WorkPlane
        Dim oSketch02 As PlanarSketch
        Dim oCenterPoint2 As SketchPoint
        Dim oCircle3 As SketchCircle
        Dim oWorkAx1 As Object
        Dim oProfile2 As Profile
        Dim oExtrDef2 As ExtrudeDefinition
        Dim oExtrusion2 As ExtrudeFeature
        Dim oProfile As Profile
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy
        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        Dim oWPlane As WorkPlane
        Dim oSketch As PlanarSketch
        Dim oWorkAxis As Object
        Dim Angle As Double
        Dim oRevFeature As RevolveFeature
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine
        Dim ln7 As SketchLine
        Dim ln8 As SketchLine
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim pnt7 As Point2d
        Dim pnt8 As Point2d

        'Aanmaken part document zonder template

        oWPlane = oDef.WorkPlanes.Item(3)
        oSketch = oDef.Sketches.Add(oWPlane)
        pnt1 = oTG.CreatePoint2d(0, (oPipeDia / 2 / 10) - (oPipeSch / 10)) ' point 1
        pnt2 = oTG.CreatePoint2d(0, (oFlangeKDia - oFlangeBoltHoleDia - 5) / 2 / 10) ' point 2
        pnt3 = oTG.CreatePoint2d(0.3, (oFlangeKDia - oFlangeBoltHoleDia - 5) / 2 / 10) ' point 3
        'pnt2 = oTG.CreatePoint2d(0, (oFlangeKDia - (oFlangeDia - oFlangeKDia)) / 2 / 10) ' point 2
        'pnt3 = oTG.CreatePoint2d(0.3, (oFlangeKDia - (oFlangeDia - oFlangeKDia)) / 2 / 10) ' point 3
        pnt4 = oTG.CreatePoint2d(0.3, oFlangeDia / 2 / 10) ' point 4
        pnt5 = oTG.CreatePoint2d(0.3 + oFlangeThick / 10, oFlangeDia / 2 / 10) ' point 5
        pnt6 = oTG.CreatePoint2d(0.3 + oFlangeThick / 10, (oFlangeKDia - (oFlangeDia - oFlangeKDia)) / 2 / 10) ' point 6
        pnt7 = oTG.CreatePoint2d((oFlangeLenght / 10), (oPipeDia / 2 / 10)) ' point 7
        pnt8 = oTG.CreatePoint2d((oFlangeLenght / 10), (oPipeDia / 2 / 10) - (oPipeSch / 10)) ' point 8
        ln1 = oSketch.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, pnt7)
        ln7 = oSketch.SketchLines.AddByTwoPoints(ln6.EndSketchPoint, pnt8)
        ln8 = oSketch.SketchLines.AddByTwoPoints(ln7.EndSketchPoint, ln1.StartSketchPoint)
        oWorkAxis = oDef.WorkAxes.Item(1)
        Angle = pi * 2
        oProfile = oSketch.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile, oWorkAxis, Angle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(2)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")
        'Dim attrib As Attribute

        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(8)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")

        Dim entity3 As Face
        entity3 = oDef.SurfaceBodies.Item(1).Faces.Item(4)
        attribSets = entity3.AttributeSets
        attribSet = attribSets.Add("BoltFace")

        oFrontPlane = oDef.WorkPlanes.Item(1)
        oSketch02 = oDef.Sketches.Add(oFrontPlane) 'Maakt de schets aan
        'oCircles2 = oSketch02.SketchCircles
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(Math.Sin(360 * pi / 180 / oFlangeBoltNumber / 2) * oFlangeKDia / 2 / 10, Math.Cos(360 * pi / 180 / oFlangeBoltNumber / 2) * oFlangeKDia / 2 / 10), False)
        oCircle3 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint2, oFlangeBoltHoleDia / 10 / 2) 'Teken circel 1
        oProfile2 = oSketch02.Profiles.AddForSolid 'Maakt het profiel van het eerste gat
        oExtrDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kCutOperation)
        Call oExtrDef2.SetDistanceExtent(oFlangeThick + 0.3 / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        oExtrusion2 = oDef.Features.ExtrudeFeatures.Add(oExtrDef2)
        oWorkAx1 = oDef.WorkAxes.Item(1)
        Dim bltpattrn As ObjectCollection
        bltpattrn = oInvApp.TransientObjects.CreateObjectCollection
        Call bltpattrn.Add(oDef.Features("Extrusion1"))
        Dim oDeg As Double
        oDeg = 10 * 0.0174532925
        Call oDef.Features.CircularPatternFeatures.Add(bltpattrn, oWorkAx1, True, oFlangeBoltNumber, 360 / oFlangeBoltNumber * pi / 180, False, PatternComputeTypeEnum.kIdenticalCompute)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "EN 1092 Typ 11"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing



        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True


        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If

FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)


        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
        End If
        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If
EndRoutine:
        Me.Show()
    End Sub


    Private Sub PlaceSteelOlet()
        '------------------------------------------------
        '
        '          PLACING Steel Olet
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oSketch01 As PlanarSketch
        Dim oSketch02 As PlanarSketch
        Dim oCenterPoint As SketchPoint
        Dim oCenterPoint2 As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oCirclesb As SketchCircles
        Dim oCircle3 As SketchCircle
        Dim oWorkAx As Object
        Dim oWorkAxb As Object
        Dim oProfile As Profile
        Dim oProfileb As Profile
        Dim oExtrDef As ExtrudeDefinition
        Dim oExtrDefb As ExtrudeDefinition
        Dim oExtrusion As ExtrudeFeature
        Dim oExtrusionb As ExtrudeFeature
        Dim asmDoc As AssemblyDocument

        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim oletaxis As Object


        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        oSketch01 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3)) 'Maakt de schets aan
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oBranchDia / 10) / 2) 'Teken circel 1
        oCircle2 = oCircles.AddByCenterRadius(oCenterPoint, ((oBranchDia + (oPipeSch * 6)) / 10) / 2) 'Teken circel 2
        oWorkAx = oDef.WorkAxes.Item(1)
        oProfile = oSketch01.Profiles.AddForSolid 'Maakt het profiel om te extruden
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef.SetDistanceExtent((oPipeDia / 2 + oOletLenght) / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)
        oSketch02 = oDef.Sketches.Add(oDef.WorkPlanes.Item(2)) 'Maakt de schets aan
        oCirclesb = oSketch02.SketchCircles
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles
        oCircle3 = oCirclesb.AddByCenterRadius(oCenterPoint2, (oPipeDia / 10) / 2) 'Teken circel 1
        oProfileb = oSketch02.Profiles.AddForSolid 'Maakt het profiel om te cut extruden
        oWorkAxb = oDef.WorkAxes.Item(1)
        oExtrDefb = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfileb, PartFeatureOperationEnum.kCutOperation)
        Call oExtrDefb.SetDistanceExtent(oPipeDia / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        oExtrusionb = oDef.Features.ExtrudeFeatures.Add(oExtrDefb)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "3000#"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim Insertaxis As Object
        Insertaxis = oDef.WorkAxes(2)
        Dim attribSets As AttributeSets
        attribSets = Insertaxis.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertAxis")
        'Dim attrib As Attribute


        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)



        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            'Dim trans As Matrix
            'trans = oInvApp.TransientGeometry.CreateMatrix
            'elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            'elbowOcc.Grounded = True
            MsgBox("A Header Pipe is needed to place an Olet", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If
        Me.Hide()

        Dim oHeader As FaceProxy
        oHeader = oInvApp.CommandManager.Pick(SelectionFilterEnum.kPartFaceCylindricalFilter, "Select Header Pipe.")
        If oHeader Is Nothing Then
            GoTo EndRoutine
        End If

        Dim oHeaderpart As PartDocument
        oHeaderpart = oHeader.Parent.CreatedByFeature.Parent.Document

        Dim oHeaderocc As ComponentOccurrence
        oHeaderocc = oHeader.ContainingOccurrence

        Dim oheaderaxis As Object
        oheaderaxis = oHeaderpart.ComponentDefinition.WorkAxes.Item(3)

        Dim oheaderaxisproxy As WorkAxisProxy
        oheaderaxisproxy = Nothing
        Call oHeaderocc.CreateGeometryProxy(oheaderaxis, oheaderaxisproxy)

        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document

        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertAxis")
        oletaxis = attrSets.Item(1).Parent.Parent

        Dim elbowEdgeProxy As WorkAxisProxy
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(oletaxis, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddMateConstraint(oheaderaxisproxy, elbowEdgeProxy, 0)

EndRoutine:
        Me.Show()
    End Sub

    Private Sub PlaceSteelUnion()
        '------------------------------------------------
        '
        '          PLACING Steel Unions
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oCenterPlane As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oCenterPoint As SketchPoint
        Dim oSketch02 As PlanarSketch
        Dim oCenterPoint2 As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircles2 As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oCircle3 As SketchCircle
        Dim oWorkAx As Object
        Dim oProfile As Profile
        Dim oExtrDef As ExtrudeDefinition
        Dim oExtrusion As ExtrudeFeature
        Dim oProfile2 As Profile
        Dim oExtrDef2 As ExtrudeDefinition
        Dim oExtrusion2 As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine
        Dim ln7 As SketchLine
        Dim ln8 As SketchLine

        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim pnt7 As Point2d
        Dim pnt8 As Point2d


        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        oCenterPlane = oDef.WorkPlanes.Item(3) 'Kies Plane XY (3)om op te tekenen
        oSketch01 = oDef.Sketches.Add(oCenterPlane) 'Maakt de schets aan
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oPipeDia / 10) / 2) 'Teken circel 1
        oCircle2 = oCircles.AddByCenterRadius(oCenterPoint, ((oPipeDia + (oPipeSch * 4)) / 10) / 2) 'Teken circel 2
        oWorkAx = oDef.WorkAxes.Item(1)
        oProfile = oSketch01.Profiles.AddForSolid 'Maakt het profiel om te revolven
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef.SetDistanceExtent(oUnionLenght / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)

        oSketch02 = oDef.Sketches.Add(oCenterPlane) 'Maakt de schets aan
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles2
        oCircles2 = oSketch02.SketchCircles
        oCircle3 = oCircles2.AddByCenterRadius(oCenterPoint2, ((oPipeDia - (oPipeSch * 4)) / 10) / 2) 'Teken circel 3
        pnt1 = oTG.CreatePoint2d(oPipeDia / 26, oPipeDia / 12) ' point 1
        pnt2 = oTG.CreatePoint2d(oPipeDia / 12, oPipeDia / 26) ' point 2
        pnt3 = oTG.CreatePoint2d(oPipeDia / 12, -oPipeDia / 26) ' point 3
        pnt4 = oTG.CreatePoint2d(oPipeDia / 26, -oPipeDia / 12) ' point 4
        pnt5 = oTG.CreatePoint2d(-oPipeDia / 26, -oPipeDia / 12) ' point 5
        pnt6 = oTG.CreatePoint2d(-oPipeDia / 12, -oPipeDia / 26) ' point 6
        pnt7 = oTG.CreatePoint2d(-oPipeDia / 12, oPipeDia / 26) ' point 7
        pnt8 = oTG.CreatePoint2d(-oPipeDia / 26, oPipeDia / 12) ' point 8
        ln1 = oSketch02.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch02.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch02.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch02.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch02.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch02.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, pnt7)
        ln7 = oSketch02.SketchLines.AddByTwoPoints(ln6.EndSketchPoint, pnt8)
        ln8 = oSketch02.SketchLines.AddByTwoPoints(ln7.EndSketchPoint, ln1.StartSketchPoint)
        oProfile2 = oSketch02.Profiles.AddForSolid 'Maakt het profiel om te revolven
        oExtrDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef2.SetDistanceExtent(oCouplingLenght / 20, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        oExtrusion2 = oDef.Features.ExtrudeFeatures.Add(oExtrDef2)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "3000#"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(1)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdges")
        'Dim attrib As Attribute

        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(150, 150, 150)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If
        Me.Hide()

        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdges")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, -1)

EndRoutine:
        Me.Show()
    End Sub



    Private Sub PlacePVCElbow()
        '------------------------------------------------
        '
        '          PLACING PVC ELBOWS 
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oCenterPlane As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oSketch02 As PlanarSketch
        Dim oSketch03 As PlanarSketch
        Dim oCenterPoint01 As SketchPoint
        Dim oCenterPoint02 As SketchPoint
        Dim oCenterPoint03 As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oCircle3 As SketchCircle
        Dim oCircle4 As SketchCircle
        Dim oCircle5 As SketchCircle
        Dim oCircle6 As SketchCircle
        Dim oWorkAx As Object
        Dim oProfile01 As Profile
        Dim oProfile02 As Profile
        Dim oProfile03 As Profile
        Dim oRevFeature As RevolveFeature
        Dim oExtrDef01 As ExtrudeDefinition
        Dim oExtrDef02 As ExtrudeDefinition
        Dim oExtrudeFeature01 As ExtrudeFeature
        Dim oExtrudeFeature02 As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        'Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        oElbowAngle = (90 * pi / 180)
        oCenterPlane = oDef.WorkPlanes.Item(3) 'Kies Plane XY (3)om op te tekenen
        oSketch01 = oDef.Sketches.Add(oCenterPlane) 'Maakt de schets aan
        oCenterPoint01 = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, (oElbowRadius / 10)), False) 'Maakt het middelpunt van de circles
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint01, ((oPipeDia + (oPipeSch * 2)) / 10) / 2) 'Teken circel 1
        oCircle2 = oCircles.AddByCenterRadius(oCenterPoint01, ((oPipeDia - (oPipeSch * 2)) / 10) / 2) 'Teken circel 2
        oWorkAx = oDef.WorkAxes.Item(1)
        oProfile01 = oSketch01.Profiles.AddForSolid 'Maakt het profiel om te revolven
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile01, oWorkAx, oElbowAngle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)


        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        Dim attribSets As AttributeSets
        Dim attribSet As AttributeSet
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(1)
        attribSets = entity.AttributeSets
        attribSet = attribSets.Add("ElbwInsA")
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(2)
        attribSets = entity.AttributeSets
        attribSet = attribSets.Add("ElbwInsB")






        oSketch02 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3))
        oCenterPoint02 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, (oElbowRadius / 10)), False)
        oCircle3 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint02, ((oPipeDia + (oPipeSch * 2)) / 10) / 2) 'Teken circel 3
        oCircle4 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint02, (oPipeDia / 10) / 2) 'Teken circel 4
        oProfile02 = oSketch02.Profiles.AddForSolid 'Maakt het profiel om te extruden
        oExtrDef01 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile02, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef01.SetDistanceExtent(oSockLenght / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        oExtrudeFeature01 = oDef.Features.ExtrudeFeatures.Add(oExtrDef01)

        oSketch03 = oDef.Sketches.Add(oRevFeature.EndFaces.Item(1))
        oCenterPoint03 = oSketch03.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircle5 = oSketch03.SketchCircles.AddByCenterRadius(oCenterPoint03, ((oPipeDia + (oPipeSch * 2)) / 10) / 2) 'Teken circel 3
        oCircle6 = oSketch03.SketchCircles.AddByCenterRadius(oCenterPoint03, (oPipeDia / 10) / 2) 'Teken circel 4
        oProfile03 = oSketch03.Profiles.AddForSolid 'Maakt het profiel om te extruden
        oExtrDef02 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile03, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef02.SetDistanceExtent(oSockLenght / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        oExtrudeFeature02 = oDef.Features.ExtrudeFeatures.Add(oExtrDef02)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits


        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "GIV"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing


        Select Case oMaterial
            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrudeFeature01.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrudeFeature02.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True
        '--------------Place the part interactive--------------------------------------



        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        Try
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("ElbwInsA")
            elbowEdge = attrSets.Item(1).Parent.Parent
        Catch ex As Exception
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdges")
            elbowEdge = attrSets.Item(1).Parent.Parent
        End Try

        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)



        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 

        'Start Angle Constraint aligned ELBOW

        'Define the horizontal and vertical plane of the part


        pi = Math.Acos(-1)

        'Proxyplane maken van het werkvlak paralel met het insertvlak

        Dim oCrossPlane As WorkPlane
        oCrossPlane = Nothing
        Dim oCrossPlaneProxy As WorkPlaneProxy
        oCrossPlaneProxy = Nothing
        oCrossPlane = elbowDoc.ComponentDefinition.WorkPlanes(2)
        Call elbowOcc.CreateGeometryProxy(oCrossPlane, oCrossPlaneProxy)

        'bepaal de hoek tussen het insertvlak en één der werkvlakken van de assembly in graden

        Dim oOrientXY As Double
        Dim oOrientXZ As Double
        Dim oOrientYZ As Double

        oOrientXY = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(3), oCrossPlaneProxy) / pi * 180)
        oOrientXZ = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(2), oCrossPlaneProxy) / pi * 180)
        oOrientYZ = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(1), oCrossPlaneProxy) / pi * 180)

        'oOrient is public gedeclareerd zie begin

        oOrient = "Not aligned"

        'Check the orientation of the part

        If oOrientXY = 90 Then
            oOrient = "XYaxis"
        End If
        If oOrientXZ = 90 Then
            oOrient = "XZaxis"
        End If
        If oOrientYZ = 90 Then
            oOrient = "YZaxis"
        End If

        'MsgBox(oOrient)


        oElbowInsertAngle = 0

        'Afhangkelijk van welk vlak er haaks tov het insertvlak staat wordt er een constraint gemaakt met middenvlak (werkvlak1) van de elbow

        If oOrient = "XYaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(3), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If

        End If

        If oOrient = "XZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(2), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If

        If oOrient = "YZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(1), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If
        'END TEST ROTATION ELBOW
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 


EndRoutine:
        Me.Show()
    End Sub




    Private Sub PlacePVCElbow45gr()
        '------------------------------------------------
        '
        '          PLACING PVC 45gr ELBOWS 
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oCenterPlane As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oSketch02 As PlanarSketch
        Dim oSketch03 As PlanarSketch
        Dim oCenterPoint01 As SketchPoint
        Dim oCenterPoint02 As SketchPoint
        Dim oCenterPoint03 As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oCircle3 As SketchCircle
        Dim oCircle4 As SketchCircle
        Dim oCircle5 As SketchCircle
        Dim oCircle6 As SketchCircle
        Dim oWorkAx As Object
        Dim oProfile01 As Profile
        Dim oProfile02 As Profile
        Dim oProfile03 As Profile
        Dim oRevFeature As RevolveFeature
        Dim oExtrDef01 As ExtrudeDefinition
        Dim oExtrDef02 As ExtrudeDefinition
        Dim oExtrudeFeature01 As ExtrudeFeature
        Dim oExtrudeFeature02 As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        oElbowAngle = (45 * pi / 180)
        oCenterPlane = oDef.WorkPlanes.Item(3) 'Kies Plane XY (3)om op te tekenen
        oSketch01 = oDef.Sketches.Add(oCenterPlane) 'Maakt de schets aan
        oCenterPoint01 = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, (oElbowRadius / 10)), False) 'Maakt het middelpunt van de circles
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint01, ((oPipeDia + (oPipeSch * 2)) / 10) / 2) 'Teken circel 1
        oCircle2 = oCircles.AddByCenterRadius(oCenterPoint01, ((oPipeDia - (oPipeSch * 2)) / 10) / 2) 'Teken circel 2
        oWorkAx = oDef.WorkAxes.Item(1)
        oProfile01 = oSketch01.Profiles.AddForSolid 'Maakt het profiel om te revolven
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile01, oWorkAx, oElbowAngle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(1)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdges")

        oSketch02 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3))
        oCenterPoint02 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, (oElbowRadius / 10)), False)
        oCircle3 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint02, ((oPipeDia + (oPipeSch * 2)) / 10) / 2) 'Teken circel 3
        oCircle4 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint02, (oPipeDia / 10) / 2) 'Teken circel 4
        oProfile02 = oSketch02.Profiles.AddForSolid 'Maakt het profiel om te extruden
        oExtrDef01 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile02, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef01.SetDistanceExtent(oSockLenght / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        oExtrudeFeature01 = oDef.Features.ExtrudeFeatures.Add(oExtrDef01)

        oSketch03 = oDef.Sketches.Add(oRevFeature.EndFaces.Item(1))
        oCenterPoint03 = oSketch03.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircle5 = oSketch03.SketchCircles.AddByCenterRadius(oCenterPoint03, ((oPipeDia + (oPipeSch * 2)) / 10) / 2) 'Teken circel 3
        oCircle6 = oSketch03.SketchCircles.AddByCenterRadius(oCenterPoint03, (oPipeDia / 10) / 2) 'Teken circel 4
        oProfile03 = oSketch03.Profiles.AddForSolid 'Maakt het profiel om te extruden
        oExtrDef02 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile03, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef02.SetDistanceExtent(oSockLenght / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        oExtrudeFeature02 = oDef.Features.ExtrudeFeatures.Add(oExtrDef02)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits


        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "HIV"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing


        Select Case oMaterial
            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrudeFeature01.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrudeFeature02.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdges")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
EndRoutine:
        Me.Show()
    End Sub

    Private Sub PlacePVCTee()
        '------------------------------------------------
        '
        '          PLACING PVC TEES
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oBranchePlane As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oSketch02 As PlanarSketch
        Dim oSketch03 As PlanarSketch
        Dim oSketch04 As PlanarSketch
        Dim oCenterPoint1 As SketchPoint
        Dim oCenterPoint2 As SketchPoint
        Dim oCircles1 As SketchCircles
        Dim oCircles2 As SketchCircles
        Dim oCircles3 As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oCircle3 As SketchCircle
        Dim oProfile1 As Profile
        Dim oProfile2 As Profile
        Dim oProfile3 As Profile
        Dim oProfile4 As Profile
        Dim oWorkAxis As Object
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine
        Dim ln7 As SketchLine
        Dim ln8 As SketchLine
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim pnt7 As Point2d
        Dim pnt8 As Point2d
        Dim oRevFeature As RevolveFeature
        Dim oExtrDef1 As ExtrudeDefinition
        Dim oExtrDef2 As ExtrudeDefinition
        Dim oExtrDef3 As ExtrudeDefinition
        Dim oExtrusion1 As ExtrudeFeature
        Dim oExtrusion2 As ExtrudeFeature
        Dim oExtrusion3 As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        'Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim TeeEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry

        'oCenterPlane1 = oDef.WorkPlanes.Item(3)
        oSketch01 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3)) 'Maakt de schets aan
        oCenterPoint2 = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles2
        pnt1 = oTG.CreatePoint2d(oTeeLenght / 2 / 10, ((oPipeDia + oPipeSch * 2) / 10) / 2) ' point 1
        pnt2 = oTG.CreatePoint2d(oTeeLenght / 2 / 10, ((oPipeDia) / 10) / 2) ' point 2
        pnt3 = oTG.CreatePoint2d((oTeeLenght - oSockLenght * 2) / 2 / 10, ((oPipeDia) / 10) / 2) ' point 3
        pnt4 = oTG.CreatePoint2d((oTeeLenght - oSockLenght * 2) / 2 / 10, ((oPipeDia - oPipeSch * 2) / 10) / 2) ' point 4
        pnt5 = oTG.CreatePoint2d((-oTeeLenght + oSockLenght * 2) / 2 / 10, ((oPipeDia - oPipeSch * 2) / 10) / 2) ' point 5
        pnt6 = oTG.CreatePoint2d((-oTeeLenght + oSockLenght * 2) / 2 / 10, ((oPipeDia) / 10) / 2) ' point 6
        pnt7 = oTG.CreatePoint2d(-oTeeLenght / 2 / 10, ((oPipeDia) / 10) / 2) ' point 7
        pnt8 = oTG.CreatePoint2d(-oTeeLenght / 2 / 10, ((oPipeDia + oPipeSch * 2) / 10) / 2) ' point 8
        ln1 = oSketch01.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch01.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch01.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch01.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch01.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch01.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, pnt7)
        ln7 = oSketch01.SketchLines.AddByTwoPoints(ln6.EndSketchPoint, pnt8)
        ln8 = oSketch01.SketchLines.AddByTwoPoints(ln7.EndSketchPoint, ln1.StartSketchPoint)
        oWorkAxis = oDef.WorkAxes.Item(1)
        oProfile1 = oSketch01.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddFull(oProfile1, oWorkAxis, PartFeatureOperationEnum.kNewBodyOperation)

        oBranchePlane = oDef.WorkPlanes.AddByPlaneAndOffset(oDef.WorkPlanes.Item(3), oTeeLenght / 2 / 10)
        oSketch02 = oDef.Sketches.Add(oBranchePlane)
        oCenterPoint1 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles1 = oSketch02.SketchCircles
        oCircle1 = oCircles1.AddByCenterRadius(oCenterPoint1, ((oPipeDia + oPipeSch * 2) / 10) / 2)
        oProfile2 = oSketch02.Profiles.AddForSolid
        oExtrDef1 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef1.SetToNextExtent(PartFeatureExtentDirectionEnum.kNegativeExtentDirection, oRevFeature.SurfaceBody)
        oExtrusion1 = oDef.Features.ExtrudeFeatures.Add(oExtrDef1)

        oSketch03 = oDef.Sketches.Add(oBranchePlane)
        oCenterPoint2 = oSketch03.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles2 = oSketch03.SketchCircles
        oCircle2 = oCircles2.AddByCenterRadius(oCenterPoint2, ((oPipeDia) / 10) / 2)
        oProfile3 = oSketch03.Profiles.AddForSolid
        oExtrDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile3, PartFeatureOperationEnum.kCutOperation)
        Call oExtrDef2.SetDistanceExtent(oSockLenght / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion2 = oDef.Features.ExtrudeFeatures.Add(oExtrDef2)

        oSketch04 = oDef.Sketches.Add(oBranchePlane)
        oCenterPoint2 = oSketch04.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles3 = oSketch04.SketchCircles
        oCircle3 = oCircles3.AddByCenterRadius(oCenterPoint2, ((oPipeDia - oPipeSch * 2) / 10) / 2)
        oProfile4 = oSketch04.Profiles.AddForSolid
        oExtrDef3 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile4, PartFeatureOperationEnum.kCutOperation)
        Call oExtrDef3.SetDistanceExtent(oTeeLenght / 2 / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion3 = oDef.Features.ExtrudeFeatures.Add(oExtrDef3)
        oBranchePlane.Visible = False
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(10)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")
        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(4)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "TIV"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------

        Select Case oMaterial
            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion3.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True
        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If
        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If



FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        TeeEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, TeeEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, TeeEdgeProxy, True, 0)



        If MessageBox.Show(Me, "Would you keep this connection?", "Select connection", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo RotateTee1

        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            TeeEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, TeeEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, TeeEdgeProxy, True, 0)
        End If
        If MessageBox.Show(Me, "Would you keep this connection?", "Select connection", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo RotateTee2
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If








RotateTee1:

        'MsgBox("start rotate tee 1")

        'Start Angle Constraint aligned TEE
        'Define the horizontal and vertical plane of the part
        pi = Math.Acos(-1)

        'Proxyplane maken van het werkvlak paralel met het insertvlak

        Dim oCrossPlane As WorkPlane
        oCrossPlane = Nothing
        Dim oCrossPlaneProxy As WorkPlaneProxy
        oCrossPlaneProxy = Nothing
        oCrossPlane = elbowDoc.ComponentDefinition.WorkPlanes(2)
        Call elbowOcc.CreateGeometryProxy(oCrossPlane, oCrossPlaneProxy)

        'bepaal de hoek tussen het insertvlak en één der werkvlakken van de assembly in graden

        Dim oOrientXY As Double
        Dim oOrientXZ As Double
        Dim oOrientYZ As Double

        oOrientXY = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(1), oCrossPlaneProxy) / pi * 180)
        oOrientXZ = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(3), oCrossPlaneProxy) / pi * 180)
        oOrientYZ = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(2), oCrossPlaneProxy) / pi * 180)

        'oOrient is public gedeclareerd zie begin

        oOrient = "Not aligned"

        'Check the orientation of the part

        If oOrientXY = 90 Then
            oOrient = "XYaxis"
        End If
        If oOrientXZ = 90 Then
            oOrient = "XZaxis"
        End If
        If oOrientYZ = 90 Then
            oOrient = "YZaxis"
        End If

        'MsgBox(oOrient)


        oElbowInsertAngle = 0

        'Afhangkelijk van welk vlak er haaks tov het insertvlak staat wordt er een constraint gemaakt met middenvlak (werkvlak1) van de elbow

        If oOrient = "XYaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(2)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(3), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If

        End If

        If oOrient = "XZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(2)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(2), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If

        If oOrient = "YZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(2)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(1), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If
        'END  ROTATION TEE1
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 

RotateTee2:

        ' MsgBox("start rotate tee 2")

        'Start Angle Constraint aligned TEE
        'Define the horizontal and vertical plane of the part
        pi = Math.Acos(-1)

        'Proxyplane maken van het werkvlak paralel met het insertvlak

        Dim oCrossPlane2 As WorkPlane
        oCrossPlane2 = Nothing
        Dim oCrossPlaneProxy2 As WorkPlaneProxy
        oCrossPlaneProxy2 = Nothing
        oCrossPlane2 = elbowDoc.ComponentDefinition.WorkPlanes(2)
        Call elbowOcc.CreateGeometryProxy(oCrossPlane2, oCrossPlaneProxy2)

        'bepaal de hoek tussen het insertvlak en één der werkvlakken van de assembly in graden

        Dim oOrientXY2 As Double
        Dim oOrientXZ2 As Double
        Dim oOrientYZ2 As Double

        oOrientXY2 = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(3), oCrossPlaneProxy2) / pi * 180)
        oOrientXZ2 = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(2), oCrossPlaneProxy2) / pi * 180)
        oOrientYZ2 = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(1), oCrossPlaneProxy2) / pi * 180)

        'oOrient is public gedeclareerd zie begin

        oOrient = "Not aligned"

        'Check the orientation of the part

        If oOrientXY2 = 90 Then
            oOrient = "XYaxis"
        End If
        If oOrientXZ2 = 90 Then
            oOrient = "XZaxis"
        End If
        If oOrientYZ2 = 90 Then
            oOrient = "YZaxis"
        End If

        'MsgBox(oOrient)


        oElbowInsertAngle = 0

        'Afhangkelijk van welk vlak er haaks tov het insertvlak staat wordt er een constraint gemaakt met middenvlak (werkvlak1) van de elbow

        If oOrient = "XYaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(3), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If

        End If

        If oOrient = "XZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(2), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If

        If oOrient = "YZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(1), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If
        'END  ROTATION TEE2
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 







EndRoutine:
        Me.Show()
    End Sub





    Private Sub PlacePVCRedTee()
        '------------------------------------------------
        '
        '          PLACING PVC RED TEES
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oBranchePlane As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oSketch02 As PlanarSketch
        Dim oSketch03 As PlanarSketch
        Dim oSketch04 As PlanarSketch
        Dim oCenterPoint1 As SketchPoint
        Dim oCenterPoint2 As SketchPoint
        Dim oCircles1 As SketchCircles
        Dim oCircles2 As SketchCircles
        Dim oCircles3 As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oCircle3 As SketchCircle
        Dim oProfile1 As Profile
        Dim oProfile2 As Profile
        Dim oProfile3 As Profile
        Dim oProfile4 As Profile
        Dim oWorkAxis As Object
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine
        Dim ln7 As SketchLine
        Dim ln8 As SketchLine
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim pnt7 As Point2d
        Dim pnt8 As Point2d
        Dim oRevFeature As RevolveFeature
        Dim oExtrDef1 As ExtrudeDefinition
        Dim oExtrDef2 As ExtrudeDefinition
        Dim oExtrDef3 As ExtrudeDefinition
        Dim oExtrusion1 As ExtrudeFeature
        Dim oExtrusion2 As ExtrudeFeature
        Dim oExtrusion3 As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim TeeEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry

        'oCenterPlane1 = oDef.WorkPlanes.Item(3)
        oSketch01 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3)) 'Maakt de schets aan
        oCenterPoint2 = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles2
        pnt1 = oTG.CreatePoint2d(oTeeLenght / 2 / 10, ((oPipeDia + oPipeSch * 2) / 10) / 2) ' point 1
        pnt2 = oTG.CreatePoint2d(oTeeLenght / 2 / 10, ((oPipeDia) / 10) / 2) ' point 2
        pnt3 = oTG.CreatePoint2d((oTeeLenght - oSockLenght * 2) / 2 / 10, ((oPipeDia) / 10) / 2) ' point 3
        pnt4 = oTG.CreatePoint2d((oTeeLenght - oSockLenght * 2) / 2 / 10, ((oPipeDia - oPipeSch * 2) / 10) / 2) ' point 4
        pnt5 = oTG.CreatePoint2d((-oTeeLenght + oSockLenght * 2) / 2 / 10, ((oPipeDia - oPipeSch * 2) / 10) / 2) ' point 5
        pnt6 = oTG.CreatePoint2d((-oTeeLenght + oSockLenght * 2) / 2 / 10, ((oPipeDia) / 10) / 2) ' point 6
        pnt7 = oTG.CreatePoint2d(-oTeeLenght / 2 / 10, ((oPipeDia) / 10) / 2) ' point 7
        pnt8 = oTG.CreatePoint2d(-oTeeLenght / 2 / 10, ((oPipeDia + oPipeSch * 2) / 10) / 2) ' point 8
        ln1 = oSketch01.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch01.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch01.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch01.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch01.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch01.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, pnt7)
        ln7 = oSketch01.SketchLines.AddByTwoPoints(ln6.EndSketchPoint, pnt8)
        ln8 = oSketch01.SketchLines.AddByTwoPoints(ln7.EndSketchPoint, ln1.StartSketchPoint)
        oWorkAxis = oDef.WorkAxes.Item(1)
        oProfile1 = oSketch01.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddFull(oProfile1, oWorkAxis, PartFeatureOperationEnum.kNewBodyOperation)

        oBranchePlane = oDef.WorkPlanes.AddByPlaneAndOffset(oDef.WorkPlanes.Item(3), oBranchLenght / 10)
        oSketch02 = oDef.Sketches.Add(oBranchePlane)
        oCenterPoint1 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles1 = oSketch02.SketchCircles
        oCircle1 = oCircles1.AddByCenterRadius(oCenterPoint1, ((oBranchDia + oPipeSch * 2) / 10) / 2)
        oProfile2 = oSketch02.Profiles.AddForSolid
        oExtrDef1 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef1.SetToNextExtent(PartFeatureExtentDirectionEnum.kNegativeExtentDirection, oRevFeature.SurfaceBody)
        oExtrusion1 = oDef.Features.ExtrudeFeatures.Add(oExtrDef1)

        oSketch03 = oDef.Sketches.Add(oBranchePlane)
        oCenterPoint2 = oSketch03.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles2 = oSketch03.SketchCircles
        oCircle2 = oCircles2.AddByCenterRadius(oCenterPoint2, ((oBranchDia) / 10) / 2)
        oProfile3 = oSketch03.Profiles.AddForSolid
        oExtrDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile3, PartFeatureOperationEnum.kCutOperation)
        Call oExtrDef2.SetDistanceExtent((oBranchLenght / 10) - ((oPipeDia + oPipeSch * 2) / 10 / 2) - 0.2, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion2 = oDef.Features.ExtrudeFeatures.Add(oExtrDef2)

        oSketch04 = oDef.Sketches.Add(oBranchePlane)
        oCenterPoint2 = oSketch04.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles3 = oSketch04.SketchCircles
        oCircle3 = oCircles3.AddByCenterRadius(oCenterPoint2, ((oBranchDia - oPipeSch * 2) / 10) / 2)
        oProfile4 = oSketch04.Profiles.AddForSolid
        oExtrDef3 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile4, PartFeatureOperationEnum.kCutOperation)
        Call oExtrDef3.SetDistanceExtent(oBranchLenght / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion3 = oDef.Features.ExtrudeFeatures.Add(oExtrDef3)
        oBranchePlane.Visible = False
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits


        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(8)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")
        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(3)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "TRIV"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------

        Select Case oMaterial
            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion3.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If
        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        TeeEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, TeeEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, TeeEdgeProxy, True, 0)



        If MessageBox.Show(Me, "Would you keep this connection?", "Select connection", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine

        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            TeeEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, TeeEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, TeeEdgeProxy, True, 0)
        End If
        If MessageBox.Show(Me, "Would you keep this connection?", "Select connection", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If

EndRoutine:
        Me.Show()
    End Sub




    Private Sub PlacePVCReducer()
        '------------------------------------------------
        '
        '          PLACING PVC REDUCER 
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry

        'NEW------------------------------------------------------------------

        'Create  sketch1 on the X-Y work plane (X-Y is 3)
        Dim oSketch1 As PlanarSketch
        oSketch1 = oDef.Sketches.Add(oDef.WorkPlanes(3))

        ' Draw 2 concentric circles.
        Dim pCircle1 As SketchCircle
        pCircle1 = oSketch1.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), ((oPipeDia / 10) + (oPipeSch / 10 * 2)) / 2)
        Dim pCircle2 As SketchCircle
        pCircle2 = oSketch1.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), ((oPipeDia / 10) - (oPipeSch / 10 * 0)) / 2)

        ' Create a profile based on the circles
        Dim pProfile1 As Profile
        pProfile1 = oSketch1.Profiles.AddForSolid

        ' Create a base extrusion.
        Dim oExtrudeDef1 As ExtrudeDefinition
        oExtrudeDef1 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(pProfile1, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrudeDef1.SetDistanceExtent(oReducerLenght / 10 / 5, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        Dim oExtrude1 As ExtrudeFeature
        oExtrude1 = oDef.Features.ExtrudeFeatures.Add(oExtrudeDef1)

        'Create  WorkPlane2
        Dim oPlane2 As WorkPlane
        oPlane2 = oDef.WorkPlanes.AddByPlaneAndOffset(oSketch1, oReducerLenght / 10 / 5 * 3)

        'Create  sketch2 on WorkPlane2
        Dim oSketch2 As Sketch
        oSketch2 = oDef.Sketches.Add(oDef.WorkPlanes(4))

        ' Draw 2 concentric circles.
        Dim pCircle3 As SketchCircle
        pCircle3 = oSketch2.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), ((oBranchDia / 10) + (oPipeSch / 10 * 2)) / 2)
        Dim pCircle4 As SketchCircle
        pCircle4 = oSketch2.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), ((oBranchDia / 10) - (oPipeSch / 10 * 0)) / 2)

        ' Create a profile based on the circles
        Dim pProfile2 As Profile
        pProfile2 = oSketch2.Profiles.AddForSolid

        ' Create a base extrusion.
        Dim oExtrudeDef2 As ExtrudeDefinition
        oExtrudeDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(pProfile2, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrudeDef2.SetDistanceExtent(oReducerLenght / 10 / 5, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        Dim oExtrude2 As ExtrudeFeature
        oExtrude2 = oDef.Features.ExtrudeFeatures.Add(oExtrudeDef2)

        '---------------------LOFT1
        'Create  sketch3 on the X-Y work plane (X-Y is 3)
        Dim oSketch3 As PlanarSketch
        oSketch3 = oDef.Sketches.Add(oDef.WorkPlanes(3))

        ' Draw a circle.
        Dim pCircle5 As SketchCircle
        pCircle5 = oSketch3.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), ((oPipeDia / 10) + (oPipeSch / 10 * 2)) / 2)

        ' Create a profile based this circle
        Dim pProfile3 As Profile
        pProfile3 = oSketch3.Profiles.AddForSolid

        'Create  sketch4 on WorkPlane2
        Dim oSketch4 As Sketch
        oSketch4 = oDef.Sketches.Add(oDef.WorkPlanes(4))

        ' Draw a circle.
        Dim pCircle6 As SketchCircle
        pCircle6 = oSketch4.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), ((oBranchDia / 10) + (oPipeSch / 10 * 2)) / 2)

        ' Create a profile based this circle
        Dim pProfile4 As Profile
        pProfile4 = oSketch4.Profiles.AddForSolid

        ' Create an object collection for the sections.
        Dim oSections As ObjectCollection
        oSections = oInvApp.TransientObjects.CreateObjectCollection
        Call oSections.Add(pProfile3)
        Call oSections.Add(pProfile4)


        ' Create the loft definition. Because one of the ends isn't planar,
        ' a surface must be created instead of a solid.
        Dim oLoftDefinition As LoftDefinition
        oLoftDefinition = oDef.Features.LoftFeatures.CreateLoftDefinition(oSections, PartFeatureOperationEnum.kJoinOperation)

        ' Create the loft feature.
        Call oDef.Features.LoftFeatures.Add(oLoftDefinition)

        '---------------------LOFT2

        'Create  sketch5 on the X-Y work plane (X-Y is 3)
        Dim oSketch5 As PlanarSketch
        oSketch5 = oDef.Sketches.Add(oDef.WorkPlanes(3))

        ' Draw a circle.
        Dim pCircle7 As SketchCircle
        pCircle7 = oSketch5.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), ((oPipeDia / 10 - oPipeSch / 10 * 2) / 2))

        ' Create a profile based this circle
        Dim pProfile5 As Profile
        pProfile5 = oSketch5.Profiles.AddForSolid

        'Create  sketch6 on WorkPlane2
        Dim oSketch6 As Sketch
        oSketch6 = oDef.Sketches.Add(oDef.WorkPlanes(4))

        ' Draw a circle.
        Dim pCircle8 As SketchCircle
        pCircle8 = oSketch6.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), ((oBranchDia / 10 - oPipeSch / 10 * 2) / 2))

        ' Create a profile based this circle
        Dim pProfile6 As Profile
        pProfile6 = oSketch6.Profiles.AddForSolid

        ' Create an object collection for the sections.
        Dim oSections2 As ObjectCollection
        oSections2 = oInvApp.TransientObjects.CreateObjectCollection
        Call oSections2.Add(pProfile5)
        Call oSections2.Add(pProfile6)
        ' Create the loft definition. Because one of the ends isn't planar,
        ' a surface must be created instead of a solid.
        Dim oLoftDefinition2 As LoftDefinition
        oLoftDefinition2 = oDef.Features.LoftFeatures.CreateLoftDefinition(oSections2, PartFeatureOperationEnum.kCutOperation)

        ' Create the loft feature.
        Call oDef.Features.LoftFeatures.Add(oLoftDefinition2)

        oPlane2.Visible = False
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits


        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "RIV"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing


        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(1)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")
        'Dim attrib As Attribute

        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(2)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")



        Select Case oMaterial
            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oExtrude1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrude2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(3).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(4).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If





FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)


        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
        End If
        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If
EndRoutine:
        Me.Show()
    End Sub

    Private Sub PlacePVCECCReducer()
        '------------------------------------------------
        '
        '          PLACING PVC ECCENTRIC REDUCER 
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry

        'NEW------------------------------------------------------------------

        'Create  sketch1 on the X-Y work plane (X-Y is 3)
        Dim oSketch1 As PlanarSketch
        oSketch1 = oDef.Sketches.Add(oDef.WorkPlanes(3))

        ' Draw 2 concentric circles.
        Dim pCircle1 As SketchCircle
        pCircle1 = oSketch1.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), ((oPipeDia / 10) + (oPipeSch / 10 * 2)) / 2)
        Dim pCircle2 As SketchCircle
        pCircle2 = oSketch1.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), ((oPipeDia / 10) - (oPipeSch / 10 * 0)) / 2)

        ' Create a profile based on the circles
        Dim pProfile1 As Profile
        pProfile1 = oSketch1.Profiles.AddForSolid

        ' Create a base extrusion.
        Dim oExtrudeDef1 As ExtrudeDefinition
        oExtrudeDef1 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(pProfile1, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrudeDef1.SetDistanceExtent(oReducerLenght / 10 / 5, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        Dim oExtrude1 As ExtrudeFeature
        oExtrude1 = oDef.Features.ExtrudeFeatures.Add(oExtrudeDef1)

        'Create  WorkPlane2
        Dim oPlane2 As WorkPlane
        oPlane2 = oDef.WorkPlanes.AddByPlaneAndOffset(oSketch1, oReducerLenght / 10 / 5 * 3)

        'Create  sketch2 on WorkPlane2
        Dim oSketch2 As Sketch
        oSketch2 = oDef.Sketches.Add(oDef.WorkPlanes(4))

        ' Draw 2 concentric circles.
        Dim pCircle3 As SketchCircle
        pCircle3 = oSketch2.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, -(oPipeDia / 2 / 10) + (oBranchDia / 2 / 10)), ((oBranchDia / 10) + (oPipeSch / 10 * 2)) / 2)
        Dim pCircle4 As SketchCircle
        pCircle4 = oSketch2.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, -(oPipeDia / 2 / 10) + (oBranchDia / 2 / 10)), ((oBranchDia / 10) - (oPipeSch / 10 * 0)) / 2)

        ' Create a profile based on the circles
        Dim pProfile2 As Profile
        pProfile2 = oSketch2.Profiles.AddForSolid

        ' Create a base extrusion.
        Dim oExtrudeDef2 As ExtrudeDefinition
        oExtrudeDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(pProfile2, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrudeDef2.SetDistanceExtent(oReducerLenght / 10 / 5, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        Dim oExtrude2 As ExtrudeFeature
        oExtrude2 = oDef.Features.ExtrudeFeatures.Add(oExtrudeDef2)

        '---------------------LOFT1
        'Create  sketch3 on the X-Y work plane (X-Y is 3)
        Dim oSketch3 As PlanarSketch
        oSketch3 = oDef.Sketches.Add(oDef.WorkPlanes(3))

        ' Draw a circle.
        Dim pCircle5 As SketchCircle
        pCircle5 = oSketch3.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), ((oPipeDia / 10) + (oPipeSch / 10 * 2)) / 2)

        ' Create a profile based this circle
        Dim pProfile3 As Profile
        pProfile3 = oSketch3.Profiles.AddForSolid

        'Create  sketch4 on WorkPlane2
        Dim oSketch4 As Sketch
        oSketch4 = oDef.Sketches.Add(oDef.WorkPlanes(4))

        ' Draw a circle.
        Dim pCircle6 As SketchCircle
        pCircle6 = oSketch4.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, -(oPipeDia / 2 / 10) + (oBranchDia / 2 / 10)), ((oBranchDia / 10) + (oPipeSch / 10 * 2)) / 2)

        ' Create a profile based this circle
        Dim pProfile4 As Profile
        pProfile4 = oSketch4.Profiles.AddForSolid

        ' Create an object collection for the sections.
        Dim oSections As ObjectCollection
        oSections = oInvApp.TransientObjects.CreateObjectCollection
        Call oSections.Add(pProfile3)
        Call oSections.Add(pProfile4)


        ' Create the loft definition. Because one of the ends isn't planar,
        ' a surface must be created instead of a solid.
        Dim oLoftDefinition As LoftDefinition
        oLoftDefinition = oDef.Features.LoftFeatures.CreateLoftDefinition(oSections, PartFeatureOperationEnum.kJoinOperation)

        ' Create the loft feature.
        Call oDef.Features.LoftFeatures.Add(oLoftDefinition)

        '---------------------LOFT2

        'Create  sketch5 on the X-Y work plane (X-Y is 3)
        Dim oSketch5 As PlanarSketch
        oSketch5 = oDef.Sketches.Add(oDef.WorkPlanes(3))

        ' Draw a circle.
        Dim pCircle7 As SketchCircle
        pCircle7 = oSketch5.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), ((oPipeDia / 10 - oPipeSch / 10 * 2) / 2))

        ' Create a profile based this circle
        Dim pProfile5 As Profile
        pProfile5 = oSketch5.Profiles.AddForSolid

        'Create  sketch6 on WorkPlane2
        Dim oSketch6 As Sketch
        oSketch6 = oDef.Sketches.Add(oDef.WorkPlanes(4))

        ' Draw a circle.
        Dim pCircle8 As SketchCircle
        pCircle8 = oSketch6.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, -(oPipeDia / 2 / 10) + (oBranchDia / 2 / 10)), ((oBranchDia / 10 - oPipeSch / 10 * 2) / 2))

        ' Create a profile based this circle
        Dim pProfile6 As Profile
        pProfile6 = oSketch6.Profiles.AddForSolid

        ' Create an object collection for the sections.
        Dim oSections2 As ObjectCollection
        oSections2 = oInvApp.TransientObjects.CreateObjectCollection
        Call oSections2.Add(pProfile5)
        Call oSections2.Add(pProfile6)
        ' Create the loft definition. Because one of the ends isn't planar,
        ' a surface must be created instead of a solid.
        Dim oLoftDefinition2 As LoftDefinition
        oLoftDefinition2 = oDef.Features.LoftFeatures.CreateLoftDefinition(oSections2, PartFeatureOperationEnum.kCutOperation)

        ' Create the loft feature.
        Call oDef.Features.LoftFeatures.Add(oLoftDefinition2)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits
        oPlane2.Visible = False

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "RIV ECC"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing


        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(1)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")
        'Dim attrib As Attribute

        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(2)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")



        Select Case oMaterial
            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oExtrude1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrude2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(3).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.Item(4).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If


FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)


        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
        End If
        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If
EndRoutine:
        Me.Show()
    End Sub



    Private Sub PlacePVCCoupling()
        '------------------------------------------------
        '
        '          PLACING PVC COUPLING
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oSketch01 As PlanarSketch
        Dim oCenterPoint2 As SketchPoint
        Dim oWorkAxis As Object
        Dim oProfile1 As Profile
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine
        Dim ln7 As SketchLine
        Dim ln8 As SketchLine
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim pnt7 As Point2d
        Dim pnt8 As Point2d
        Dim oRevFeature As RevolveFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim TeeEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry

        'oCenterPlane1 = oDef.WorkPlanes.Item(3)
        oSketch01 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3)) 'Maakt de schets aan
        oCenterPoint2 = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles2
        pnt1 = oTG.CreatePoint2d(oCouplingLenght / 2 / 10, ((oPipeDia + oPipeSch * 2) / 10) / 2) ' point 1
        pnt2 = oTG.CreatePoint2d(oCouplingLenght / 2 / 10, ((oPipeDia) / 10) / 2) ' point 2
        pnt3 = oTG.CreatePoint2d((oCouplingLenght - oSockLenght * 2) / 2 / 10, ((oPipeDia) / 10) / 2) ' point 3
        pnt4 = oTG.CreatePoint2d((oCouplingLenght - oSockLenght * 2) / 2 / 10, ((oPipeDia - oPipeSch * 2) / 10) / 2) ' point 4
        pnt5 = oTG.CreatePoint2d((-oCouplingLenght + oSockLenght * 2) / 2 / 10, ((oPipeDia - oPipeSch * 2) / 10) / 2) ' point 5
        pnt6 = oTG.CreatePoint2d((-oCouplingLenght + oSockLenght * 2) / 2 / 10, ((oPipeDia) / 10) / 2) ' point 6
        pnt7 = oTG.CreatePoint2d(-oCouplingLenght / 2 / 10, ((oPipeDia) / 10) / 2) ' point 7
        pnt8 = oTG.CreatePoint2d(-oCouplingLenght / 2 / 10, ((oPipeDia + oPipeSch * 2) / 10) / 2) ' point 8
        ln1 = oSketch01.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch01.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch01.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch01.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch01.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch01.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, pnt7)
        ln7 = oSketch01.SketchLines.AddByTwoPoints(ln6.EndSketchPoint, pnt8)
        ln8 = oSketch01.SketchLines.AddByTwoPoints(ln7.EndSketchPoint, ln1.StartSketchPoint)
        oWorkAxis = oDef.WorkAxes.Item(1)
        oProfile1 = oSketch01.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddFull(oProfile1, oWorkAxis, PartFeatureOperationEnum.kNewBodyOperation)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits


        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(1)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")


        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "MIV"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------

        Select Case oMaterial
            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If
        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        TeeEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, TeeEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, TeeEdgeProxy, True, 0)

EndRoutine:
        Me.Show()
    End Sub



    Private Sub PlacePVCStubEnds()
        '------------------------------------------------
        '
        '          PLACING PVC STUB ENDS
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oProfile As Profile
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        Dim oWPlane As WorkPlane
        Dim oSketch As PlanarSketch
        Dim oWorkAxis As Object
        Dim oRevFeature As RevolveFeature
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine
        Dim ln7 As SketchLine
        Dim ln8 As SketchLine
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim pnt7 As Point2d
        Dim pnt8 As Point2d
        Dim oAngle As Double


        'Aanmaken part document zonder template

        oWPlane = oDef.WorkPlanes.Item(3)
        oSketch = oDef.Sketches.Add(oWPlane)

        pnt1 = oTG.CreatePoint2d(0, (oPipeDia / 2 / 10) - (oPipeSch * 2 / 10)) ' point 1
        pnt2 = oTG.CreatePoint2d(0, (oFlangeKDia - oFlangeBoltHoleDia - 5) / 2 / 10) ' point 2
        pnt3 = oTG.CreatePoint2d((oFlangeStubThick / 10), (oFlangeKDia - oFlangeBoltHoleDia - 5) / 2 / 10) ' point 3
        pnt4 = oTG.CreatePoint2d((oFlangeStubThick / 10), ((oPipeDia + oPipeSch * 2) / 2 / 10)) ' point 4
        pnt5 = oTG.CreatePoint2d((oFlangeLenght / 10), ((oPipeDia + oPipeSch * 2) / 2 / 10)) ' point 5
        pnt6 = oTG.CreatePoint2d((oFlangeLenght / 10), (oPipeDia / 2 / 10)) ' point 6
        pnt7 = oTG.CreatePoint2d((oPipeSch / 10), (oPipeDia / 2 / 10)) ' point 7
        pnt8 = oTG.CreatePoint2d((oPipeSch / 10), (oPipeDia / 2 / 10) - (oPipeSch * 2 / 10)) ' point 8


        ln1 = oSketch.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, pnt7)
        ln7 = oSketch.SketchLines.AddByTwoPoints(ln6.EndSketchPoint, pnt8)
        ln8 = oSketch.SketchLines.AddByTwoPoints(ln7.EndSketchPoint, ln1.StartSketchPoint)


        oWorkAxis = oDef.WorkAxes.Item(1)
        oAngle = pi * 2
        oProfile = oSketch.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile, oWorkAxis, oAngle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "QRV"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(2)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")

        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(8)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")

        Dim entity3 As Edge
        entity3 = oDef.SurfaceBodies.Item(1).Edges.Item(6)
        attribSets = entity3.AttributeSets
        attribSet = attribSets.Add("InsertEdgesC")

        Select Case oMaterial
            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)




        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If


FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)


        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
        End If

        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesC")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
        End If

        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If
EndRoutine:
        Me.Show()
    End Sub




    Private Sub PlacePVCReducingBush()
        '------------------------------------------------
        '
        '          PLACING PVC REDUCING BUSH
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oProfile As Profile
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        Dim oWPlane As WorkPlane
        Dim oSketch As PlanarSketch
        Dim oWorkAxis As Object
        Dim oRevFeature As RevolveFeature
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine
        Dim ln7 As SketchLine
        Dim ln8 As SketchLine
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim pnt7 As Point2d
        Dim pnt8 As Point2d


        'Aanmaken part document zonder template

        oWPlane = oDef.WorkPlanes.Item(3)
        oSketch = oDef.Sketches.Add(oWPlane)

        pnt1 = oTG.CreatePoint2d(0, oBranchDia / 2 / 10) ' point 1
        pnt2 = oTG.CreatePoint2d(0, (oPipeDia + oPipeSch * 2) / 2 / 10) ' point 2
        pnt3 = oTG.CreatePoint2d(oPipeSch / 10, (oPipeDia + oPipeSch * 2) / 2 / 10) ' point 3
        pnt4 = oTG.CreatePoint2d(oPipeSch / 10, oPipeDia / 2 / 10) ' point 4
        pnt5 = oTG.CreatePoint2d((oPipeSch + oSockLenght) / 10, oPipeDia / 2 / 10) ' point 5
        pnt6 = oTG.CreatePoint2d((oPipeSch + oSockLenght) / 10, (oBranchDia - oPipeSch * 2) / 2 / 10) ' point 6
        pnt7 = oTG.CreatePoint2d((oSockLenght) / 10, (oBranchDia - oPipeSch * 2) / 2 / 10) ' point 7
        pnt8 = oTG.CreatePoint2d((oSockLenght) / 10, oBranchDia / 2 / 10) ' point 8


        ln1 = oSketch.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, pnt7)
        ln7 = oSketch.SketchLines.AddByTwoPoints(ln6.EndSketchPoint, pnt8)
        ln8 = oSketch.SketchLines.AddByTwoPoints(ln7.EndSketchPoint, ln1.StartSketchPoint)


        oWorkAxis = oDef.WorkAxes.Item(1)
        oProfile = oSketch.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddFull(oProfile, oWorkAxis, PartFeatureOperationEnum.kJoinOperation)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "DIV"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(1)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")

        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(6)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")

        Select Case oMaterial
            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)




        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True


        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If


FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)


        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
        End If
        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If
EndRoutine:
        Me.Show()
    End Sub




    Private Sub PlacePVCFlangeSW()
        '------------------------------------------------
        '
        '          PLACING PVC FLANGE
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oFrontPlane As WorkPlane
        Dim oSketch02 As PlanarSketch
        Dim oCenterPoint2 As SketchPoint
        Dim oCircle3 As SketchCircle
        Dim oWorkAx1 As Object
        Dim oProfile2 As Profile
        Dim oExtrDef2 As ExtrudeDefinition
        Dim oExtrusion2 As ExtrudeFeature
        Dim oProfile As Profile
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy
        Dim Angle As Double

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------




        '-----------------BEGIN


        '-----------------EIND





StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry

        pi = Math.Acos(-1) 'radians van 45° hoek
        Dim oWPlane As WorkPlane
        Dim oSketch As PlanarSketch
        Dim oWorkAxis As Object
        Dim oRevFeature As RevolveFeature
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine
        Dim ln7 As SketchLine
        Dim ln8 As SketchLine
        Dim ln9 As SketchLine
        Dim ln10 As SketchLine
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim pnt7 As Point2d
        Dim pnt8 As Point2d
        Dim pnt9 As Point2d
        Dim pnt10 As Point2d

        'Aanmaken part document zonder template

        oWPlane = oDef.WorkPlanes.Item(3)
        oSketch = oDef.Sketches.Add(oWPlane)
        pnt1 = oTG.CreatePoint2d(0, (oPipeDia / 2 / 10) - (oPipeSch / 10)) ' point 1
        pnt2 = oTG.CreatePoint2d(0, (oFlangeKDia - oFlangeBoltHoleDia - 5) / 2 / 10) ' point 2
        pnt3 = oTG.CreatePoint2d(0.3, (oFlangeKDia - oFlangeBoltHoleDia - 5) / 2 / 10) ' point 3
        pnt4 = oTG.CreatePoint2d(0.3, oFlangeDia / 2 / 10) ' point 4
        pnt5 = oTG.CreatePoint2d(0.3 + oFlangeThick / 10, oFlangeDia / 2 / 10) ' point 5
        pnt6 = oTG.CreatePoint2d(0.3 + oFlangeThick / 10, (oFlangeKDia - (oFlangeDia - oFlangeKDia)) / 2 / 10) ' point 6
        pnt7 = oTG.CreatePoint2d((oFlangeLenght / 10), (oPipeDia / 2 / 10) + (oPipeSch / 10)) ' point 7
        pnt8 = oTG.CreatePoint2d((oFlangeLenght / 10), (oPipeDia / 2 / 10)) ' point 8
        pnt9 = oTG.CreatePoint2d((oFlangeLenght / 10) - oSockLenght / 10, (oPipeDia / 2 / 10)) ' point 8
        pnt10 = oTG.CreatePoint2d((oFlangeLenght / 10) - oSockLenght / 10, (oPipeDia / 2 / 10) - (oPipeSch / 10)) ' point 8

        ln1 = oSketch.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, pnt7)
        ln7 = oSketch.SketchLines.AddByTwoPoints(ln6.EndSketchPoint, pnt8)
        ln8 = oSketch.SketchLines.AddByTwoPoints(ln7.EndSketchPoint, pnt9)
        ln9 = oSketch.SketchLines.AddByTwoPoints(ln8.EndSketchPoint, pnt10)
        ln10 = oSketch.SketchLines.AddByTwoPoints(ln9.EndSketchPoint, ln1.StartSketchPoint)


        oWorkAxis = oDef.WorkAxes.Item(1)
        Angle = pi * 2
        oProfile = oSketch.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile, oWorkAxis, Angle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)


        'oProfile = oSketch.Profiles.AddForSolid
        'oRevFeature = oDef.Features.RevolveFeatures.AddFull(oProfile, oWorkAxis, PartFeatureOperationEnum.kJoinOperation)

        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(10)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")
        'Dim attrib As Attribute

        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(3)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")

        Dim entity3 As Face
        entity3 = oDef.SurfaceBodies.Item(1).Faces.Item(6)
        attribSets = entity3.AttributeSets
        attribSet = attribSets.Add("BoltFace")

        oFrontPlane = oDef.WorkPlanes.Item(1)
        oSketch02 = oDef.Sketches.Add(oFrontPlane) 'Maakt de schets aan
        'oCircles2 = oSketch02.SketchCircles
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(Math.Sin(360 * pi / 180 / oFlangeBoltNumber / 2) * oFlangeKDia / 2 / 10, Math.Cos(360 * pi / 180 / oFlangeBoltNumber / 2) * oFlangeKDia / 2 / 10), False)
        oCircle3 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint2, oFlangeBoltHoleDia / 10 / 2) 'Teken circel 1
        oProfile2 = oSketch02.Profiles.AddForSolid 'Maakt het profiel van het eerste gat
        oExtrDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kCutOperation)
        Call oExtrDef2.SetDistanceExtent(oFlangeThick + 0.3 / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        oExtrusion2 = oDef.Features.ExtrudeFeatures.Add(oExtrDef2)
        oWorkAx1 = oDef.WorkAxes.Item(1)
        Dim bltpattrn As ObjectCollection
        bltpattrn = oInvApp.TransientObjects.CreateObjectCollection
        Call bltpattrn.Add(oDef.Features("Extrusion1"))
        Dim oDeg As Double
        oDeg = 10 * 0.0174532925
        Call oDef.Features.CircularPatternFeatures.Add(bltpattrn, oWorkAx1, True, oFlangeBoltNumber, 360 / oFlangeBoltNumber * pi / 180, False, PatternComputeTypeEnum.kIdenticalCompute)


        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "FDV"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing



        Select Case oMaterial
            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True


        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If

FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)


        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
        End If
        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If
EndRoutine:
        Me.Show()
    End Sub





    Private Sub PlacePVCCaps()
        '------------------------------------------------
        '
        '          PLACING PVC CAPS
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oProfile As Profile
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        Dim oWPlane As WorkPlane
        Dim oSketch As PlanarSketch
        Dim oWorkAxis As Object
        Dim Angle As Double
        Dim oRevFeature As RevolveFeature
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim arc1 As SketchArc
        Dim arc2 As SketchArc
        Dim arc3 As SketchArc
        Dim arc4 As SketchArc
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim pnt7 As Point2d
        Dim pnt8 As Point2d
        Dim pnt9 As Point2d
        Dim pnt10 As Point2d
        Dim pnt11 As Point2d
        Dim pnt12 As Point2d

        'Aanmaken part document zonder template

        oWPlane = oDef.WorkPlanes.Item(3)
        oSketch = oDef.Sketches.Add(oWPlane)

        pnt1 = oTG.CreatePoint2d(0, 0) ' point 1
        pnt2 = oTG.CreatePoint2d((oPipeDia + oPipeSch * 2) / 10 * 0.020913, (oPipeDia + oPipeSch * 2) / 10 * 0.19101) ' point 2
        pnt3 = oTG.CreatePoint2d((oPipeDia + oPipeSch * 2) / 10 * 0.072975, (oPipeDia + oPipeSch * 2) / 10 * 0.375) ' point 3
        pnt4 = oTG.CreatePoint2d((oPipeDia + oPipeSch * 2) / 10 * 0.145577, (oPipeDia + oPipeSch * 2) / 10 * 0.46583) ' point 4
        pnt5 = oTG.CreatePoint2d((oPipeDia + oPipeSch * 2) / 10 * 0.25838, (oPipeDia + oPipeSch * 2) / 10 * 0.5) ' point 5
        pnt6 = oTG.CreatePoint2d(oCapLenght / 10, (oPipeDia + oPipeSch * 2) / 10 * 0.5) ' point 6
        pnt7 = oTG.CreatePoint2d(oPipeSch / 10, 0) ' point 7
        pnt8 = oTG.CreatePoint2d((oPipeDia + oPipeSch * 2) / 10 * 0.020913 + (oPipeSch / 10 * 0.98156), (oPipeDia + oPipeSch * 2) / 10 * 0.19101 - (oPipeSch / 10 * 0.192)) ' point 8
        pnt9 = oTG.CreatePoint2d(((oPipeDia + oPipeSch * 2) / 10 * 0.072975) + (oPipeSch / 10 * 0.92702), ((oPipeDia + oPipeSch * 2) / 10 * 0.375) - (oPipeSch / 10 * 0.375)) ' point 9
        pnt10 = oTG.CreatePoint2d(((oPipeDia + oPipeSch * 2) / 10 * 0.145577) + (oPipeSch / 10 * 0.55902), ((oPipeDia + oPipeSch * 2) / 10 * 0.46583) - (oPipeSch / 10 * 0.82916)) ' point 10
        pnt11 = oTG.CreatePoint2d((oPipeDia + oPipeSch * 2) / 10 * 0.25838, ((oPipeDia + oPipeSch * 2) / 10 * 0.5) - (oPipeSch / 10)) ' point 11
        pnt12 = oTG.CreatePoint2d(oCapLenght / 10, ((oPipeDia + oPipeSch * 2) / 10 * 0.5) - (oPipeSch / 10)) ' point 12

        ln1 = oSketch.SketchLines.AddByTwoPoints(pnt7, pnt1)
        ln2 = oSketch.SketchLines.AddByTwoPoints(pnt5, pnt6)
        ln3 = oSketch.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt12)
        ln4 = oSketch.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt11)

        arc1 = oSketch.SketchArcs.AddByThreePoints(ln1.EndSketchPoint, pnt2, pnt3)
        arc2 = oSketch.SketchArcs.AddByThreePoints(arc1.StartSketchPoint, pnt4, ln2.StartSketchPoint)
        arc3 = oSketch.SketchArcs.AddByThreePoints(ln1.StartSketchPoint, pnt8, pnt9)
        arc4 = oSketch.SketchArcs.AddByThreePoints(arc3.StartSketchPoint, pnt10, ln4.EndSketchPoint)

        oWorkAxis = oDef.WorkAxes.Item(1)
        Angle = pi * 2
        oProfile = oSketch.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile, oWorkAxis, Angle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "CIV"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(3)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdges")
        'Dim attrib As Attribute

        Select Case oMaterial
            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True


        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdges")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, False, 0)
EndRoutine:
        Me.Show()
    End Sub

    Private Sub PlacePVCUnion()


        '------------------------------------------------
        '
        '          PLACING PVC UNION
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oSketch01 As PlanarSketch
        Dim oSketch02 As PlanarSketch
        Dim oSketch03 As PlanarSketch
        Dim oCenterPoint2 As SketchPoint
        Dim oCenterPoint3 As SketchPoint
        Dim oWorkAxis As Object
        Dim oProfile1 As Profile
        Dim oProfile2 As Profile
        Dim oProfile3 As Profile
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine
        Dim ln7 As SketchLine
        Dim ln8 As SketchLine
        Dim ln9 As SketchLine
        Dim ln10 As SketchLine
        Dim ln11 As SketchLine
        Dim ln12 As SketchLine
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim pnt7 As Point2d
        Dim pnt8 As Point2d
        Dim pnt9 As Point2d
        Dim pnt10 As Point2d
        Dim pnt11 As Point2d
        Dim pnt12 As Point2d
        Dim oRevFeature As RevolveFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim TeeEdgeProxy As EdgeProxy
        Dim Angle As Double
        Dim pi As Double = Math.Acos(-1)

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:


        oInvApp.ScreenUpdating = False

        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry

        'oCenterPlane1 = oDef.WorkPlanes.Item(3)
        oSketch01 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3)) 'Maakt de schets aan
        'oCenterPoint2 = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles2
        pnt1 = oTG.CreatePoint2d(oUnionLenght / 2 / 10, ((oPipeDia + oPipeSch * 2) / 10) / 2) ' point 1
        pnt2 = oTG.CreatePoint2d(oUnionLenght / 2 / 10, ((oPipeDia) / 10) / 2) ' point 2
        pnt3 = oTG.CreatePoint2d((oUnionLenght - oSockLenght * 2) / 2 / 10, ((oPipeDia) / 10) / 2) ' point 3
        pnt4 = oTG.CreatePoint2d((oUnionLenght - oSockLenght * 2) / 2 / 10, ((oPipeDia - oPipeSch * 2) / 10) / 2) ' point 4
        pnt5 = oTG.CreatePoint2d((-oUnionLenght + oSockLenght * 2) / 2 / 10, ((oPipeDia - oPipeSch * 2) / 10) / 2) ' point 5
        pnt6 = oTG.CreatePoint2d((-oUnionLenght + oSockLenght * 2) / 2 / 10, ((oPipeDia) / 10) / 2) ' point 6
        pnt7 = oTG.CreatePoint2d(-oUnionLenght / 2 / 10, ((oPipeDia) / 10) / 2) ' point 7
        pnt8 = oTG.CreatePoint2d(-oUnionLenght / 2 / 10, ((oPipeDia + oPipeSch * 2) / 10) / 2) ' point 8
        pnt9 = oTG.CreatePoint2d(-oUnionLenght / 6 / 10, ((oPipeDia + oPipeSch * 2) / 10) / 2) ' point 9
        pnt10 = oTG.CreatePoint2d(-oUnionLenght / 6 / 10, ((oPipeDia * 1.5) / 10) / 2) ' point 10
        pnt11 = oTG.CreatePoint2d(oUnionLenght / 6 / 10, ((oPipeDia * 1.5) / 10) / 2) ' point 11
        pnt12 = oTG.CreatePoint2d(oUnionLenght / 6 / 10, ((oPipeDia + oPipeSch * 2) / 10) / 2) ' point 12

        ln1 = oSketch01.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch01.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch01.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch01.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch01.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch01.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, pnt7)

        ln7 = oSketch01.SketchLines.AddByTwoPoints(ln6.EndSketchPoint, pnt8)
        ln8 = oSketch01.SketchLines.AddByTwoPoints(ln7.EndSketchPoint, pnt9)
        ln9 = oSketch01.SketchLines.AddByTwoPoints(ln8.EndSketchPoint, pnt10)
        ln10 = oSketch01.SketchLines.AddByTwoPoints(ln9.EndSketchPoint, pnt11)
        ln11 = oSketch01.SketchLines.AddByTwoPoints(ln10.EndSketchPoint, pnt12)
        ln12 = oSketch01.SketchLines.AddByTwoPoints(ln11.EndSketchPoint, ln1.StartSketchPoint)
        '-------------------


        oWorkAxis = oDef.WorkAxes.Item(1)
        Angle = pi * 2
        oProfile1 = oSketch01.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile1, oWorkAxis, Angle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)



        'oWorkAxis = oDef.WorkAxes.Item(1)
        'oProfile1 = oSketch01.Profiles.AddForSolid
        'oRevFeature = oDef.Features.RevolveFeatures.AddFull(oProfile1, oWorkAxis, PartFeatureOperationEnum.kNewBodyOperation)

        oSketch02 = oDef.Sketches.Add(oDef.WorkPlanes.Item(1))
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, (oPipeDia + oPipeSch * 2) / 10 / 2), False)
        oCircle1 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint2, 2 / 15)
        oProfile2 = oSketch02.Profiles.AddForSolid



        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(8)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")

        '-------------------


        Dim oExtrDef As ExtrudeDefinition
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef.SetDistanceExtent(oUnionLenght / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        Dim oExtrusion1 As ExtrudeFeature
        oExtrusion1 = oDef.Features.ExtrudeFeatures.Add(oExtrDef)

        oSketch03 = oDef.Sketches.Add(oDef.WorkPlanes.Item(1))
        oCenterPoint3 = oSketch03.SketchPoints.Add(oTG.CreatePoint2d(0, ((oPipeDia * 1.5) / 10) / 2), False)
        oCircle2 = oSketch03.SketchCircles.AddByCenterRadius(oCenterPoint3, 2 / 10)
        oProfile3 = oSketch03.Profiles.AddForSolid

        Dim oExtrDef2 As ExtrudeDefinition
        oExtrDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile3, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef2.SetDistanceExtent(oUnionLenght / 30, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        Dim oExtrusion2 As ExtrudeFeature
        oExtrusion2 = oDef.Features.ExtrudeFeatures.Add(oExtrDef2)

        Dim oRibptrn As ObjectCollection
        oRibptrn = oInvApp.TransientObjects.CreateObjectCollection
        Call oRibptrn.Add(oDef.Features("Extrusion1"))
        Call oRibptrn.Add(oDef.Features("Extrusion2"))
        Dim oNumberRibs As Object = Math.Round(oPipeDia * pi / 15)
        Call oDef.Features.CircularPatternFeatures.Add(oRibptrn, oWorkAxis, True, oNumberRibs, 360 * pi / 180, True, PatternComputeTypeEnum.kIdenticalCompute)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits


        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "BIV"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------

        Select Case oMaterial
            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.CircularPatternFeatures.Item(1).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        '-----------------------------------

        '-----------------------------------
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If
        Me.Hide()





        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        TeeEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, TeeEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, TeeEdgeProxy, True, 0)

EndRoutine:
        Me.Show()
    End Sub

    '- - - - -- - - - - -- - - - - -- - - - -- - - - --  - - - - - --  -- - - 

    'Change pipelenght

    '- - - - -- - - - - -- - - - - -- - - - -- - - - --  - - - - - --  -- - - 

    Public Sub ChangePipeLenght()

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        Dim oOldPipe As PartDocument
        Dim oNewPipe As PartDocument
        Dim oPipeSide As FaceProxy
        oPipeSide = oInvApp.CommandManager.Pick(SelectionFilterEnum.kPartFaceCylindricalFilter, "Select Pipe.")
        Update()

        If oPipeSide Is Nothing Then
            GoTo EndRoutine
        End If





        oOldPipe = oPipeSide.Parent.CreatedByFeature.Parent.Document
        If Microsoft.VisualBasic.Left(oOldPipe.PropertySets.Item("Design Tracking Properties").ItemByPropId(5).Value, 4) = "Pipe" Or Microsoft.VisualBasic.Left(oOldPipe.PropertySets.Item("Design Tracking Properties").ItemByPropId(5).Value, 4) = "BranchPipe" Then
        Else
            MessageBox.Show("This Is Not a Pipe")
            MessageBox.Show(oOldPipe.PropertySets.Item("Design Tracking Properties").ItemByPropId(5).Value)
            GoTo EndRoutine
        End If

        oOldPipeLenght = (oOldPipe.ComponentDefinition.Parameters.ModelParameters.Item(1).ModelValue) * 10

        ' MessageBox.Show(Microsoft.VisualBasic.Left(oOldPipe.PropertySets.Item("Design Tracking Properties").ItemByPropId(5).Value, 4))
        ' MessageBox.Show("Current Lenght " & oOldPipeLenght & "mm")
        Dim oOldPipeOcc As ComponentOccurrence
        oOldPipeOcc = oPipeSide.ContainingOccurrence

        frmModifyPipeLenght.LblCurrentPipeLenght.Text = oOldPipeLenght & "mm"
        frmModifyPipeLenght.cbxNewPipeLenght.Text = oOldPipeLenght
        frmModifyPipeLenght.ShowDialog()



        '  MessageBox.Show("New Lenght " & oNewPipeLenght & "mm")
        Dim CPLdescription As String = Microsoft.VisualBasic.Left(oOldPipe.PropertySets.Item("Design Tracking Properties").ItemByPropId(5).Value, 4)

        Dim oOldfileName As String = oOldPipe.File.FullFileName
        '  MessageBox.Show(oOldfileName)
        Dim Stringlenght As Integer
        Stringlenght = Len(oOldfileName)
        Dim PosLastUnderscore As Integer
        PosLastUnderscore = oOldfileName.LastIndexOf("_")
        Dim oNewFileName As String
        oNewFileName = Microsoft.VisualBasic.Left(oOldfileName, PosLastUnderscore + 1) & oNewPipeLenght & Microsoft.VisualBasic.Right(oOldfileName, 4)
        ' MsgBox(oNewFileName)
        Dim oOldPartNumber As String = oOldPipe.PropertySets.Item("Design Tracking Properties").ItemByPropId(5).Value
        ' MessageBox.Show("Oude partnummer " & oOldPartNumber)
        Dim oStrLen As Integer = Len(oOldPartNumber)
        Dim oPosmm As Integer = oOldPartNumber.IndexOf("mm")
        Dim oPosx As Integer = oOldPartNumber.LastIndexOf("x")
        'Dim oNewPartNumber As String = Microsoft.VisualBasic.Left(oOldPartNumber, oPosx + 1) & oNewPipeLenght & Microsoft.VisualBasic.Right(oOldPartNumber, oStrLen - oPosmm)
        'MessageBox.Show("Nieuwe partnummer " & oNewPartNumber)
        ' ------------------------------------------test of file al bestaat misschien beter reeds voordien al doen 
        If Dir(oNewFileName) = "" Then
            GoTo SavePart
        Else
            GoTo SkipSavePart
        End If
SavePart:
        oInvApp.ScreenUpdating = False
        oOldPipe = oInvApp.Documents.Open(oOldfileName)

        oOldPipe.SaveAs(oNewFileName, True)

        oOldPipe.Close()
        oNewPipe = oInvApp.Documents.Open(oNewFileName)
        oNewPipe.ComponentDefinition.Parameters.Item("PipeLenght").Value = oNewPipeLenght / 10
        oNewPipe.PropertySets.Item("Design Tracking Properties").ItemByPropId(5).Value = oOldPartNumber
        oNewPipe.Save()
        oNewPipe.Close()
        oInvApp.ScreenUpdating = True


SkipSavePart:
        '------------------------------------------------------Replace the old pipe
        Call oOldPipeOcc.Replace(oNewFileName, False)
EndRoutine:
    End Sub

    Private Sub btnPipeLenghtChange_Click(sender As Object, e As EventArgs) Handles btnPipeLenghtChange.Click
        ChangePipeLenght()
    End Sub

    Private Sub PlaceHDPE45grElbow()
        '------------------------------------------------
        '
        '          PLACING HDPE 45 gr ELBOWS 
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oCenterPlane As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oSketch02 As PlanarSketch
        Dim oSketch03 As PlanarSketch
        Dim oCenterPoint01 As SketchPoint
        Dim oCenterPoint02 As SketchPoint
        Dim oCenterPoint03 As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oCircle3 As SketchCircle
        Dim oCircle4 As SketchCircle
        Dim oCircle5 As SketchCircle
        Dim oCircle6 As SketchCircle
        Dim oWorkAx As Object
        Dim oProfile01 As Profile
        Dim oProfile02 As Profile
        Dim oProfile03 As Profile
        Dim oRevFeature As RevolveFeature
        Dim oExtrDef01 As ExtrudeDefinition
        Dim oExtrDef02 As ExtrudeDefinition
        Dim oExtrudeFeature01 As ExtrudeFeature
        Dim oExtrudeFeature02 As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        oElbowAngle = (45 * pi / 180)
        oCenterPlane = oDef.WorkPlanes.Item(3) 'Kies Plane XY (3)om op te tekenen
        oSketch01 = oDef.Sketches.Add(oCenterPlane) 'Maakt de schets aan
        oCenterPoint01 = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, (oElbowRadius / 10)), False) 'Maakt het middelpunt van de circles
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint01, oPipeDia / 10 / 2) 'Teken circel 1
        oCircle2 = oCircles.AddByCenterRadius(oCenterPoint01, ((oPipeDia - (oPipeSch * 2)) / 10) / 2) 'Teken circel 2
        oWorkAx = oDef.WorkAxes.Item(1)
        oProfile01 = oSketch01.Profiles.AddForSolid 'Maakt het profiel om te revolven
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile01, oWorkAx, oElbowAngle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------


        oSketch02 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3))
        oCenterPoint02 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, (oElbowRadius / 10)), False)
        oCircle3 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint02, ((oPipeDia - (oPipeSch * 2)) / 10) / 2) 'Teken circel 3
        oCircle4 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint02, (oPipeDia / 10) / 2) 'Teken circel 4
        oProfile02 = oSketch02.Profiles.AddForSolid 'Maakt het profiel om te extruden
        oExtrDef01 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile02, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef01.SetDistanceExtent((oElbowLenght - oElbowRadius) / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        oExtrudeFeature01 = oDef.Features.ExtrudeFeatures.Add(oExtrDef01)

        oSketch03 = oDef.Sketches.Add(oRevFeature.EndFaces.Item(1))
        oCenterPoint03 = oSketch03.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircle5 = oSketch03.SketchCircles.AddByCenterRadius(oCenterPoint03, ((oPipeDia - (oPipeSch * 2)) / 10) / 2) 'Teken circel 3
        oCircle6 = oSketch03.SketchCircles.AddByCenterRadius(oCenterPoint03, (oPipeDia / 10) / 2) 'Teken circel 4
        oProfile03 = oSketch03.Profiles.AddForSolid 'Maakt het profiel om te extruden
        oExtrDef02 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile03, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef02.SetDistanceExtent((oElbowLenght - oElbowRadius) / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        oExtrudeFeature02 = oDef.Features.ExtrudeFeatures.Add(oExtrDef02)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(3)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdges")

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "AHAS"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing


        Select Case oMaterial
            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrudeFeature01.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrudeFeature02.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdges")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
EndRoutine:
        Me.Show()
    End Sub


    Private Sub PlaceHDPEElbow()
        '------------------------------------------------
        '
        '          PLACING HDPE ELBOWS 
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oCenterPlane As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oSketch02 As PlanarSketch
        Dim oSketch03 As PlanarSketch
        Dim oCenterPoint01 As SketchPoint
        Dim oCenterPoint02 As SketchPoint
        Dim oCenterPoint03 As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oCircle3 As SketchCircle
        Dim oCircle4 As SketchCircle
        Dim oCircle5 As SketchCircle
        Dim oCircle6 As SketchCircle
        Dim oWorkAx As Object
        Dim oProfile01 As Profile
        Dim oProfile02 As Profile
        Dim oProfile03 As Profile
        Dim oRevFeature As RevolveFeature
        Dim oExtrDef01 As ExtrudeDefinition
        Dim oExtrDef02 As ExtrudeDefinition
        Dim oExtrudeFeature01 As ExtrudeFeature
        Dim oExtrudeFeature02 As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        'Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        oElbowAngle = (90 * pi / 180)
        oCenterPlane = oDef.WorkPlanes.Item(3) 'Kies Plane XY (3)om op te tekenen
        oSketch01 = oDef.Sketches.Add(oCenterPlane) 'Maakt de schets aan
        oCenterPoint01 = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, (oElbowRadius / 10)), False) 'Maakt het middelpunt van de circles
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint01, oPipeDia / 10 / 2) 'Teken circel 1
        oCircle2 = oCircles.AddByCenterRadius(oCenterPoint01, ((oPipeDia - (oPipeSch * 2)) / 10) / 2) 'Teken circel 2
        oWorkAx = oDef.WorkAxes.Item(1)
        oProfile01 = oSketch01.Profiles.AddForSolid 'Maakt het profiel om te revolven
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile01, oWorkAx, oElbowAngle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)

        oSketch02 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3))
        oCenterPoint02 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, (oElbowRadius / 10)), False)
        oCircle3 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint02, ((oPipeDia - (oPipeSch * 2)) / 10) / 2) 'Teken circel 3
        oCircle4 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint02, (oPipeDia / 10) / 2) 'Teken circel 4
        oProfile02 = oSketch02.Profiles.AddForSolid 'Maakt het profiel om te extruden
        oExtrDef01 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile02, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef01.SetDistanceExtent((oElbowLenght - oElbowRadius) / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        oExtrudeFeature01 = oDef.Features.ExtrudeFeatures.Add(oExtrDef01)

        oSketch03 = oDef.Sketches.Add(oRevFeature.EndFaces.Item(1))
        oCenterPoint03 = oSketch03.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircle5 = oSketch03.SketchCircles.AddByCenterRadius(oCenterPoint03, ((oPipeDia - (oPipeSch * 2)) / 10) / 2) 'Teken circel 3
        oCircle6 = oSketch03.SketchCircles.AddByCenterRadius(oCenterPoint03, (oPipeDia / 10) / 2) 'Teken circel 4
        oProfile03 = oSketch03.Profiles.AddForSolid 'Maakt het profiel om te extruden
        oExtrDef02 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile03, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef02.SetDistanceExtent((oElbowLenght - oElbowRadius) / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        oExtrudeFeature02 = oDef.Features.ExtrudeFeatures.Add(oExtrDef02)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        Dim attribSets As AttributeSets
        Dim attribSet As AttributeSet
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(3)
        attribSets = entity.AttributeSets
        attribSet = attribSets.Add("ElbwInsA")
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(7)
        attribSets = entity.AttributeSets
        attribSet = attribSets.Add("ElbwInsB")

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "SAS"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing


        Select Case oMaterial
            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrudeFeature01.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrudeFeature02.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        Try
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("ElbwInsA")
            elbowEdge = attrSets.Item(1).Parent.Parent
        Catch ex As Exception
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdges")
            elbowEdge = attrSets.Item(1).Parent.Parent
        End Try







        ' attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdges")
        ' elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)





        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 

        'Start Angle Constraint aligned ELBOW

        'Define the horizontal and vertical plane of the part


        pi = Math.Acos(-1)

        'Proxyplane maken van het werkvlak paralel met het insertvlak

        Dim oCrossPlane As WorkPlane
        oCrossPlane = Nothing
        Dim oCrossPlaneProxy As WorkPlaneProxy
        oCrossPlaneProxy = Nothing
        oCrossPlane = elbowDoc.ComponentDefinition.WorkPlanes(2)
        Call elbowOcc.CreateGeometryProxy(oCrossPlane, oCrossPlaneProxy)

        'bepaal de hoek tussen het insertvlak en één der werkvlakken van de assembly in graden

        Dim oOrientXY As Double
        Dim oOrientXZ As Double
        Dim oOrientYZ As Double

        oOrientXY = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(3), oCrossPlaneProxy) / pi * 180)
        oOrientXZ = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(2), oCrossPlaneProxy) / pi * 180)
        oOrientYZ = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(1), oCrossPlaneProxy) / pi * 180)

        'oOrient is public gedeclareerd zie begin

        oOrient = "Not aligned"

        'Check the orientation of the part

        If oOrientXY = 90 Then
            oOrient = "XYaxis"
        End If
        If oOrientXZ = 90 Then
            oOrient = "XZaxis"
        End If
        If oOrientYZ = 90 Then
            oOrient = "YZaxis"
        End If

        'MsgBox(oOrient)


        oElbowInsertAngle = 0

        'Afhangkelijk van welk vlak er haaks tov het insertvlak staat wordt er een constraint gemaakt met middenvlak (werkvlak1) van de elbow

        If oOrient = "XYaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(3), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If

        End If

        If oOrient = "XZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(2), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If

        If oOrient = "YZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(1), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If
        'END TEST ROTATION ELBOW
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 




EndRoutine:
        Me.Show()
    End Sub

    Private Sub PlaceHDPEStubEnds()
        '------------------------------------------------
        '
        '          PLACING HDPE STUB ENDS
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oProfile As Profile
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        Dim oWPlane As WorkPlane
        Dim oSketch As PlanarSketch
        Dim oWorkAxis As Object
        Dim oRevFeature As RevolveFeature
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim oAngle As Double

        'Aanmaken part document zonder template

        oWPlane = oDef.WorkPlanes.Item(3)
        oSketch = oDef.Sketches.Add(oWPlane)


        pnt1 = oTG.CreatePoint2d(0, (oPipeDia / 2 / 10) - (oPipeSch / 10)) ' point 1
        pnt2 = oTG.CreatePoint2d(0, (oFlangeKDia - oFlangeBoltHoleDia - 5) / 2 / 10) ' point 2
        pnt3 = oTG.CreatePoint2d((oFlangeStubThick / 10), (oFlangeKDia - oFlangeBoltHoleDia - 5) / 2 / 10) ' point 3
        pnt4 = oTG.CreatePoint2d((oFlangeStubThick / 10), (oPipeDia / 2 / 10)) ' point 4
        pnt5 = oTG.CreatePoint2d((oFlangeLenght / 10), (oPipeDia / 2 / 10)) ' point 5
        pnt6 = oTG.CreatePoint2d((oFlangeLenght / 10), (oPipeDia / 2 / 10) - (oPipeSch / 10)) ' point 6


        ln1 = oSketch.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, ln1.StartSketchPoint)

        oWorkAxis = oDef.WorkAxes.Item(1)
        oAngle = pi * 2
        oProfile = oSketch.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile, oWorkAxis, oAngle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits



        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "QAS"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------





        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(2)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")

        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(6)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")

        Dim entity3 As Edge
        entity3 = oDef.SurfaceBodies.Item(1).Edges.Item(4)
        attribSets = entity3.AttributeSets
        attribSet = attribSets.Add("InsertEdgesC")


        Select Case oMaterial
            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True


        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If


FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)


        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
        End If
        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesC")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
        End If
        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If
EndRoutine:
        Me.Show()
    End Sub

    Private Sub PlacePVCMaleAdapter()
        '------------------------------------------------
        '
        '          PLACING PVC MALE ADAPTER
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oProfile As Profile
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        Dim oWPlane As WorkPlane
        Dim oSketch As PlanarSketch
        Dim oWorkAxis As Object
        Dim oRevFeature As RevolveFeature
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine
        Dim ln7 As SketchLine
        Dim ln8 As SketchLine
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim pnt7 As Point2d
        Dim pnt8 As Point2d
        Dim oAngle As Double

        'Aanmaken part document zonder template

        oWPlane = oDef.WorkPlanes.Item(3)
        oSketch = oDef.Sketches.Add(oWPlane)

        pnt1 = oTG.CreatePoint2d(0, (oBranchDia / 2 / 10) - (oPipeSch * 2 / 10))
        pnt2 = oTG.CreatePoint2d(0, oBranchDia / 2 / 10)
        pnt3 = oTG.CreatePoint2d(oBranchDia / 2 / 10, oBranchDia / 2 / 10)
        pnt4 = oTG.CreatePoint2d(oBranchDia / 2 / 10, (oPipeDia + oPipeSch * 2) / 2 / 10)
        pnt5 = oTG.CreatePoint2d((oBranchDia / 2 + oSockLenght + oPipeSch * 2) / 10, (oPipeDia + oPipeSch * 2) / 2 / 10)
        pnt6 = oTG.CreatePoint2d((oBranchDia / 2 + oSockLenght + oPipeSch * 2) / 10, (oPipeDia) / 2 / 10)
        pnt7 = oTG.CreatePoint2d((oBranchDia + oPipeSch * 2) / 2 / 10, (oPipeDia) / 2 / 10)
        pnt8 = oTG.CreatePoint2d((oBranchDia + oPipeSch * 2) / 2 / 10, (oBranchDia / 2 / 10) - (oPipeSch * 2 / 10))


        ln1 = oSketch.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, pnt7)
        ln7 = oSketch.SketchLines.AddByTwoPoints(ln6.EndSketchPoint, pnt8)
        ln8 = oSketch.SketchLines.AddByTwoPoints(ln7.EndSketchPoint, ln1.StartSketchPoint)

        oAngle = 2 * pi
        oWorkAxis = oDef.WorkAxes.Item(1)
        oProfile = oSketch.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile, oWorkAxis, oAngle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)

        ' Set a reference to the ThreadFeatures collection object.
        Dim oThreadFeatures As ThreadFeatures
        oThreadFeatures = oDef.Features.ThreadFeatures

        ' Define all of the thread information.
        Dim oThreadInfo As ThreadInfo
        oThreadInfo = oThreadFeatures.CreateTaperedThreadInfo(False, True, "ISO Taper External", "R 1")

        ' Get the face the thread will be applied to.
        Dim oFace As Face
        oFace = oRevFeature.SideFaces.Item(7)

        ' Get the edge the thread extent will be measured from.
        Dim oEdge As Edge
        oEdge = oRevFeature.SideFaces.Item(7).Edges.Item(1)

        ' Create the thread feature.
        Dim oThreadFeature As ThreadFeature
        oThreadFeature = oThreadFeatures.Add(oFace, oEdge, oThreadInfo, False, True)

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(3)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")

        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(8)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")


        Dim oCenterPoint2 As SketchPoint
        Dim oCircle1 As SketchCircle
        Dim oSketch02 As PlanarSketch
        Dim oProfile2 As Profile
        Dim oWorkPlane As WorkPlane


        oWorkPlane = oDef.WorkPlanes.AddByPlaneAndOffset(oDef.WorkPlanes.Item(1), oBranchDia / 2 / 10, False)
        oSketch02 = oDef.Sketches.Add(oWorkPlane)
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, (oPipeDia + oPipeSch * 2) / 10 / 2), False)
        oCircle1 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint2, 2 / 15)
        oProfile2 = oSketch02.Profiles.AddForSolid

        Dim oExtrDef As ExtrudeDefinition
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef.SetDistanceExtent((oSockLenght + oPipeSch * 2) / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        Dim oExtrusion1 As ExtrudeFeature
        oExtrusion1 = oDef.Features.ExtrudeFeatures.Add(oExtrDef)

        Dim oRibptrn As ObjectCollection
        oRibptrn = oInvApp.TransientObjects.CreateObjectCollection
        Call oRibptrn.Add(oDef.Features("Extrusion1"))
        Dim oNumberRibs As Object = Math.Round(oPipeDia * pi / 15)
        Call oDef.Features.CircularPatternFeatures.Add(oRibptrn, oWorkAxis, True, oNumberRibs, 360 * pi / 180, True, PatternComputeTypeEnum.kIdenticalCompute)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        oWorkPlane.Visible = False


        Select Case oMaterial
            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.CircularPatternFeatures.Item(1).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        End Select




        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "DIMV"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing






        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True


        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If

FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)


        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
        End If
        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If
EndRoutine:
        Me.Show()
    End Sub



    Private Sub PlacePVCAdapterBush()
        '------------------------------------------------
        '
        '          PLACING PVC ADAPTERBUSH
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oProfile As Profile
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy
        Dim oAngle As Double

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        Dim oWPlane As WorkPlane
        Dim oSketch As PlanarSketch
        Dim oWorkAxis As Object
        Dim oRevFeature As RevolveFeature
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine
        Dim ln7 As SketchLine
        Dim ln8 As SketchLine
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim pnt7 As Point2d
        Dim pnt8 As Point2d


        'Aanmaken part document zonder template

        oWPlane = oDef.WorkPlanes.Item(3)
        oSketch = oDef.Sketches.Add(oWPlane)
        pnt1 = oTG.CreatePoint2d(0, (oBranchDia - 2) / 2 / 10)
        pnt2 = oTG.CreatePoint2d(0, (oPipeDia + oPipeSch * 4) / 2 / 10)
        pnt3 = oTG.CreatePoint2d(oPipeSch * 4 / 10, (oPipeDia + oPipeSch * 4) / 2 / 10)
        pnt4 = oTG.CreatePoint2d(oPipeSch * 4 / 10, (oPipeDia + oPipeSch * 2) / 2 / 10)
        pnt5 = oTG.CreatePoint2d((oBranchDia / 20 + oSockLenght / 10), (oPipeDia + oPipeSch * 2) / 2 / 10)
        pnt6 = oTG.CreatePoint2d((oBranchDia / 20 + oSockLenght / 10), oPipeDia / 2 / 10)
        pnt7 = oTG.CreatePoint2d((oBranchDia / 20), oPipeDia / 2 / 10)
        pnt8 = oTG.CreatePoint2d((oBranchDia / 20), (oBranchDia - 2) / 2 / 10)
        ln1 = oSketch.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, pnt7)
        ln7 = oSketch.SketchLines.AddByTwoPoints(ln6.EndSketchPoint, pnt8)
        ln8 = oSketch.SketchLines.AddByTwoPoints(ln7.EndSketchPoint, ln1.StartSketchPoint)

        oAngle = 2 * pi
        oWorkAxis = oDef.WorkAxes.Item(1)
        oProfile = oSketch.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile, oWorkAxis, oAngle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)



        Dim oThreadFeatures As ThreadFeatures
        oThreadFeatures = oDef.Features.ThreadFeatures
        Dim oThreadInfo As ThreadInfo
        oThreadInfo = oThreadFeatures.CreateTaperedThreadInfo(False, True, "ISO Taper External", "R 1")
        Dim oFace As Face
        oFace = oRevFeature.SideFaces.Item(1)
        Dim oEdge As Edge
        oEdge = oRevFeature.SideFaces.Item(1).Edges.Item(1)
        Dim oThreadFeature As ThreadFeature
        oThreadFeature = oThreadFeatures.Add(oFace, oEdge, oThreadInfo, False, True)

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(3)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")

        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(1)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")

        Dim oCenterPoint2 As SketchPoint
        Dim oCircle1 As SketchCircle
        Dim oSketch02 As PlanarSketch
        Dim oProfile2 As Profile

        oSketch02 = oDef.Sketches.Add(oDef.WorkPlanes.Item(1))
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, (oPipeDia + oPipeSch * 4) / 10 / 2), False)
        oCircle1 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint2, 2 / 12)
        oProfile2 = oSketch02.Profiles.AddForSolid

        Dim oExtrDef As ExtrudeDefinition
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef.SetDistanceExtent(oPipeSch * 4 / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        Dim oExtrusion1 As ExtrudeFeature
        oExtrusion1 = oDef.Features.ExtrudeFeatures.Add(oExtrDef)

        Dim oRibptrn As ObjectCollection
        oRibptrn = oInvApp.TransientObjects.CreateObjectCollection
        Call oRibptrn.Add(oDef.Features("Extrusion1"))
        Dim oNumberRibs As Object = Math.Round(oPipeDia * pi / 15)
        Call oDef.Features.CircularPatternFeatures.Add(oRibptrn, oWorkAxis, True, oNumberRibs, 360 * pi / 180, True, PatternComputeTypeEnum.kIdenticalCompute)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        Select Case oMaterial
            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.CircularPatternFeatures.Item(1).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        End Select



        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "MIFV"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"
        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing




        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True


        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If

FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)


        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
        End If
        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If
EndRoutine:
        Me.Show()
    End Sub


    Private Sub PlaceHDPEelectroCoupling()
        '------------------------------------------------
        '
        '          PLACING HDPE ELECTRO COUPLING
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oSketch01 As PlanarSketch
        Dim oCenterPoint2 As SketchPoint
        Dim oWorkAxis As Object
        Dim oProfile1 As Profile
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine
        Dim ln7 As SketchLine
        Dim ln8 As SketchLine
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim pnt7 As Point2d
        Dim pnt8 As Point2d
        Dim oRevFeature As RevolveFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim TeeEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry

        'oCenterPlane1 = oDef.WorkPlanes.Item(3)
        oSketch01 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3)) 'Maakt de schets aan
        oCenterPoint2 = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles2
        pnt1 = oTG.CreatePoint2d(oSockLenght / 10, ((oPipeDia + oPipeSch * 2) / 10) / 2) ' point 1
        pnt2 = oTG.CreatePoint2d(oSockLenght / 10, ((oPipeDia) / 10) / 2) ' point 2
        pnt3 = oTG.CreatePoint2d(oPipeSch / 10, ((oPipeDia) / 10) / 2) ' point 3
        pnt4 = oTG.CreatePoint2d(oPipeSch / 10, ((oPipeDia - oPipeSch * 2) / 10) / 2) ' point 4
        pnt5 = oTG.CreatePoint2d(-oPipeSch / 10, ((oPipeDia - oPipeSch * 2) / 10) / 2) ' point 5
        pnt6 = oTG.CreatePoint2d(-oPipeSch / 10, ((oPipeDia) / 10) / 2) ' point 6
        pnt7 = oTG.CreatePoint2d(-oSockLenght / 10, ((oPipeDia) / 10) / 2) ' point 7
        pnt8 = oTG.CreatePoint2d(-oSockLenght / 10, ((oPipeDia + oPipeSch * 2) / 10) / 2) ' point 8
        ln1 = oSketch01.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch01.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch01.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch01.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch01.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch01.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, pnt7)
        ln7 = oSketch01.SketchLines.AddByTwoPoints(ln6.EndSketchPoint, pnt8)
        ln8 = oSketch01.SketchLines.AddByTwoPoints(ln7.EndSketchPoint, ln1.StartSketchPoint)
        oWorkAxis = oDef.WorkAxes.Item(1)
        oProfile1 = oSketch01.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddFull(oProfile1, oWorkAxis, PartFeatureOperationEnum.kNewBodyOperation)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits


        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(1)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")


        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "AMAM"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------

        Select Case oMaterial
            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If
        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        TeeEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, TeeEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, TeeEdgeProxy, True, 0)

EndRoutine:
        Me.Show()
    End Sub



    Private Sub PlaceHDPEMaleAdapter()
        '------------------------------------------------
        '
        '          PLACING HDPE MALE ADAPTER
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oProfile As Profile
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        Dim oWPlane As WorkPlane
        Dim oSketch As PlanarSketch
        Dim oWorkAxis As Object
        Dim oRevFeature As RevolveFeature
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine
        Dim ln7 As SketchLine
        Dim ln8 As SketchLine
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim pnt7 As Point2d
        Dim pnt8 As Point2d
        Dim oAngle As Double


        'Aanmaken part document zonder template

        oWPlane = oDef.WorkPlanes.Item(3)
        oSketch = oDef.Sketches.Add(oWPlane)

        pnt1 = oTG.CreatePoint2d(0, (oBranchDia / 2 / 10) - (oPipeSch * 2 / 10))
        pnt2 = oTG.CreatePoint2d(0, oBranchDia / 2 / 10)
        pnt3 = oTG.CreatePoint2d(oBranchDia / 2 / 10, oBranchDia / 2 / 10)
        pnt4 = oTG.CreatePoint2d(oBranchDia / 2 / 10, (oPipeDia + oPipeSch * 2) / 2 / 10)
        pnt5 = oTG.CreatePoint2d((oBranchDia / 2 + oSockLenght / 2 + oPipeSch * 2) / 10, (oPipeDia + oPipeSch * 2) / 2 / 10)
        pnt6 = oTG.CreatePoint2d((oBranchDia / 2 + oSockLenght / 2 + oPipeSch * 2) / 10, (oPipeDia) / 2 / 10)
        pnt7 = oTG.CreatePoint2d((oBranchDia + oPipeSch * 2) / 2 / 10, (oPipeDia) / 2 / 10)
        pnt8 = oTG.CreatePoint2d((oBranchDia + oPipeSch * 2) / 2 / 10, (oBranchDia / 2 / 10) - (oPipeSch * 2 / 10))


        ln1 = oSketch.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, pnt7)
        ln7 = oSketch.SketchLines.AddByTwoPoints(ln6.EndSketchPoint, pnt8)
        ln8 = oSketch.SketchLines.AddByTwoPoints(ln7.EndSketchPoint, ln1.StartSketchPoint)

        oAngle = 2 * pi
        oWorkAxis = oDef.WorkAxes.Item(1)
        oProfile = oSketch.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile, oWorkAxis, oAngle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)



        ' Set a reference to the ThreadFeatures collection object.
        Dim oThreadFeatures As ThreadFeatures
        oThreadFeatures = oDef.Features.ThreadFeatures

        ' Define all of the thread information.
        Dim oThreadInfo As ThreadInfo
        oThreadInfo = oThreadFeatures.CreateTaperedThreadInfo(False, True, "ISO Taper External", "R 1")





        ' Get the face the thread will be applied to.
        Dim oFace As Face
        oFace = oRevFeature.SideFaces.Item(7)

        ' Get the edge the thread extent will be measured from.
        Dim oEdge As Edge
        oEdge = oRevFeature.SideFaces.Item(7).Edges.Item(1)

        ' Create the thread feature.
        Dim oThreadFeature As ThreadFeature
        oThreadFeature = oThreadFeatures.Add(oFace, oEdge, oThreadInfo, False, True)

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(3)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")

        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(8)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")


        Dim oCenterPoint2 As SketchPoint
        Dim oCircle1 As SketchCircle
        Dim oSketch02 As PlanarSketch
        Dim oProfile2 As Profile
        Dim oWorkPlane As WorkPlane


        oWorkPlane = oDef.WorkPlanes.AddByPlaneAndOffset(oDef.WorkPlanes.Item(1), oBranchDia / 2 / 10, False)
        oSketch02 = oDef.Sketches.Add(oWorkPlane)
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, (oPipeDia + oPipeSch * 2) / 10 / 2), False)
        oCircle1 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint2, 2 / 12)
        oProfile2 = oSketch02.Profiles.AddForSolid

        Dim oExtrDef As ExtrudeDefinition
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef.SetDistanceExtent((oSockLenght / 2 + oPipeSch * 2) / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        Dim oExtrusion1 As ExtrudeFeature
        oExtrusion1 = oDef.Features.ExtrudeFeatures.Add(oExtrDef)

        Dim oRibptrn As ObjectCollection
        oRibptrn = oInvApp.TransientObjects.CreateObjectCollection
        Call oRibptrn.Add(oDef.Features("Extrusion1"))
        Dim oNumberRibs As Object = Math.Round(oPipeDia * pi / 15)
        Call oDef.Features.CircularPatternFeatures.Add(oRibptrn, oWorkAxis, True, oNumberRibs, 360 * pi / 180, True, PatternComputeTypeEnum.kIdenticalCompute)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        oWorkPlane.Visible = False


        Select Case oMaterial
            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.CircularPatternFeatures.Item(1).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        End Select




        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "NAFS"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing






        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True


        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If

FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)


        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
        End If
        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If
EndRoutine:
        Me.Show()
    End Sub


    Private Sub PlaceHDPEfemaleAdapter()
        '------------------------------------------------
        '
        '          PLACING HDPE FEMALE ADAPTER
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oProfile As Profile
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        Dim oWPlane As WorkPlane
        Dim oSketch As PlanarSketch
        Dim oWorkAxis As Object
        Dim oRevFeature As RevolveFeature
        Dim oAngle As Double
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine
        Dim ln7 As SketchLine
        Dim ln8 As SketchLine
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim pnt7 As Point2d
        Dim pnt8 As Point2d


        'Aanmaken part document zonder template

        oWPlane = oDef.WorkPlanes.Item(3)
        oSketch = oDef.Sketches.Add(oWPlane)
        pnt1 = oTG.CreatePoint2d(0, (oBranchDia - 2) / 2 / 10)
        pnt2 = oTG.CreatePoint2d(0, (oPipeDia + oPipeSch * 4) / 2 / 10)
        pnt3 = oTG.CreatePoint2d(oPipeSch * 4 / 10, (oPipeDia + oPipeSch * 4) / 2 / 10)
        pnt4 = oTG.CreatePoint2d(oPipeSch * 4 / 10, (oPipeDia + oPipeSch * 2) / 2 / 10)
        pnt5 = oTG.CreatePoint2d((oBranchDia / 20 + oSockLenght / 2 / 10), (oPipeDia + oPipeSch * 2) / 2 / 10)
        pnt6 = oTG.CreatePoint2d((oBranchDia / 20 + oSockLenght / 2 / 10), oPipeDia / 2 / 10)
        pnt7 = oTG.CreatePoint2d((oBranchDia / 20), oPipeDia / 2 / 10)
        pnt8 = oTG.CreatePoint2d((oBranchDia / 20), (oBranchDia - 2) / 2 / 10)
        ln1 = oSketch.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, pnt7)
        ln7 = oSketch.SketchLines.AddByTwoPoints(ln6.EndSketchPoint, pnt8)
        ln8 = oSketch.SketchLines.AddByTwoPoints(ln7.EndSketchPoint, ln1.StartSketchPoint)

        oAngle = 2 * pi
        oWorkAxis = oDef.WorkAxes.Item(1)
        oProfile = oSketch.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile, oWorkAxis, oAngle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)


        Dim oThreadFeatures As ThreadFeatures
        oThreadFeatures = oDef.Features.ThreadFeatures
        Dim oThreadInfo As ThreadInfo
        oThreadInfo = oThreadFeatures.CreateTaperedThreadInfo(False, True, "ISO Taper External", "R 1")
        Dim oFace As Face
        oFace = oRevFeature.SideFaces.Item(1)
        Dim oEdge As Edge
        oEdge = oRevFeature.SideFaces.Item(1).Edges.Item(1)
        Dim oThreadFeature As ThreadFeature
        oThreadFeature = oThreadFeatures.Add(oFace, oEdge, oThreadInfo, False, True)

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(3)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")

        Dim entity2 As Edge
        entity2 = oDef.SurfaceBodies.Item(1).Edges.Item(1)
        attribSets = entity2.AttributeSets
        attribSet = attribSets.Add("InsertEdgesB")

        Dim oCenterPoint2 As SketchPoint
        Dim oCircle1 As SketchCircle
        Dim oSketch02 As PlanarSketch
        Dim oProfile2 As Profile

        oSketch02 = oDef.Sketches.Add(oDef.WorkPlanes.Item(1))
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, (oPipeDia + oPipeSch * 4) / 10 / 2), False)
        oCircle1 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint2, 2 / 12)
        oProfile2 = oSketch02.Profiles.AddForSolid

        Dim oExtrDef As ExtrudeDefinition
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef.SetDistanceExtent(oPipeSch * 4 / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        Dim oExtrusion1 As ExtrudeFeature
        oExtrusion1 = oDef.Features.ExtrudeFeatures.Add(oExtrDef)

        Dim oRibptrn As ObjectCollection
        oRibptrn = oInvApp.TransientObjects.CreateObjectCollection
        Call oRibptrn.Add(oDef.Features("Extrusion1"))
        Dim oNumberRibs As Object = Math.Round(oPipeDia * pi / 15)
        Call oDef.Features.CircularPatternFeatures.Add(oRibptrn, oWorkAxis, True, oNumberRibs, 360 * pi / 180, True, PatternComputeTypeEnum.kIdenticalCompute)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        Select Case oMaterial
            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion1.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.CircularPatternFeatures.Item(1).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        End Select



        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "MAFS"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"
        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing




        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True


        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If

FirstDialog:
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)


        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
            elbowDoc = elbowOcc.Definition.Document
            attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesB")
            elbowEdge = attrSets.Item(1).Parent.Parent
            elbowEdgeProxy = Nothing
            Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
            Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)
        End If
        If MessageBox.Show(Me, "Would you keep this Orientation?", "Choose Insert Orientation", MessageBoxButtons.YesNo) = DialogResult.Yes Then
            GoTo EndRoutine
        Else
            elbowOcc.Delete()
            GoTo FirstDialog
        End If
EndRoutine:
        Me.Show()
    End Sub

    Private Sub PlaceHDPEUnionOLD()


        '------------------------------------------------
        '
        '          PLACING HDPE UNION
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oSketch01 As PlanarSketch
        Dim oSketch03 As PlanarSketch
        Dim oCenterPoint3 As SketchPoint
        Dim oWorkAxis As Object
        Dim oProfile1 As Profile
        Dim oProfile3 As Profile
        Dim oCircle2 As SketchCircle
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine
        Dim ln7 As SketchLine
        Dim ln8 As SketchLine
        Dim ln9 As SketchLine
        Dim ln10 As SketchLine
        Dim ln11 As SketchLine
        Dim ln12 As SketchLine
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim pnt7 As Point2d
        Dim pnt8 As Point2d
        Dim pnt9 As Point2d
        Dim pnt10 As Point2d
        Dim pnt11 As Point2d
        Dim pnt12 As Point2d
        Dim oRevFeature As RevolveFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim TeeEdgeProxy As EdgeProxy
        Dim pi As Double = Math.Acos(-1)
        Dim oAngle As Double

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry



        'oCenterPlane1 = oDef.WorkPlanes.Item(3)
        oSketch01 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3)) 'Maakt de schets aan
        'oCenterPoint2 = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles2
        pnt1 = oTG.CreatePoint2d((oSockLenght * 2.5) / 2 / 10, ((oPipeDia) / 10) / 2) ' point 1
        pnt2 = oTG.CreatePoint2d((oSockLenght * 2.5) / 2 / 10, ((oPipeDia - oPipeSch * 2) / 10) / 2) ' point 2
        pnt3 = oTG.CreatePoint2d(((oSockLenght * 2.5) - oSockLenght * 2) / 2 / 10, ((oPipeDia - oPipeSch * 2) / 10) / 2) ' point 3
        pnt4 = oTG.CreatePoint2d(((oSockLenght * 2.5) - oSockLenght * 2) / 2 / 10, ((oPipeDia - oPipeSch * 4) / 10) / 2) ' point 4
        pnt5 = oTG.CreatePoint2d((-(oSockLenght * 2.5) + oSockLenght * 2) / 2 / 10, ((oPipeDia - oPipeSch * 4) / 10) / 2) ' point 5
        pnt6 = oTG.CreatePoint2d((-(oSockLenght * 2.5) + oSockLenght * 2) / 2 / 10, ((oPipeDia - oPipeSch * 2) / 10) / 2) ' point 6
        pnt7 = oTG.CreatePoint2d(-(oSockLenght * 2.5) / 2 / 10, ((oPipeDia - oPipeSch * 2) / 10) / 2) ' point 7
        pnt8 = oTG.CreatePoint2d(-(oSockLenght * 2.5) / 2 / 10, ((oPipeDia) / 10) / 2) ' point 8
        pnt9 = oTG.CreatePoint2d(-(oSockLenght * 2.5) / 10 / 10, ((oPipeDia) / 10) / 2) ' point 9
        pnt10 = oTG.CreatePoint2d(-(oSockLenght * 2.5) / 10 / 10, ((oPipeDia * 1.5) / 10) / 2) ' point 10
        pnt11 = oTG.CreatePoint2d((oSockLenght * 2.5) / 10 / 10, ((oPipeDia * 1.5) / 10) / 2) ' point 11
        pnt12 = oTG.CreatePoint2d((oSockLenght * 2.5) / 10 / 10, ((oPipeDia) / 10) / 2) ' point 12

        ln1 = oSketch01.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch01.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch01.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch01.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch01.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch01.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, pnt7)

        ln7 = oSketch01.SketchLines.AddByTwoPoints(ln6.EndSketchPoint, pnt8)
        ln8 = oSketch01.SketchLines.AddByTwoPoints(ln7.EndSketchPoint, pnt9)
        ln9 = oSketch01.SketchLines.AddByTwoPoints(ln8.EndSketchPoint, pnt10)
        ln10 = oSketch01.SketchLines.AddByTwoPoints(ln9.EndSketchPoint, pnt11)
        ln11 = oSketch01.SketchLines.AddByTwoPoints(ln10.EndSketchPoint, pnt12)
        ln12 = oSketch01.SketchLines.AddByTwoPoints(ln11.EndSketchPoint, ln1.StartSketchPoint)

        oAngle = 2 * pi
        oWorkAxis = oDef.WorkAxes.Item(1)
        oProfile1 = oSketch01.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile1, oWorkAxis, oAngle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)



        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(6)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")



        oSketch03 = oDef.Sketches.Add(oDef.WorkPlanes.Item(1))
        oCenterPoint3 = oSketch03.SketchPoints.Add(oTG.CreatePoint2d(0, ((oPipeDia * 1.5) / 10) / 2), False)
        oCircle2 = oSketch03.SketchCircles.AddByCenterRadius(oCenterPoint3, 2 / 10)
        oProfile3 = oSketch03.Profiles.AddForSolid

        Dim oExtrDef2 As ExtrudeDefinition
        oExtrDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile3, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef2.SetDistanceExtent((oSockLenght * 2.5) / 50, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        Dim oExtrusion2 As ExtrudeFeature
        oExtrusion2 = oDef.Features.ExtrudeFeatures.Add(oExtrDef2)

        Dim oRibptrn As ObjectCollection
        oRibptrn = oInvApp.TransientObjects.CreateObjectCollection
        Call oRibptrn.Add(oDef.Features("Extrusion1"))
        Dim oNumberRibs As Object = Math.Round(oPipeDia * pi / 15)
        Call oDef.Features.CircularPatternFeatures.Add(oRibptrn, oWorkAxis, True, oNumberRibs, 360 * pi / 180, True, PatternComputeTypeEnum.kIdenticalCompute)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "BAS"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------

        Select Case oMaterial
            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.CircularPatternFeatures.Item(1).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If
        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        TeeEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, TeeEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, TeeEdgeProxy, True, 0)
EndRoutine:
        Me.Show()
    End Sub



    Private Sub PlaceHDPEUnion()


        '------------------------------------------------
        '
        '          PLACING HDPE UNION
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oSketch01 As PlanarSketch
        Dim oSketch03 As PlanarSketch
        Dim oCenterPoint3 As SketchPoint
        Dim oWorkAxis As Object
        Dim oProfile1 As Profile
        Dim oProfile3 As Profile
        Dim oCircle2 As SketchCircle
        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine
        Dim ln7 As SketchLine
        Dim ln8 As SketchLine
        Dim ln9 As SketchLine
        Dim ln10 As SketchLine
        Dim ln11 As SketchLine
        Dim ln12 As SketchLine
        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d
        Dim pnt7 As Point2d
        Dim pnt8 As Point2d
        Dim pnt9 As Point2d
        Dim pnt10 As Point2d
        Dim pnt11 As Point2d
        Dim pnt12 As Point2d
        Dim oRevFeature As RevolveFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim TeeEdgeProxy As EdgeProxy
        Dim pi As Double = Math.Acos(-1)
        Dim oAngle As Double

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry



        'oCenterPlane1 = oDef.WorkPlanes.Item(3)
        oSketch01 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3)) 'Maakt de schets aan
        'oCenterPoint2 = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles2
        pnt1 = oTG.CreatePoint2d((oUnionLenght) / 2 / 10, ((oPipeDia) / 10) / 2) ' point 1
        pnt2 = oTG.CreatePoint2d((oUnionLenght) / 2 / 10, ((oPipeDia - oPipeSch * 2) / 10) / 2) ' point 2
        pnt6 = oTG.CreatePoint2d(((oUnionLenght) - oSockLenght * 2) / 2 / 10, ((oPipeDia - oPipeSch * 2) / 10) / 2) ' point 3
        pnt5 = oTG.CreatePoint2d(((oUnionLenght) - oSockLenght * 2) / 2 / 10, ((oPipeDia - oPipeSch * 4) / 10) / 2) ' point 4
        pnt4 = oTG.CreatePoint2d((-(oUnionLenght) + oSockLenght * 2) / 2 / 10, ((oPipeDia - oPipeSch * 4) / 10) / 2) ' point 5
        pnt3 = oTG.CreatePoint2d((-(oUnionLenght) + oSockLenght * 2) / 2 / 10, ((oPipeDia - oPipeSch * 2) / 10) / 2) ' point 6
        pnt7 = oTG.CreatePoint2d(-(oUnionLenght) / 2 / 10, ((oPipeDia - oPipeSch * 2) / 10) / 2) ' point 7
        pnt8 = oTG.CreatePoint2d(-(oUnionLenght) / 2 / 10, ((oPipeDia) / 10) / 2) ' point 8
        pnt9 = oTG.CreatePoint2d(-(oUnionLenght) / 10 / 10, ((oPipeDia) / 10) / 2) ' point 9
        pnt10 = oTG.CreatePoint2d(-(oUnionLenght) / 10 / 10, ((oPipeDia * 1.5) / 10) / 2) ' point 10
        pnt11 = oTG.CreatePoint2d((oUnionLenght) / 10 / 10, ((oPipeDia * 1.5) / 10) / 2) ' point 11
        pnt12 = oTG.CreatePoint2d((oUnionLenght) / 10 / 10, ((oPipeDia) / 10) / 2) ' point 12

        ln1 = oSketch01.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch01.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch01.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch01.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch01.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch01.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, pnt7)

        ln7 = oSketch01.SketchLines.AddByTwoPoints(ln6.EndSketchPoint, pnt8)
        ln8 = oSketch01.SketchLines.AddByTwoPoints(ln7.EndSketchPoint, pnt9)
        ln9 = oSketch01.SketchLines.AddByTwoPoints(ln8.EndSketchPoint, pnt10)
        ln10 = oSketch01.SketchLines.AddByTwoPoints(ln9.EndSketchPoint, pnt11)
        ln11 = oSketch01.SketchLines.AddByTwoPoints(ln10.EndSketchPoint, pnt12)
        ln12 = oSketch01.SketchLines.AddByTwoPoints(ln11.EndSketchPoint, ln1.StartSketchPoint)

        oAngle = 2 * pi
        oWorkAxis = oDef.WorkAxes.Item(1)
        oProfile1 = oSketch01.Profiles.AddForSolid
        oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile1, oWorkAxis, oAngle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)



        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(6)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdgesA")



        oSketch03 = oDef.Sketches.Add(oDef.WorkPlanes.Item(1))
        oCenterPoint3 = oSketch03.SketchPoints.Add(oTG.CreatePoint2d(0, ((oPipeDia * 1.5) / 10) / 2), False)
        oCircle2 = oSketch03.SketchCircles.AddByCenterRadius(oCenterPoint3, 2 / 10)
        oProfile3 = oSketch03.Profiles.AddForSolid

        Dim oExtrDef2 As ExtrudeDefinition
        oExtrDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile3, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef2.SetDistanceExtent(((oUnionLenght) / 10 / 5), PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        Dim oExtrusion2 As ExtrudeFeature
        oExtrusion2 = oDef.Features.ExtrudeFeatures.Add(oExtrDef2)

        Dim oRibptrn As ObjectCollection
        oRibptrn = oInvApp.TransientObjects.CreateObjectCollection
        Call oRibptrn.Add(oDef.Features("Extrusion1"))
        Dim oNumberRibs As Object = Math.Round(oPipeDia * pi / 15)
        Call oDef.Features.CircularPatternFeatures.Add(oRibptrn, oWorkAxis, True, oNumberRibs, 360 * pi / 180, True, PatternComputeTypeEnum.kIdenticalCompute)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "BAS"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------

        Select Case oMaterial
            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion2.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.CircularPatternFeatures.Item(1).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If
        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdgesA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        TeeEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, TeeEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, TeeEdgeProxy, True, 0)
EndRoutine:
        Me.Show()
    End Sub




    Private Sub PlaceGasket()
        '------------------------------------------------
        '
        '          PLACING Gaskets
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oFrontPlane As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oCenterPoint As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oWorkAx As Object
        Dim oProfile As Profile
        Dim oExtrDef As ExtrudeDefinition
        Dim oExtrusion As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim elbowOcc As ComponentOccurrence
        Dim elbowDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If



BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1) 'radians van 45° hoek
        oElbowAngle = (90 * pi / 180)
        oFrontPlane = oDef.WorkPlanes.Item(3) 'Kies Plane XY (3)om op te tekenen
        oSketch01 = oDef.Sketches.Add(oFrontPlane) 'Maakt de schets aan
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles
        oCircles = oSketch01.SketchCircles



        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oFlangeKDia - oFlangeBoltHoleDia - 5) / 2 / 10) 'Teken circel 1
        oCircle2 = oCircles.AddByCenterRadius(oCenterPoint, ((oPipeDia - 2 * oPipeSch) / 10) / 2) 'Teken circel 2
        oWorkAx = oDef.WorkAxes.Item(1)
        oProfile = oSketch01.Profiles.AddForSolid 'Maakt het profiel om te extruden
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef.SetDistanceExtent(oGasketThick / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)



        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim entity As Edge
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(1)
        Dim attribSets As AttributeSets
        attribSets = entity.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertEdges")


        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "EN 1514-1"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        Select Case oMaterial
            Case "EPDM"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Rubber, Silicone", "EPDM", "EPDM")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("EPDM")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("GasketEPDM")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("GasketEPDM")
                    RS.Reflectivity = 1
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "NBR"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Rubber, Silicone", "NBR", "NBR")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("NBR")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("GasketNBR")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("GasketNBR")
                    RS.Reflectivity = 1
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "Silicone"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Rubber, Silicone", "Silicone", "Silicone")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("Silicone")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("GasketSilicone")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("GasketSilicone")
                    RS.Reflectivity = 1
                    RS.SetDiffuseColor(225, 75, 0)  'Orange
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "PTFE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Rubber, Silicone", "PTFE", "PTFE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PTFE")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("GasketPTFE")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("GasketPTFE")
                    RS.Reflectivity = 1
                    RS.SetDiffuseColor(255, 255, 255)  'White
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            elbowOcc.Grounded = True
            GoTo EndRoutine
        End If

        Me.Hide()
        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("InsertEdges")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, elbowEdgeProxy, True, 0)


EndRoutine:
        Me.Show()
    End Sub



    Private Sub rbtBolts88_CheckedChanged(sender As Object, e As EventArgs) Handles rbtBolts88.CheckedChanged
        oItemName = "BoltSet"
        oMaterial = "8.8"
        cbxDN.Visible = False
        lblDN.Visible = False
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = False
        picBolts88.Visible = True
        If rbtBolts88.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtStudBolts88_CheckedChanged(sender As Object, e As EventArgs) Handles rbtStudBolts88.CheckedChanged
        oItemName = "StudBoltSet"
        oMaterial = "8.8"
        cbxDN.Visible = False
        lblDN.Visible = False
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = False
        picStudBolts88.Visible = True
        If rbtStudBolts88.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub




    Private Sub rbtBoltsA2_CheckedChanged(sender As Object, e As EventArgs) Handles rbtBoltsA2.CheckedChanged
        oItemName = "BoltSet"
        oMaterial = "A2"
        cbxDN.Visible = False
        lblDN.Visible = False
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = False
        picBoltsA2.Visible = True
        If rbtBoltsA2.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtStudBoltsA2_CheckedChanged(sender As Object, e As EventArgs) Handles rbtStudBoltsA2.CheckedChanged
        oItemName = "StudBoltSet"
        oMaterial = "A2"
        cbxDN.Visible = False
        lblDN.Visible = False
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = False
        picStudBoltsA2.Visible = True
        If rbtStudBoltsA2.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub


    Private Sub rbtBoltsA4_CheckedChanged(sender As Object, e As EventArgs) Handles rbtBoltsA4.CheckedChanged
        oItemName = "BoltSet"
        oMaterial = "A4"
        cbxDN.Visible = False
        lblDN.Visible = False
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = False
        picBoltsA4.Visible = True
        If rbtBoltsA4.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtStudBoltsA4_CheckedChanged(sender As Object, e As EventArgs) Handles rbtStudBoltsA4.CheckedChanged
        oItemName = "StudBoltSet"
        oMaterial = "A4"
        cbxDN.Visible = False
        lblDN.Visible = False
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = False
        picStudBoltsA2.Visible = True
        If rbtStudBoltsA4.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub


    Private Sub rbtGasketEPDM_CheckedChanged(sender As Object, e As EventArgs) Handles rbtGasketEPDM.CheckedChanged
        oItemName = "Gasket"
        oMaterial = "EPDM"
        cbxDN.Visible = True
        lblDN.Visible = True
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
        End If
        If cbxDN.Text.Substring(0, 2) = "DE" Then
            cbxDN.Text = "DN50"
        Else
            cbxDN.Text = oPipeSize
        End If
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = False
        picGasketEPDM.Visible = True
        If rbtGasketEPDM.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtGasketNBR_CheckedChanged(sender As Object, e As EventArgs) Handles rbtGasketNBR.CheckedChanged
        oItemName = "Gasket"
        oMaterial = "NBR"
        cbxDN.Visible = True
        lblDN.Visible = True
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
        End If
        If cbxDN.Text.Substring(0, 2) = "DE" Then
            cbxDN.Text = "DN50"
        Else
            cbxDN.Text = oPipeSize
        End If
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = False
        picGasketNBR.Visible = True
        If rbtGasketNBR.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtGasketSilicone_CheckedChanged(sender As Object, e As EventArgs) Handles rbtGasketSilicone.CheckedChanged
        oItemName = "Gasket"
        oMaterial = "Silicone"
        cbxDN.Visible = True
        lblDN.Visible = True
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
        End If
        If cbxDN.Text.Substring(0, 2) = "DE" Then
            cbxDN.Text = "DN50"
        Else
            cbxDN.Text = oPipeSize
        End If
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = False
        picGasketSilicone.Visible = True
        If rbtGasketSilicone.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtGasketPTFE_CheckedChanged(sender As Object, e As EventArgs) Handles rbtGasketPTFE.CheckedChanged
        oItemName = "Gasket"
        oMaterial = "PTFE"
        cbxDN.Visible = True
        lblDN.Visible = True
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
        End If
        If cbxDN.Text.Substring(0, 2) = "DE" Then
            cbxDN.Text = "DN50"
        Else
            cbxDN.Text = oPipeSize
        End If
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = False
        picGasketPTFE.Visible = True
        If rbtGasketPTFE.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtUBoltA2_CheckedChanged(sender As Object, e As EventArgs) Handles rbtUBoltA2.CheckedChanged
        oItemName = "Support"
        oSupportType = "U-Bolt"
        oMaterial = "A2"
        cbxDN.Visible = True
        lblDN.Visible = True
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
        End If
        If cbxDN.Text.Substring(0, 2) = "DE" Then
            cbxDN.Text = "DN50"
        Else
            cbxDN.Text = oPipeSize
        End If
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = False
        picUBoltA2.Visible = True
        If rbtUBoltA2.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtUBolt88_CheckedChanged(sender As Object, e As EventArgs) Handles rbtUBolt88.CheckedChanged
        oItemName = "Support"
        oSupportType = "U-Bolt"
        oMaterial = "8.8"
        cbxDN.Visible = True
        lblDN.Visible = True
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
        End If
        If cbxDN.Text.Substring(0, 2) = "DE" Then
            cbxDN.Text = "DN50"
        Else
            cbxDN.Text = oPipeSize
        End If
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = False
        picUBolt88.Visible = True
        If rbtUBolt88.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPipeClampGalva_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPipeClampGalva.CheckedChanged
        oItemName = "Support"
        oSupportType = "PipeClamp"
        oMaterial = "GALVA"
        cbxDN.Visible = True
        lblDN.Visible = True
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
        End If
        If cbxDN.Text.Substring(0, 2) = "DE" Then
            cbxDN.Text = "DN50"
        Else
            cbxDN.Text = oPipeSize
        End If
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = False
        picPipeClampGalva.Visible = True
        If rbtPipeClampGalva.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPipeClamp304L_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPipeClamp304L.CheckedChanged
        oItemName = "Support"
        oSupportType = "PipeClamp"
        oMaterial = "304L"
        cbxDN.Visible = True
        lblDN.Visible = True
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
        End If
        If cbxDN.Text.Substring(0, 2) = "DE" Then
            cbxDN.Text = "DN50"
        Else
            cbxDN.Text = oPipeSize
        End If
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = False
        picPipeClamp304L.Visible = True
        If rbtPipeClamp304L.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtDamgulastYellow_CheckedChanged(sender As Object, e As EventArgs) Handles rbtDamgulastYellow.CheckedChanged
        oItemName = "Support"
        oSupportType = "Dammgulast"
        oMaterial = "304L"
        cbxDN.Visible = True
        lblDN.Visible = True
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        If cbxDN.Text = "" Then
            cbxDN.Text = "DN50"
        End If
        If cbxDN.Text.Substring(0, 2) = "DE" Then
            cbxDN.Text = "DN50"
        Else
            cbxDN.Text = oPipeSize
        End If
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = False
        picDammgulast.Visible = True
        If rbtDamgulastYellow.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPipeClipASV_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPipeClipASV.CheckedChanged
        oItemName = "Support"
        oSupportType = "PipeClipASV"
        oMaterial = "PP"
        cbxDN.Visible = True
        lblDN.Visible = True
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE40", "DE50", "DE63", "DE75", "DE90", "DE110", "DE140", "DE160"})
        cbxDN.Text = "DE63"
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = False
        picPipeClipASV.Visible = True
        If rbtPipeClipASV.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPipeClipGoema_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPipeClipGoema.CheckedChanged
        oItemName = "Support"
        oSupportType = "PipeClip"
        oMaterial = "PP"
        cbxDN.Visible = True
        lblDN.Visible = True
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DE16", "DE20", "DE25", "DE32"})
        cbxDN.Text = "DE32"
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = False
        picPipeClipGoema.Visible = True
        If rbtPipeClipGoema.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub

    Private Sub rbtPipeClampStauff_CheckedChanged(sender As Object, e As EventArgs) Handles rbtPipeClampStauff.CheckedChanged
        oItemName = "Support"
        oSupportType = "PipeClampStauff"
        oMaterial = "PP"
        cbxDN.Items.Clear()
        cbxDN.Items.AddRange(New Object() {"DN15", "DN20", "DN25", "DN32", "DN40", "DN50", "DN65", "DN80", "DN100", "DN125", "DN150", "DN200", "DN250", "DN300", "DN350", "DN400", "DN450", "DN500"})
        cbxDN.Text = oPipeSize
        all_Pictures_Off()
        btnPipeLenghtChange.Visible = False
        picPipeClampStauff.Visible = True
        If rbtPipeClampStauff.Checked = True Then
            lblBranchDN.Visible = False
            cbxBranchDN.Visible = False
            lblPipeLenght.Visible = False
            cbxPipeLenght.Visible = False
            cbxDN.Visible = False
            lblDN.Visible = False
        End If
        setParameters()
        Set_BranchLenght()
        Set_BranchSize()
        Set_ReducerSizeFill()
        Get_description()
        Get_filename()
        Get_ProjectPath()
    End Sub










    Private Sub PlaceBoltsets()
        Dim pi As Double = Math.Acos(-1)
        Dim asmDoc As AssemblyDocument
        Dim oFlg1Occ As ComponentOccurrence
        Dim oFlg2Occ As ComponentOccurrence
        Dim attrSets As AttributeSetsEnumerator
        Dim attrSets2 As AttributeSetsEnumerator

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:

        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 2 Then
            MsgBox("Automated Bolt placement not possible." & vbCrLf & "Place Bolts Manually.", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If
        If asmDoc.FileSaveCounter < 1 Then
            MsgBox("Save the assembly before placing Bolts.", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

FirstFlangeSelection:


        Try
            Update()
            oFlg1Occ = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAssemblyOccurrenceFilter, "Select the first Flange.")
        Catch ex As Exception
            GoTo ErrorHandler01
        End Try
        If oFlg1Occ Is Nothing Then
            GoTo EndRoutine
        End If
        'Go to original document first flange
        Dim oFlg1Doc As PartDocument

        Try
            oFlg1Doc = oFlg1Occ.Definition.Document
        Catch ex As Exception
            GoTo ErrorHandler01
        End Try

        Dim oFlg1name = oFlg1Doc.DisplayName
        'MsgBox("First Part Selected" & vbCrLf & oFlg1name)
        'Lengte filename string
        Dim oFlg1nameLenght As Integer
        oFlg1nameLenght = Len(oFlg1name)
        Dim oFirst1_ As Integer
        oFirst1_ = oFlg1name.IndexOf("_")
        Dim oLast1_ As Integer
        oLast1_ = oFlg1name.LastIndexOf("_")

        'Check if A flange is selected
        Dim oFlangeType As String
        If oFlg1name.StartsWith("FlangeWN") = True Then
            oFlangeType = "FlangeWN"
        Else
            If oFlg1name.StartsWith("FlangeSO") = True Then
                oFlangeType = "FlangeSO"
            Else
                If oFlg1name.StartsWith("FlangeLJ") = True Then
                    oFlangeType = "FlangeLJ"
                Else
                    If oFlg1name.StartsWith("FlangeSW") = True Then
                        oFlangeType = "FlangeSW"
                    Else
                        If oFlg1name.StartsWith("BlindFlange") = True Then
                            oFlangeType = "BlindFlange"
                        Else
                            GoTo ErrorHandler01
                        End If
                    End If
                End If
            End If
        End If
        'MsgBox("First Flange Is A" & vbCrLf & oFlangeType)
        Dim oFlg01Size As String
        oFlg01Size = oFlg1name.Substring(oFirst1_ + 1, oFlg1nameLenght - oFirst1_ - (oFlg1nameLenght - oLast1_ + 1))
        'MsgBox("Size Flange is" & vbCrLf & oFlg01Size)

        Dim oCheckFlg01Size As String = ""
        Select Case oFlg01Size
            Case "DN15", "DE20"
                oCheckFlg01Size = "A"
            Case "DN20", "DE25"
                oCheckFlg01Size = "B"
            Case "DN25", "DE32"
                oCheckFlg01Size = "C"
            Case "DN32", "DE40"
                oCheckFlg01Size = "D"
            Case "DN40", "DE50"
                oCheckFlg01Size = "E"
            Case "DN50", "DE63"
                oCheckFlg01Size = "F"
            Case "DN65", "DE75"
                oCheckFlg01Size = "G"
            Case "DN80", "DE90"
                oCheckFlg01Size = "H"
            Case "DN100", "DE110"
                oCheckFlg01Size = "I"
            Case "DN125", "DE140"
                oCheckFlg01Size = "J"
            Case "DN150", "DE160"
                oCheckFlg01Size = "K"
            Case "DN200", "DE225"
                oCheckFlg01Size = "L"
            Case "DN250", "DE280"
                oCheckFlg01Size = "M"
            Case "DN300", "DE315"
                oCheckFlg01Size = "N"
            Case "DN350", "DE355"
                oCheckFlg01Size = "O"
            Case "DN400", "DE400"
                oCheckFlg01Size = "P"
            Case "DN450", "DE450"
                oCheckFlg01Size = "Q"
            Case "DN500", "DE500"
                oCheckFlg01Size = "R"
        End Select





        Dim oFlg01BoltFace As Face
        Dim oFlg01InsertEdge As Edge
        Dim oFlg01BoltFaceProxy As FaceProxy = Nothing
        Dim oFlg01InsertEdgeProxy As EdgeProxy = Nothing

        attrSets = oFlg1Doc.AttributeManager.FindAttributeSets("BoltFace")
        oFlg01BoltFace = attrSets.Item(1).Parent.Parent
        'Make faceproxy of the boltface
        Call oFlg1Occ.CreateGeometryProxy(oFlg01BoltFace, oFlg01BoltFaceProxy)
        If oFlangeType = "FlangeWN" Then
            attrSets = oFlg1Doc.AttributeManager.FindAttributeSets("InsertEdgesB")
            oFlg01InsertEdge = attrSets.Item(1).Parent.Parent
        Else
            attrSets = oFlg1Doc.AttributeManager.FindAttributeSets("InsertEdgesA")
            oFlg01InsertEdge = attrSets.Item(1).Parent.Parent
        End If
        'Make Edgeproxy of the insertedge A
        Call oFlg1Occ.CreateGeometryProxy(oFlg01InsertEdge, oFlg01InsertEdgeProxy)
        'Bereken de dikte van de flens ttz insert edge naar boltface
        Dim oFlg01Tick As Double
        'oFlg01Tick = oInvApp.MeasureTools.GetMinimumDistance(oFlg01BoltFace, oFlg01InsertEdge)
        oFlg01Tick = oInvApp.MeasureTools.GetMinimumDistance(oFlg01BoltFaceProxy, oFlg01InsertEdgeProxy)
        'MsgBox("First Flange Thickness" & vbCrLf & oFlg01Tick * 10 & "mm thick")
        'Selection second Flange


SecondFlangeSelection:





        Try
            oFlg2Occ = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAssemblyOccurrenceFilter, "Select the second Flange.")
        Catch ex As Exception
            GoTo ErrorHandler02
        End Try
        If oFlg2Occ Is oFlg1Occ Then
            GoTo ErrorHandler04
        End If

        If oFlg2Occ Is Nothing Then
            GoTo EndRoutine
        End If

        'Goto original document
        Dim oFlg2Doc As PartDocument
        Try
            oFlg2Doc = oFlg2Occ.Definition.Document
        Catch ex As Exception
            GoTo ErrorHandler02
        End Try

        Dim oFlg2name = oFlg2Doc.DisplayName
        'MsgBox("Second Part Selected" & vbCrLf & oFlg2name)
        'Lengte filename string
        Dim oFlg2nameLenght As Integer
        oFlg2nameLenght = Len(oFlg2name)
        Dim oFirst2_ As Integer
        oFirst2_ = oFlg2name.IndexOf("_")
        Dim oLast2_ As Integer
        oLast2_ = oFlg2name.LastIndexOf("_")

        'Check if A flange is selected
        Dim oFlange2Type As String
        If oFlg2name.StartsWith("FlangeWN") = True Then
            oFlange2Type = "FlangeWN"
        Else
            If oFlg2name.StartsWith("FlangeSO") = True Then
                oFlange2Type = "FlangeSO"
            Else
                If oFlg2name.StartsWith("FlangeLJ") = True Then
                    oFlange2Type = "FlangeLJ"
                Else
                    If oFlg2name.StartsWith("FlangeSW") = True Then
                        oFlange2Type = "FlangeSW"
                    Else
                        If oFlg2name.StartsWith("BlindFlange") = True Then
                            oFlange2Type = "BlindFlange"
                        Else
                            GoTo ErrorHandler02
                        End If
                    End If
                End If
            End If
        End If
        ' MsgBox("Second Flange Is A" & vbCrLf & oFlange2Type)

        Dim oFlg02Size As String
        oFlg02Size = oFlg2name.Substring(oFirst2_ + 1, oFlg2nameLenght - oFirst2_ - (oFlg2nameLenght - oLast2_ + 1))
        'MsgBox("Size Flange is" & vbCrLf & oFlg02Size)

        Dim oCheckFlg02Size As String = ""
        Select Case oFlg02Size
            Case "DN15", "DE20"
                oCheckFlg02Size = "A"
            Case "DN20", "DE25"
                oCheckFlg02Size = "B"
            Case "DN25", "DE32"
                oCheckFlg02Size = "C"
            Case "DN32", "DE40"
                oCheckFlg02Size = "D"
            Case "DN40", "DE50"
                oCheckFlg02Size = "E"
            Case "DN50", "DE63"
                oCheckFlg02Size = "F"
            Case "DN65", "DE75"
                oCheckFlg02Size = "G"
            Case "DN80", "DE90"
                oCheckFlg02Size = "H"
            Case "DN100", "DE110"
                oCheckFlg02Size = "I"
            Case "DN125", "DE140"
                oCheckFlg02Size = "J"
            Case "DN150", "DE160"
                oCheckFlg02Size = "K"
            Case "DN200", "DE225"
                oCheckFlg02Size = "L"
            Case "DN250", "DE280"
                oCheckFlg02Size = "M"
            Case "DN300", "DE315"
                oCheckFlg02Size = "N"
            Case "DN350", "DE355"
                oCheckFlg02Size = "O"
            Case "DN400", "DE400"
                oCheckFlg02Size = "P"
            Case "DN450", "DE450"
                oCheckFlg02Size = "Q"
            Case "DN500", "DE500"
                oCheckFlg02Size = "R"
        End Select

        If oCheckFlg01Size = oCheckFlg02Size Then
        Else
            GoTo ErrorHandler05
        End If

        Dim oFlg02BoltFace As Face
        Dim oFlg02InsertEdge As Edge
        Dim oFlg02BoltFaceProxy As FaceProxy = Nothing
        Dim oFlg02InsertEdgeProxy As EdgeProxy = Nothing

        attrSets2 = oFlg2Doc.AttributeManager.FindAttributeSets("BoltFace")
        oFlg02BoltFace = attrSets2.Item(1).Parent.Parent

        'Make faceproxy of the boltface

        Call oFlg2Occ.CreateGeometryProxy(oFlg02BoltFace, oFlg02BoltFaceProxy)
        If oFlange2Type = "FlangeWN" Then
            attrSets2 = oFlg2Doc.AttributeManager.FindAttributeSets("InsertEdgesB")
            oFlg02InsertEdge = attrSets2.Item(1).Parent.Parent
        Else
            attrSets2 = oFlg2Doc.AttributeManager.FindAttributeSets("InsertEdgesA")
            oFlg02InsertEdge = attrSets2.Item(1).Parent.Parent
        End If

        'Make Edgeproxy of the insertedge A
        Call oFlg2Occ.CreateGeometryProxy(oFlg02InsertEdge, oFlg02InsertEdgeProxy)

        'Bereken de dikte van de flens ttz insert edge naar boltface
        Dim oFlg02Tick As Double
        'oFlg02Tick = oInvApp.MeasureTools.GetMinimumDistance(oFlg02BoltFace, oFlg02InsertEdge)
        oFlg02Tick = oInvApp.MeasureTools.GetMinimumDistance(oFlg02BoltFaceProxy, oFlg02InsertEdgeProxy)
        'MsgBox("Second Flange Thickness" & vbCrLf & oFlg02Tick * 10 & "mm thick")
        'Distance between BoltFaces
        Dim oDistBoltfaces As Double
        oDistBoltfaces = oInvApp.MeasureTools.GetMinimumDistance(oFlg01BoltFaceProxy, oFlg02BoltFaceProxy)
        'MsgBox("Distance Between Boltfaces is." & vbCrLf & oDistBoltfaces * 10 & "mm")
        'Check the orietation of the flanges
        Dim oChkDist01 As Double
        oChkDist01 = oInvApp.MeasureTools.GetMinimumDistance(oFlg01BoltFaceProxy, oFlg02InsertEdgeProxy)
        Dim oChkDist02 As Double
        oChkDist02 = oInvApp.MeasureTools.GetMinimumDistance(oFlg02BoltFaceProxy, oFlg01InsertEdgeProxy)
        If oDistBoltfaces < oChkDist01 Then
            GoTo ErrorHandler03
        End If
        If oDistBoltfaces < oChkDist02 Then
            GoTo ErrorHandler03
        End If
        'Definition of the Bolts

        Dim oBoltsetBltsDia As Double
        Dim oBoltsetBltsNumb As Integer
        Dim oBoltsetBltsKDia As Double
        Dim oBoltsetWashTck As Double

        Select Case oFlg01Size
            Case "DN15", "DE20"
                oBoltsetBltsDia = 12
                oBoltsetBltsNumb = 4
                oBoltsetBltsKDia = 6.5
                oBoltsetWashTck = 0.225
            Case "DN20", "DE25"
                oBoltsetBltsDia = 12
                oBoltsetBltsNumb = 4
                oBoltsetBltsKDia = 7.5
                oBoltsetWashTck = 0.225
            Case "DN25", "DE32"
                oBoltsetBltsDia = 12
                oBoltsetBltsNumb = 4
                oBoltsetBltsKDia = 8.5
                oBoltsetWashTck = 0.225
            Case "DN32", "DE40"
                oBoltsetBltsDia = 16
                oBoltsetBltsNumb = 4
                oBoltsetBltsKDia = 10
                oBoltsetWashTck = 0.275
            Case "DN40", "DE50"
                oBoltsetBltsDia = 16
                oBoltsetBltsNumb = 4
                oBoltsetBltsKDia = 11
                oBoltsetWashTck = 0.275
            Case "DN50", "DE63"
                oBoltsetBltsDia = 16
                oBoltsetBltsNumb = 4
                oBoltsetBltsKDia = 12.5
                oBoltsetWashTck = 0.275
            Case "DN65", "DE75"
                oBoltsetBltsDia = 16
                oBoltsetBltsNumb = 4
                oBoltsetBltsKDia = 14.5
                oBoltsetWashTck = 0.275
            Case "DN80", "DE90"
                oBoltsetBltsDia = 16
                oBoltsetBltsNumb = 8
                oBoltsetBltsKDia = 16
                oBoltsetWashTck = 0.275
            Case "DN100", "DE110"
                oBoltsetBltsDia = 16
                oBoltsetBltsNumb = 8
                oBoltsetBltsKDia = 18
                oBoltsetWashTck = 0.275
            Case "DN125", "DE140"
                oBoltsetBltsDia = 16
                oBoltsetBltsNumb = 8
                oBoltsetBltsKDia = 21
                oBoltsetWashTck = 0.275
            Case "DN150", "DE160"
                oBoltsetBltsDia = 20
                oBoltsetBltsNumb = 8
                oBoltsetBltsKDia = 24
                oBoltsetWashTck = 0.3
            Case "DN200", "DE225"
                oBoltsetBltsDia = 20
                oBoltsetBltsNumb = 8
                oBoltsetBltsKDia = 29.5
                oBoltsetWashTck = 0.3
            Case "DN250", "DE280"
                oBoltsetBltsDia = 20
                oBoltsetBltsNumb = 12
                oBoltsetBltsKDia = 35
                oBoltsetWashTck = 0.4
            Case "DN300", "DE315"
                oBoltsetBltsDia = 20
                oBoltsetBltsNumb = 12
                oBoltsetBltsKDia = 40
                oBoltsetWashTck = 0.4
            Case "DN350", "DE355"
                oBoltsetBltsDia = 20
                oBoltsetBltsNumb = 16
                oBoltsetBltsKDia = 46
                oBoltsetWashTck = 0.4
            Case "DN400", "DE400"
                oBoltsetBltsDia = 24
                oBoltsetBltsNumb = 16
                oBoltsetBltsKDia = 51.5
                oBoltsetWashTck = 0.4
            Case "DN450", "DE450"
                oBoltsetBltsDia = 24
                oBoltsetBltsNumb = 20
                oBoltsetBltsKDia = 56.5
                oBoltsetWashTck = 0.4
            Case "DN500", "DE500"
                oBoltsetBltsDia = 24
                oBoltsetBltsNumb = 20
                oBoltsetBltsKDia = 62
                oBoltsetWashTck = 0.4
        End Select

        Dim oBoltsetBltsLngt As Double
        If oDistBoltfaces * 10 + (oBoltsetWashTck * 20) + (oBoltsetBltsDia * 0.8 * 1.5) > 120 Then
            MsgBox("Boltlength more then 120 mm !" & vbCrLf & "Place studbolts instead of bolts.", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine

        End If

        If oDistBoltfaces * 10 + (oBoltsetWashTck * 20) + (oBoltsetBltsDia * 0.8 * 1.5) <= 100 Then
            oBoltsetBltsLngt = Math.Ceiling((oDistBoltfaces * 10 + (oBoltsetWashTck * 20) + (oBoltsetBltsDia * 0.8 * 1.5)) / 5.0) * 5
            'MsgBox("Boltlength " & oBoltsetBltsLngt & "mm")
        End If
        If oDistBoltfaces * 10 + (oBoltsetWashTck * 20) + (oBoltsetBltsDia * 0.8 * 1.5) > 100 Then
            oBoltsetBltsLngt = Math.Ceiling((oDistBoltfaces * 10 + (oBoltsetWashTck * 20) + (oBoltsetBltsDia * 0.8 * 1.5)) / 10.0) * 10
            'MsgBox("Boltlength " & oBoltsetBltsLngt & "mm")
        End If

        '        MessageBox.Show("Bolt Set to use" & vbCrLf & oBoltsetBltsNumb & " Bolts M" & oBoltsetBltsDia & "x" & oBoltsetBltsLngt & "mm Long" & vbCrLf &
        '        oBoltsetBltsNumb & " Nuts M" & oBoltsetBltsDia & vbCrLf &
        '        oBoltsetBltsNumb * 2 & " Washers M" & oBoltsetBltsDia & vbCrLf &
        '                     "Assembly " & oItemName & "_" & "M" & oBoltsetBltsDia & "x" & oBoltsetBltsLngt & "mm" & "_" & oMaterial & ".iam", vbOKOnly)




        '       MsgBox("Bolt Set to use" & vbCrLf & oBoltsetBltsNumb & " Bolts M" & oBoltsetBltsDia & "x" & oBoltsetBltsLngt & "mm Long" & vbCrLf &
        '      oBoltsetBltsNumb & " Nuts M" & oBoltsetBltsDia & vbCrLf &
        '      oBoltsetBltsNumb * 2 & " Washers M" & oBoltsetBltsDia & vbCrLf &
        '                    "Assembly " & oItemName & "_" & "M" & oBoltsetBltsDia & "x" & oBoltsetBltsLngt & "mm" & "_" & oMaterial & ".iam", vbOKOnly + "4064", "Parts to use")

        Dim oBSAssmFileName As String
        oBSAssmFileName = oItemName & "_" & "M" & oBoltsetBltsDia & "x" & oBoltsetBltsLngt & "mm" & "_" & oFlg01Size & "_" & oMaterial & ".iam"

        Dim oBSPartFileName As String
        oBSPartFileName = oItemName & "_" & "M" & oBoltsetBltsDia & "x" & oBoltsetBltsLngt & "mm" & "_" & oFlg01Size & "_" & oMaterial & ".ipt"

        If Dir(lblProjectPath.Text & oBSAssmFileName) = "" Then
            GoTo StartCreationAssembly
        Else
            GoTo PlaceAssembly
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------



StartCreationAssembly:
        ProgressBar1.Visible = True
        ProgressBar1.Value = 10
        oInvApp.ScreenUpdating = False

        Dim oBoltass As AssemblyDocument
        ' Dim oAssDef As AssemblyComponentDefinition
        Dim oTG As TransientGeometry
        'oInvApp.ScreenUpdating = False
        'oInvApp = GetObject(, "Inventor.Application")
        oBoltass = oInvApp.Documents.Add(DocumentTypeEnum.kAssemblyDocumentObject)
        oBoltass = oInvApp.ActiveDocument
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oBoltass.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Bolt Sets"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Bolt Set is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oBoltass.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oBoltass.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = "BOLT SET " & "M" & oBoltsetBltsDia & "x" & oBoltsetBltsLngt & "mm"
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "DIN 933 DIN 934 DIN-125-1A "
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        oBoltass.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 20
        oInvApp.ScreenUpdating = False

        If Dir(lblProjectPath.Text & "VBP\" & oBSPartFileName) = "" Then
            GoTo StartCreationPart
        Else
            GoTo PlaceAssembly
        End If


StartCreationPart:


        Dim oPartDoc As PartDocument
        Dim oPartDef As PartComponentDefinition
        oPartDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oPartDoc = oInvApp.ActiveDocument
        oPartDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry

        'BoltBody

        Dim oSketch01 As PlanarSketch
        oSketch01 = oPartDef.Sketches.Add(oPartDef.WorkPlanes.Item(1))

        Dim oStartBoltAngle As Double
        oStartBoltAngle = (360 / oBoltsetBltsNumb / 2) * pi / 180

        Dim oCenterPoint As SketchPoint
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d((oBoltsetBltsKDia / 2) * (Math.Sin(oStartBoltAngle)), (oBoltsetBltsKDia / 2) * (Math.Cos(oStartBoltAngle))), False)

        Dim oCircles As SketchCircles
        oCircles = oSketch01.SketchCircles

        Dim oCircle1 As SketchCircle
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oBoltsetBltsDia / 10) / 2)

        Dim oProfile As Profile
        oProfile = oSketch01.Profiles.AddForSolid

        Dim oExtrDef As ExtrudeDefinition
        oExtrDef = oPartDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef.SetDistanceExtent(oBoltsetBltsLngt / 10 - oBoltsetWashTck, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)

        Dim oExtrusion As ExtrudeFeature
        oExtrusion = oPartDef.Features.ExtrudeFeatures.Add(oExtrDef)

        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 30
        oInvApp.ScreenUpdating = False

        'Washer1

        Dim oSketch02 As PlanarSketch
        oSketch02 = oPartDef.Sketches.Add(oPartDef.WorkPlanes.Item(1))

        Dim oCenterPoint2 As SketchPoint
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d((oBoltsetBltsKDia / 2) * (Math.Sin(oStartBoltAngle)), (oBoltsetBltsKDia / 2) * (Math.Cos(oStartBoltAngle))), False)

        Dim oCircles2 As SketchCircles
        oCircles2 = oSketch02.SketchCircles

        Dim oCircle2 As SketchCircle
        oCircle2 = oCircles2.AddByCenterRadius(oCenterPoint2, (oBoltsetBltsDia / 10))

        ' Dim oWorkAx As Object
        'oWorkAx = oPartDef.WorkAxes.Item(1)

        Dim oProfile2 As Profile
        oProfile2 = oSketch02.Profiles.AddForSolid

        Dim oExtrDef2 As ExtrudeDefinition
        oExtrDef2 = oPartDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef2.SetDistanceExtent(oBoltsetWashTck, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)

        Dim oExtrusion2 As ExtrudeFeature
        oExtrusion2 = oPartDef.Features.ExtrudeFeatures.Add(oExtrDef2)

        'BoltHead

        Dim oSketch03 As PlanarSketch
        oSketch03 = oPartDef.Sketches.Add(oPartDef.WorkPlanes.Item(1))

        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine

        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d

        pnt1 = oTG.CreatePoint2d(((oBoltsetBltsKDia / 2) * (Math.Sin(oStartBoltAngle)) + (oBoltsetBltsDia / 20 * 1.6) * Math.Tan(30 * pi / 180)), ((oBoltsetBltsKDia / 2) * (Math.Cos(oStartBoltAngle))) + (oBoltsetBltsDia / 20 * 1.6)) ' point 1
        pnt2 = oTG.CreatePoint2d(((oBoltsetBltsKDia / 2) * (Math.Sin(oStartBoltAngle))) + (oBoltsetBltsDia / 20 * 1.6) / (Math.Cos(30 * pi / 180)), (oBoltsetBltsKDia / 2) * (Math.Cos(oStartBoltAngle))) ' point 2
        pnt3 = oTG.CreatePoint2d(((oBoltsetBltsKDia / 2) * (Math.Sin(oStartBoltAngle)) + (oBoltsetBltsDia / 20 * 1.6) * Math.Tan(30 * pi / 180)), ((oBoltsetBltsKDia / 2) * (Math.Cos(oStartBoltAngle))) - (oBoltsetBltsDia / 20 * 1.6)) ' point 3
        pnt4 = oTG.CreatePoint2d(((oBoltsetBltsKDia / 2) * (Math.Sin(oStartBoltAngle)) - (oBoltsetBltsDia / 20 * 1.6) * Math.Tan(30 * pi / 180)), ((oBoltsetBltsKDia / 2) * (Math.Cos(oStartBoltAngle))) - (oBoltsetBltsDia / 20 * 1.6)) ' point 4
        pnt5 = oTG.CreatePoint2d(((oBoltsetBltsKDia / 2) * (Math.Sin(oStartBoltAngle))) - (oBoltsetBltsDia / 20 * 1.6) / (Math.Cos(30 * pi / 180)), (oBoltsetBltsKDia / 2) * (Math.Cos(oStartBoltAngle))) ' point 5
        pnt6 = oTG.CreatePoint2d(((oBoltsetBltsKDia / 2) * (Math.Sin(oStartBoltAngle)) - (oBoltsetBltsDia / 20 * 1.6) * Math.Tan(30 * pi / 180)), ((oBoltsetBltsKDia / 2) * (Math.Cos(oStartBoltAngle))) + (oBoltsetBltsDia / 20 * 1.6)) ' point 6

        ln1 = oSketch03.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch03.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch03.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch03.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch03.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch03.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, ln1.StartSketchPoint)

        Dim oProfile3 As Profile
        oProfile3 = oSketch03.Profiles.AddForSolid
        Dim oExtrDef3 As ExtrudeDefinition
        oExtrDef3 = oPartDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile3, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef3.SetDistanceExtent(oBoltsetBltsDia * 0.8 / 10 + oBoltsetWashTck, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        Dim oExtrusion3 As ExtrudeFeature
        oExtrusion3 = oPartDef.Features.ExtrudeFeatures.Add(oExtrDef3)
        Dim xAxis As WorkAxis
        xAxis = oPartDef.WorkAxes.Item(1)

        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 50
        oInvApp.ScreenUpdating = False

        Dim oObjColl As ObjectCollection
        oObjColl = oInvApp.TransientObjects.CreateObjectCollection()
        oObjColl.Add(oExtrusion2)
        Dim oWashPattrn As RectangularPatternFeatureDefinition
        oWashPattrn = oPartDef.Features.RectangularPatternFeatures.CreateDefinition(oObjColl, xAxis, False, 2, oDistBoltfaces + oBoltsetWashTck)
        Call oPartDef.Features.RectangularPatternFeatures.AddByDefinition(oWashPattrn)

        Dim oObjColl2 As ObjectCollection
        oObjColl2 = oInvApp.TransientObjects.CreateObjectCollection()
        oObjColl2.Add(oExtrusion3)
        Dim oNutPattrn As RectangularPatternFeatureDefinition
        oNutPattrn = oPartDef.Features.RectangularPatternFeatures.CreateDefinition(oObjColl2, xAxis, False, 2, oDistBoltfaces + oBoltsetWashTck + oBoltsetBltsDia * 0.8 / 10)
        Call oPartDef.Features.RectangularPatternFeatures.AddByDefinition(oNutPattrn)

        Dim oObjColl3 As ObjectCollection
        oObjColl3 = oInvApp.TransientObjects.CreateObjectCollection()
        Call oObjColl3.Add(oPartDef.Features("Extrusion1"))
        Call oObjColl3.Add(oPartDef.Features("Extrusion2"))
        Call oObjColl3.Add(oPartDef.Features("Extrusion3"))
        Call oObjColl3.Add(oPartDef.Features("Rectangular Pattern1"))
        Call oObjColl3.Add(oPartDef.Features("Rectangular Pattern2"))
        Call oPartDef.Features.CircularPatternFeatures.Add(oObjColl3, xAxis, True, oBoltsetBltsNumb, 360 / oBoltsetBltsNumb * pi / 180, False, PatternComputeTypeEnum.kIdenticalCompute)
        'Dim docAssets As Assets
        'docAssets = oPartDoc.Assets
        ' Create a new appearance asset.
        Dim RS As RenderStyle
        Try
            RS = oPartDoc.RenderStyles.Item("Inox")
        Catch ex As Exception
            RS = oPartDoc.RenderStyles.Add("Inox")
            RS.Reflectivity = 35
            RS.SetDiffuseColor(240, 240, 240)  'Grey
        End Try
        Call oPartDef.Features.ExtrudeFeatures.Item(1).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        Call oPartDef.Features.ExtrudeFeatures.Item(2).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        Call oPartDef.Features.ExtrudeFeatures.Item(3).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        Call oPartDef.Features.RectangularPatternFeatures.Item(1).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        Call oPartDef.Features.RectangularPatternFeatures.Item(2).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        Call oPartDef.Features.CircularPatternFeatures.Item(1).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        oPartDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits
        oPartDoc._ExcludeFromBOM = True
        oPartDoc.SaveAs(lblProjectPath.Text & "VBP\" & oBSPartFileName, False)
        oPartDoc.Close()

        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 60
        oInvApp.ScreenUpdating = False

        'Place the bolts into the assembly



        oBoltass = oInvApp.ActiveDocument
        Dim trans As Matrix
        trans = oInvApp.TransientGeometry.CreateMatrix
        Dim BoltOcc As ComponentOccurrence
        BoltOcc = oBoltass.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & "VBP\" & oBSPartFileName), trans)
        ' BoltOcc.BOMStructure = BOMStructureEnum.kReferenceBOMStructure
        BoltOcc.Grounded = True


        'Make the virtual parts

        Dim VirOcc As ComponentOccurrences
        VirOcc = oBoltass.ComponentDefinition.Occurrences

        Dim identity As Matrix
        identity = oInvApp.TransientGeometry.CreateMatrix

        Dim Bolt1Occ As ComponentOccurrence
        Bolt1Occ = VirOcc.AddVirtual("Bolt M" & oBoltsetBltsDia & "x" & oBoltsetBltsLngt & "mm" & " " & oMaterial, identity)

        'VIRTUAL BOLTS

        Select Case oMaterial
            Case "8.8"
                Dim docAssets As Assets
                docAssets = oBoltass.Assets
                Dim oNewMat As Asset
                oNewMat = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "8.8", "8.8")
                Dim VirtualDef As VirtualComponentDefinition
                VirtualDef = TryCast(Bolt1Occ.Definition, VirtualComponentDefinition)
                VirtualDef.Material = oBoltass.Materials.Item("8.8")
                Dim propSet4 As PropertySet
                propSet4 = VirtualDef.PropertySets.Item("Design Tracking Properties")
                ' Edit the values of the description property.
                propSet4.ItemByPropId(29).Value = "ISO 4017 / DIN 933"
            Case "A2"
                Dim docAssets As Assets
                docAssets = oBoltass.Assets
                Dim oNewMat As Asset
                oNewMat = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "A2", "A2")
                Dim VirtualDef As VirtualComponentDefinition
                VirtualDef = TryCast(Bolt1Occ.Definition, VirtualComponentDefinition)
                VirtualDef.Material = oBoltass.Materials.Item("A2")
                Dim propSet4 As PropertySet
                propSet4 = VirtualDef.PropertySets.Item("Design Tracking Properties")
                ' Edit the values of the description property.
                propSet4.ItemByPropId(29).Value = "ISO 4017 / DIN 933"
            Case "A4"
                Dim docAssets As Assets
                docAssets = oBoltass.Assets
                Dim oNewMat As Asset
                oNewMat = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "A4", "A4")
                Dim VirtualDef As VirtualComponentDefinition
                VirtualDef = TryCast(Bolt1Occ.Definition, VirtualComponentDefinition)
                VirtualDef.Material = oBoltass.Materials.Item("A4")
                Dim propSet4 As PropertySet
                propSet4 = VirtualDef.PropertySets.Item("Design Tracking Properties")
                ' Edit the values of the description property.
                propSet4.ItemByPropId(29).Value = "ISO 4017 / DIN 933"
        End Select

        Dim A As Integer
        A = 2
        Do While A <= oBoltsetBltsNumb
            Call VirOcc.AddByComponentDefinition(Bolt1Occ.Definition, identity)
            A = A + 1
        Loop


        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 80
        oInvApp.ScreenUpdating = False

        'VIRTUAL NUT

        Dim Nut1Occ As ComponentOccurrence
        Nut1Occ = VirOcc.AddVirtual("Nut M" & oBoltsetBltsDia & " " & oMaterial, identity)
        Select Case oMaterial
            Case "8.8"

                Dim VirtualDef As VirtualComponentDefinition
                VirtualDef = TryCast(Nut1Occ.Definition, VirtualComponentDefinition)
                VirtualDef.Material = oBoltass.Materials.Item("8.8")
                Dim propSet5 As PropertySet
                propSet5 = VirtualDef.PropertySets.Item("Design Tracking Properties")
                ' Edit the values of the description property.
                propSet5.ItemByPropId(29).Value = "ISO 4032 / DIN 934"

            Case "A2"

                Dim VirtualDef As VirtualComponentDefinition
                VirtualDef = TryCast(Nut1Occ.Definition, VirtualComponentDefinition)
                VirtualDef.Material = oBoltass.Materials.Item("A2")
                Dim propSet5 As PropertySet
                propSet5 = VirtualDef.PropertySets.Item("Design Tracking Properties")
                ' Edit the values of the description property.
                propSet5.ItemByPropId(29).Value = "ISO 4032 / DIN 934"

            Case "A4"

                Dim VirtualDef As VirtualComponentDefinition
                VirtualDef = TryCast(Nut1Occ.Definition, VirtualComponentDefinition)
                VirtualDef.Material = oBoltass.Materials.Item("A4")
                Dim propSet5 As PropertySet
                propSet5 = VirtualDef.PropertySets.Item("Design Tracking Properties")
                ' Edit the values of the description property.
                propSet5.ItemByPropId(29).Value = "ISO 4032 / DIN 934"
        End Select
        Dim B As Integer
        B = 2
        Do While B <= oBoltsetBltsNumb
            Call VirOcc.AddByComponentDefinition(Nut1Occ.Definition, identity)
            B = B + 1
        Loop

        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 90
        oInvApp.ScreenUpdating = False


        'VIRTUAL WASHERS


        Dim Washer1Occ As ComponentOccurrence
        Washer1Occ = VirOcc.AddVirtual("Washer M" & oBoltsetBltsDia & " " & oMaterial, identity)

        Select Case oMaterial
            Case "8.8"
                Dim VirtualDef As VirtualComponentDefinition
                VirtualDef = TryCast(Washer1Occ.Definition, VirtualComponentDefinition)
                VirtualDef.Material = oBoltass.Materials.Item("8.8")
                Dim propSet6 As PropertySet
                propSet6 = VirtualDef.PropertySets.Item("Design Tracking Properties")
                ' Edit the values of the description property.
                propSet6.ItemByPropId(29).Value = "DIN-125-1A"
            Case "A2"
                Dim VirtualDef As VirtualComponentDefinition
                VirtualDef = TryCast(Washer1Occ.Definition, VirtualComponentDefinition)
                VirtualDef.Material = oBoltass.Materials.Item("A2")
                Dim propSet6 As PropertySet
                propSet6 = VirtualDef.PropertySets.Item("Design Tracking Properties")
                ' Edit the values of the description property.
                propSet6.ItemByPropId(29).Value = "DIN-125-1A"
            Case "A4"
                Dim VirtualDef As VirtualComponentDefinition
                VirtualDef = TryCast(Washer1Occ.Definition, VirtualComponentDefinition)
                VirtualDef.Material = oBoltass.Materials.Item("A4")
                Dim propSet6 As PropertySet
                propSet6 = VirtualDef.PropertySets.Item("Design Tracking Properties")
                ' Edit the values of the description property.
                propSet6.ItemByPropId(29).Value = "DIN-125-1A"
        End Select

        Dim C As Integer
        C = 2
        Do While C <= oBoltsetBltsNumb * 2
            Call VirOcc.AddByComponentDefinition(Washer1Occ.Definition, identity)
            C = C + 1
        Loop

        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 100
        oInvApp.ScreenUpdating = False

        Try
            oBoltass.SaveAs(lblProjectPath.Text & oBSAssmFileName, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oBoltass.Close()
        oInvApp.ScreenUpdating = True
        ProgressBar1.Visible = False

PlaceAssembly:
        'Insert BOLTSET
        asmDoc = oInvApp.ActiveDocument
        Dim trans2 As Matrix
        trans2 = oInvApp.TransientGeometry.CreateMatrix
        Dim BoltSubAssOcc As ComponentOccurrence
        BoltSubAssOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oBSAssmFileName), trans2)


        'Constrain BOLTSET to Boltface flange 1
        Dim oBoltAssDoc As AssemblyDocument
        oBoltAssDoc = BoltSubAssOcc.Definition.Document

        Dim oWPBoltAss As WorkPlane
        oWPBoltAss = oBoltAssDoc.ComponentDefinition.WorkPlanes.Item(1)
        Dim oWPBoltAssProx As WorkPlaneProxy = Nothing
        Call BoltSubAssOcc.CreateGeometryProxy(oWPBoltAss, oWPBoltAssProx)

        attrSets = oFlg1Doc.AttributeManager.FindAttributeSets("BoltFace")
        Dim oBoltFace As Face
        oBoltFace = attrSets.Item(1).Parent.Parent
        Dim oBoltFaceProxy As FaceProxy = Nothing
        Call oFlg1Occ.CreateGeometryProxy(oBoltFace, oBoltFaceProxy)

        Call asmDoc.ComponentDefinition.Constraints.AddFlushConstraint(oWPBoltAssProx, oBoltFaceProxy, 0)

        'Constrain BOLTSET to Centerline flange 1

        Dim oWAXBoltAss As WorkAxis
        oWAXBoltAss = oBoltAssDoc.ComponentDefinition.WorkAxes.Item(1)
        Dim oWAXBoltAssProx As WorkAxis = Nothing
        Call BoltSubAssOcc.CreateGeometryProxy(oWAXBoltAss, oWAXBoltAssProx)

        Dim oWAXFlg01 As WorkAxis
        oWAXFlg01 = oFlg1Doc.ComponentDefinition.WorkAxes.Item(1)
        Dim oWAXFlg01Proxy As WorkAxisProxy = Nothing
        Call oFlg1Occ.CreateGeometryProxy(oWAXFlg01, oWAXFlg01Proxy)

        Call asmDoc.ComponentDefinition.Constraints.AddMateConstraint(oWAXBoltAssProx, oWAXFlg01Proxy, 0)

        'Constrain BOLTSET Fixed to flange 1

        Dim oXZBolt As WorkPlane
        oXZBolt = oBoltAssDoc.ComponentDefinition.WorkPlanes.Item(2)
        Dim oXZBoltProx As WorkPlaneProxy = Nothing
        Call BoltSubAssOcc.CreateGeometryProxy(oXZBolt, oXZBoltProx)

        Dim oXZFlg01 As WorkPlane
        oXZFlg01 = oFlg1Doc.ComponentDefinition.WorkPlanes.Item(2)
        Dim oXZFlg01Proxy As WorkPlaneProxy = Nothing
        Call oFlg1Occ.CreateGeometryProxy(oXZFlg01, oXZFlg01Proxy)
        Try
            Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(oXZBoltProx, oXZFlg01Proxy, 0)
        Catch ex As Exception
            GoTo EndRoutine
        End Try

        'Constrain flange 2 Fixed to flange 1

        Dim oXZFlg02 As WorkPlane
        oXZFlg02 = oFlg2Doc.ComponentDefinition.WorkPlanes.Item(2)
        Dim oXZFlg02Proxy As WorkPlaneProxy = Nothing
        Call oFlg2Occ.CreateGeometryProxy(oXZFlg02, oXZFlg02Proxy)
        Try
            Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(oXZFlg02Proxy, oXZFlg01Proxy, 0)
        Catch ex As Exception
            GoTo EndRoutine
        End Try

        GoTo EndRoutine

ErrorHandler01:
        MsgBox("This is not a Flange" & vbCrLf & "Select a Flange", vbOKOnly + "4064", "ERROR 01")
        GoTo FirstFlangeSelection
ErrorHandler02:
        MsgBox("This is not a Flange" & vbCrLf & "Select a Flange", vbOKOnly + "4064", "ERROR 02")
        GoTo SecondFlangeSelection
ErrorHandler03:
        MsgBox("The Flanges are not Correctly placed. " & vbCrLf & "Replace the Flanges or," & vbCrLf & "Place Bolts Manually", vbOKOnly + "4064", "ERROR 03")
        GoTo EndRoutine
ErrorHandler04:
        MsgBox("This is the First Flange" & vbCrLf & "Select another Flange", vbOKOnly + "4064", "ERROR 04")
        GoTo SecondFlangeSelection
ErrorHandler05:
        MsgBox("The Flange Sizes are not Equal", vbOKOnly + "4064", "ERROR 05")
        GoTo EndRoutine
EndRoutine:
    End Sub










    Private Sub PlaceStudBoltSets()
        Dim pi As Double = Math.Acos(-1)
        Dim asmDoc As AssemblyDocument
        Dim oFlg1Occ As ComponentOccurrence
        Dim oFlg2Occ As ComponentOccurrence
        Dim attrSets As AttributeSetsEnumerator
        Dim attrSets2 As AttributeSetsEnumerator

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:

        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 2 Then
            MsgBox("Automated Bolt placement not possible." & vbCrLf & "Place Bolts Manually.", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If
        If asmDoc.FileSaveCounter < 1 Then
            MsgBox("Save the assembly before placing Bolts.", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

FirstFlangeSelection:


        Try
            Update()
            oFlg1Occ = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAssemblyOccurrenceFilter, "Select the first Flange.")
        Catch ex As Exception
            GoTo ErrorHandler01
        End Try
        If oFlg1Occ Is Nothing Then
            GoTo EndRoutine
        End If
        'Go to original document first flange
        Dim oFlg1Doc As PartDocument

        Try
            oFlg1Doc = oFlg1Occ.Definition.Document
        Catch ex As Exception
            GoTo ErrorHandler01
        End Try

        Dim oFlg1name = oFlg1Doc.DisplayName
        'MsgBox("First Part Selected" & vbCrLf & oFlg1name)
        'Lengte filename string
        Dim oFlg1nameLenght As Integer
        oFlg1nameLenght = Len(oFlg1name)
        Dim oFirst1_ As Integer
        oFirst1_ = oFlg1name.IndexOf("_")
        Dim oLast1_ As Integer
        oLast1_ = oFlg1name.LastIndexOf("_")

        'Check if A flange is selected
        Dim oFlangeType As String
        If oFlg1name.StartsWith("FlangeWN") = True Then
            oFlangeType = "FlangeWN"
        Else
            If oFlg1name.StartsWith("FlangeSO") = True Then
                oFlangeType = "FlangeSO"
            Else
                If oFlg1name.StartsWith("FlangeLJ") = True Then
                    oFlangeType = "FlangeLJ"
                Else
                    If oFlg1name.StartsWith("FlangeSW") = True Then
                        oFlangeType = "FlangeSW"
                    Else
                        If oFlg1name.StartsWith("BlindFlange") = True Then
                            oFlangeType = "BlindFlange"
                        Else
                            GoTo ErrorHandler01
                        End If
                    End If
                End If
            End If
        End If
        'MsgBox("First Flange Is A" & vbCrLf & oFlangeType)
        Dim oFlg01Size As String
        oFlg01Size = oFlg1name.Substring(oFirst1_ + 1, oFlg1nameLenght - oFirst1_ - (oFlg1nameLenght - oLast1_ + 1))
        'MsgBox("Size Flange is" & vbCrLf & oFlg01Size)

        Dim oCheckFlg01Size As String = ""
        Select Case oFlg01Size
            Case "DN15", "DE20"
                oCheckFlg01Size = "A"
            Case "DN20", "DE25"
                oCheckFlg01Size = "B"
            Case "DN25", "DE32"
                oCheckFlg01Size = "C"
            Case "DN32", "DE40"
                oCheckFlg01Size = "D"
            Case "DN40", "DE50"
                oCheckFlg01Size = "E"
            Case "DN50", "DE63"
                oCheckFlg01Size = "F"
            Case "DN65", "DE75"
                oCheckFlg01Size = "G"
            Case "DN80", "DE90"
                oCheckFlg01Size = "H"
            Case "DN100", "DE110"
                oCheckFlg01Size = "I"
            Case "DN125", "DE140"
                oCheckFlg01Size = "J"
            Case "DN150", "DE160"
                oCheckFlg01Size = "K"
            Case "DN200", "DE225"
                oCheckFlg01Size = "L"
            Case "DN250", "DE280"
                oCheckFlg01Size = "M"
            Case "DN300", "DE315"
                oCheckFlg01Size = "N"
            Case "DN350", "DE355"
                oCheckFlg01Size = "O"
            Case "DN400", "DE400"
                oCheckFlg01Size = "P"
            Case "DN450", "DE450"
                oCheckFlg01Size = "Q"
            Case "DN500", "DE500"
                oCheckFlg01Size = "R"
        End Select





        Dim oFlg01BoltFace As Face
        Dim oFlg01InsertEdge As Edge
        Dim oFlg01BoltFaceProxy As FaceProxy = Nothing
        Dim oFlg01InsertEdgeProxy As EdgeProxy = Nothing

        attrSets = oFlg1Doc.AttributeManager.FindAttributeSets("BoltFace")
        oFlg01BoltFace = attrSets.Item(1).Parent.Parent
        'Make faceproxy of the boltface
        Call oFlg1Occ.CreateGeometryProxy(oFlg01BoltFace, oFlg01BoltFaceProxy)
        If oFlangeType = "FlangeWN" Then
            attrSets = oFlg1Doc.AttributeManager.FindAttributeSets("InsertEdgesB")
            oFlg01InsertEdge = attrSets.Item(1).Parent.Parent
        Else
            attrSets = oFlg1Doc.AttributeManager.FindAttributeSets("InsertEdgesA")
            oFlg01InsertEdge = attrSets.Item(1).Parent.Parent
        End If
        'Make Edgeproxy of the insertedge A
        Call oFlg1Occ.CreateGeometryProxy(oFlg01InsertEdge, oFlg01InsertEdgeProxy)
        'Bereken de dikte van de flens ttz insert edge naar boltface
        Dim oFlg01Tick As Double
        'oFlg01Tick = oInvApp.MeasureTools.GetMinimumDistance(oFlg01BoltFace, oFlg01InsertEdge)
        oFlg01Tick = oInvApp.MeasureTools.GetMinimumDistance(oFlg01BoltFaceProxy, oFlg01InsertEdgeProxy)
        'MsgBox("First Flange Thickness" & vbCrLf & oFlg01Tick * 10 & "mm thick")
        'Selection second Flange


SecondFlangeSelection:





        Try
            oFlg2Occ = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAssemblyOccurrenceFilter, "Select the second Flange.")
        Catch ex As Exception
            GoTo ErrorHandler02
        End Try
        If oFlg2Occ Is oFlg1Occ Then
            GoTo ErrorHandler04
        End If

        If oFlg2Occ Is Nothing Then
            GoTo EndRoutine
        End If

        'Goto original document
        Dim oFlg2Doc As PartDocument
        Try
            oFlg2Doc = oFlg2Occ.Definition.Document
        Catch ex As Exception
            GoTo ErrorHandler02
        End Try

        Dim oFlg2name = oFlg2Doc.DisplayName
        'MsgBox("Second Part Selected" & vbCrLf & oFlg2name)
        'Lengte filename string
        Dim oFlg2nameLenght As Integer
        oFlg2nameLenght = Len(oFlg2name)
        Dim oFirst2_ As Integer
        oFirst2_ = oFlg2name.IndexOf("_")
        Dim oLast2_ As Integer
        oLast2_ = oFlg2name.LastIndexOf("_")

        'Check if A flange is selected
        Dim oFlange2Type As String
        If oFlg2name.StartsWith("FlangeWN") = True Then
            oFlange2Type = "FlangeWN"
        Else
            If oFlg2name.StartsWith("FlangeSO") = True Then
                oFlange2Type = "FlangeSO"
            Else
                If oFlg2name.StartsWith("FlangeLJ") = True Then
                    oFlange2Type = "FlangeLJ"
                Else
                    If oFlg2name.StartsWith("FlangeSW") = True Then
                        oFlange2Type = "FlangeSW"
                    Else
                        If oFlg2name.StartsWith("BlindFlange") = True Then
                            oFlange2Type = "BlindFlange"
                        Else
                            GoTo ErrorHandler02
                        End If
                    End If
                End If
            End If
        End If
        ' MsgBox("Second Flange Is A" & vbCrLf & oFlange2Type)

        Dim oFlg02Size As String
        oFlg02Size = oFlg2name.Substring(oFirst2_ + 1, oFlg2nameLenght - oFirst2_ - (oFlg2nameLenght - oLast2_ + 1))
        'MsgBox("Size Flange is" & vbCrLf & oFlg02Size)

        Dim oCheckFlg02Size As String = ""
        Select Case oFlg02Size
            Case "DN15", "DE20"
                oCheckFlg02Size = "A"
            Case "DN20", "DE25"
                oCheckFlg02Size = "B"
            Case "DN25", "DE32"
                oCheckFlg02Size = "C"
            Case "DN32", "DE40"
                oCheckFlg02Size = "D"
            Case "DN40", "DE50"
                oCheckFlg02Size = "E"
            Case "DN50", "DE63"
                oCheckFlg02Size = "F"
            Case "DN65", "DE75"
                oCheckFlg02Size = "G"
            Case "DN80", "DE90"
                oCheckFlg02Size = "H"
            Case "DN100", "DE110"
                oCheckFlg02Size = "I"
            Case "DN125", "DE140"
                oCheckFlg02Size = "J"
            Case "DN150", "DE160"
                oCheckFlg02Size = "K"
            Case "DN200", "DE225"
                oCheckFlg02Size = "L"
            Case "DN250", "DE280"
                oCheckFlg02Size = "M"
            Case "DN300", "DE315"
                oCheckFlg02Size = "N"
            Case "DN350", "DE355"
                oCheckFlg02Size = "O"
            Case "DN400", "DE400"
                oCheckFlg02Size = "P"
            Case "DN450", "DE450"
                oCheckFlg02Size = "Q"
            Case "DN500", "DE500"
                oCheckFlg02Size = "R"
        End Select

        If oCheckFlg01Size = oCheckFlg02Size Then
        Else
            GoTo ErrorHandler05
        End If

        Dim oFlg02BoltFace As Face
        Dim oFlg02InsertEdge As Edge
        Dim oFlg02BoltFaceProxy As FaceProxy = Nothing
        Dim oFlg02InsertEdgeProxy As EdgeProxy = Nothing

        attrSets2 = oFlg2Doc.AttributeManager.FindAttributeSets("BoltFace")
        oFlg02BoltFace = attrSets2.Item(1).Parent.Parent

        'Make faceproxy of the boltface

        Call oFlg2Occ.CreateGeometryProxy(oFlg02BoltFace, oFlg02BoltFaceProxy)
        If oFlange2Type = "FlangeWN" Then
            attrSets2 = oFlg2Doc.AttributeManager.FindAttributeSets("InsertEdgesB")
            oFlg02InsertEdge = attrSets2.Item(1).Parent.Parent
        Else
            attrSets2 = oFlg2Doc.AttributeManager.FindAttributeSets("InsertEdgesA")
            oFlg02InsertEdge = attrSets2.Item(1).Parent.Parent
        End If

        'Make Edgeproxy of the insertedge A
        Call oFlg2Occ.CreateGeometryProxy(oFlg02InsertEdge, oFlg02InsertEdgeProxy)

        'Bereken de dikte van de flens ttz insert edge naar boltface
        Dim oFlg02Tick As Double
        'oFlg02Tick = oInvApp.MeasureTools.GetMinimumDistance(oFlg02BoltFace, oFlg02InsertEdge)
        oFlg02Tick = oInvApp.MeasureTools.GetMinimumDistance(oFlg02BoltFaceProxy, oFlg02InsertEdgeProxy)
        'MsgBox("Second Flange Thickness" & vbCrLf & oFlg02Tick * 10 & "mm thick")
        'Distance between BoltFaces
        Dim oDistBoltfaces As Double
        oDistBoltfaces = oInvApp.MeasureTools.GetMinimumDistance(oFlg01BoltFaceProxy, oFlg02BoltFaceProxy)
        'MsgBox("Distance Between Boltfaces is." & vbCrLf & oDistBoltfaces * 10 & "mm")
        'Check the orietation of the flanges
        Dim oChkDist01 As Double
        oChkDist01 = oInvApp.MeasureTools.GetMinimumDistance(oFlg01BoltFaceProxy, oFlg02InsertEdgeProxy)
        Dim oChkDist02 As Double
        oChkDist02 = oInvApp.MeasureTools.GetMinimumDistance(oFlg02BoltFaceProxy, oFlg01InsertEdgeProxy)
        If oDistBoltfaces < oChkDist01 Then
            GoTo ErrorHandler03
        End If
        If oDistBoltfaces < oChkDist02 Then
            GoTo ErrorHandler03
        End If
        'Definition of the Bolts

        Dim oBoltsetBltsDia As Double
        Dim oBoltsetBltsNumb As Integer
        Dim oBoltsetBltsKDia As Double
        Dim oBoltsetWashTck As Double

        Select Case oFlg01Size
            Case "DN15", "DE20"
                oBoltsetBltsDia = 12
                oBoltsetBltsNumb = 4
                oBoltsetBltsKDia = 6.5
                oBoltsetWashTck = 0.225
            Case "DN20", "DE25"
                oBoltsetBltsDia = 12
                oBoltsetBltsNumb = 4
                oBoltsetBltsKDia = 7.5
                oBoltsetWashTck = 0.225
            Case "DN25", "DE32"
                oBoltsetBltsDia = 12
                oBoltsetBltsNumb = 4
                oBoltsetBltsKDia = 8.5
                oBoltsetWashTck = 0.225
            Case "DN32", "DE40"
                oBoltsetBltsDia = 16
                oBoltsetBltsNumb = 4
                oBoltsetBltsKDia = 10
                oBoltsetWashTck = 0.275
            Case "DN40", "DE50"
                oBoltsetBltsDia = 16
                oBoltsetBltsNumb = 4
                oBoltsetBltsKDia = 11
                oBoltsetWashTck = 0.275
            Case "DN50", "DE63"
                oBoltsetBltsDia = 16
                oBoltsetBltsNumb = 4
                oBoltsetBltsKDia = 12.5
                oBoltsetWashTck = 0.275
            Case "DN65", "DE75"
                oBoltsetBltsDia = 16
                oBoltsetBltsNumb = 4
                oBoltsetBltsKDia = 14.5
                oBoltsetWashTck = 0.275
            Case "DN80", "DE90"
                oBoltsetBltsDia = 16
                oBoltsetBltsNumb = 8
                oBoltsetBltsKDia = 16
                oBoltsetWashTck = 0.275
            Case "DN100", "DE110"
                oBoltsetBltsDia = 16
                oBoltsetBltsNumb = 8
                oBoltsetBltsKDia = 18
                oBoltsetWashTck = 0.275
            Case "DN125", "DE140"
                oBoltsetBltsDia = 16
                oBoltsetBltsNumb = 8
                oBoltsetBltsKDia = 21
                oBoltsetWashTck = 0.275
            Case "DN150", "DE160"
                oBoltsetBltsDia = 20
                oBoltsetBltsNumb = 8
                oBoltsetBltsKDia = 24
                oBoltsetWashTck = 0.3
            Case "DN200", "DE225"
                oBoltsetBltsDia = 20
                oBoltsetBltsNumb = 8
                oBoltsetBltsKDia = 29.5
                oBoltsetWashTck = 0.3
            Case "DN250", "DE280"
                oBoltsetBltsDia = 20
                oBoltsetBltsNumb = 12
                oBoltsetBltsKDia = 35
                oBoltsetWashTck = 0.4
            Case "DN300", "DE315"
                oBoltsetBltsDia = 20
                oBoltsetBltsNumb = 12
                oBoltsetBltsKDia = 40
                oBoltsetWashTck = 0.4
            Case "DN350", "DE355"
                oBoltsetBltsDia = 20
                oBoltsetBltsNumb = 16
                oBoltsetBltsKDia = 46
                oBoltsetWashTck = 0.4
            Case "DN400", "DE400"
                oBoltsetBltsDia = 24
                oBoltsetBltsNumb = 16
                oBoltsetBltsKDia = 51.5
                oBoltsetWashTck = 0.4
            Case "DN450", "DE450"
                oBoltsetBltsDia = 24
                oBoltsetBltsNumb = 20
                oBoltsetBltsKDia = 56.5
                oBoltsetWashTck = 0.4
            Case "DN500", "DE500"
                oBoltsetBltsDia = 24
                oBoltsetBltsNumb = 20
                oBoltsetBltsKDia = 62
                oBoltsetWashTck = 0.4
        End Select


        If oDistBoltfaces * 10 + (oBoltsetWashTck * 20) + (oBoltsetBltsDia * 0.8 * 1.5) <= 100 Then
            MsgBox("Boltlength is less then 100 mm !" & vbCrLf & "Place bolts instead of studbolts.", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine

        End If

        Dim oBoltsetBltsLngt As Double
        oBoltsetBltsLngt = Math.Ceiling((oDistBoltfaces * 10 + (oBoltsetWashTck * 20 * 2) + (oBoltsetBltsDia * 0.8 * 1.5 * 2)) / 5.0) * 5
        'MsgBox("Boltlength " & oBoltsetBltsLngt & "mm")


        Dim oBSAssmFileName As String
        oBSAssmFileName = oItemName & "_" & "M" & oBoltsetBltsDia & "x" & oBoltsetBltsLngt & "mm" & "_" & oFlg01Size & "_" & oMaterial & ".iam"

        Dim oBSPartFileName As String
        oBSPartFileName = oItemName & "_" & "M" & oBoltsetBltsDia & "x" & oBoltsetBltsLngt & "mm" & "_" & oFlg01Size & "_" & oMaterial & ".ipt"

        If Dir(lblProjectPath.Text & oBSAssmFileName) = "" Then
            GoTo StartCreationAssembly
        Else
            GoTo PlaceAssembly
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------



StartCreationAssembly:
        ProgressBar1.Visible = True
        ProgressBar1.Value = 10
        oInvApp.ScreenUpdating = False

        Dim oBoltass As AssemblyDocument
        ' Dim oAssDef As AssemblyComponentDefinition
        Dim oTG As TransientGeometry
        'oInvApp.ScreenUpdating = False
        'oInvApp = GetObject(, "Inventor.Application")
        oBoltass = oInvApp.Documents.Add(DocumentTypeEnum.kAssemblyDocumentObject)
        oBoltass = oInvApp.ActiveDocument
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oBoltass.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Stud Bolt Sets"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Studbolt Set is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oBoltass.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oBoltass.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = "STUDBOLT SET " & "M" & oBoltsetBltsDia & "x" & oBoltsetBltsLngt & "mm"
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "DIN 933 DIN 934 DIN-125-1A "
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        oBoltass.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 20
        oInvApp.ScreenUpdating = False

        If Dir(lblProjectPath.Text & "VBP\" & oBSPartFileName) = "" Then
            GoTo StartCreationPart
        Else
            GoTo PlaceAssembly
        End If


StartCreationPart:


        Dim oPartDoc As PartDocument
        Dim oPartDef As PartComponentDefinition
        oPartDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oPartDoc = oInvApp.ActiveDocument
        oPartDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry

        'BoltBody

        Dim oSketch01 As PlanarSketch
        oSketch01 = oPartDef.Sketches.Add(oPartDef.WorkPlanes.Item(1))

        Dim oStartBoltAngle As Double
        oStartBoltAngle = (360 / oBoltsetBltsNumb / 2) * pi / 180

        Dim oCenterPoint As SketchPoint
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d((oBoltsetBltsKDia / 2) * (Math.Sin(oStartBoltAngle)), (oBoltsetBltsKDia / 2) * (Math.Cos(oStartBoltAngle))), False)

        Dim oCircles As SketchCircles
        oCircles = oSketch01.SketchCircles

        Dim oCircle1 As SketchCircle
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oBoltsetBltsDia / 10) / 2)

        Dim oProfile As Profile
        oProfile = oSketch01.Profiles.AddForSolid

        Dim oExtrDef As ExtrudeDefinition
        oExtrDef = oPartDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef.SetDistanceExtent(oBoltsetBltsLngt / 10 - (oBoltsetWashTck * 2) - (oBoltsetBltsDia * 0.8 * 1.5 / 10), PartFeatureExtentDirectionEnum.kNegativeExtentDirection)

        Dim oExtrusion As ExtrudeFeature
        oExtrusion = oPartDef.Features.ExtrudeFeatures.Add(oExtrDef)

        Dim oExtrDef4 As ExtrudeDefinition
        oExtrDef4 = oPartDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef.SetDistanceExtent((oBoltsetWashTck * 2) + (oBoltsetBltsDia * 0.8 * 1.5 / 10), PartFeatureExtentDirectionEnum.kPositiveExtentDirection)

        Dim oExtrusion4 As ExtrudeFeature
        oExtrusion4 = oPartDef.Features.ExtrudeFeatures.Add(oExtrDef4)

        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 30
        oInvApp.ScreenUpdating = False

        'Washer1

        Dim oSketch02 As PlanarSketch
        oSketch02 = oPartDef.Sketches.Add(oPartDef.WorkPlanes.Item(1))

        Dim oCenterPoint2 As SketchPoint
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d((oBoltsetBltsKDia / 2) * (Math.Sin(oStartBoltAngle)), (oBoltsetBltsKDia / 2) * (Math.Cos(oStartBoltAngle))), False)

        Dim oCircles2 As SketchCircles
        oCircles2 = oSketch02.SketchCircles

        Dim oCircle2 As SketchCircle
        oCircle2 = oCircles2.AddByCenterRadius(oCenterPoint2, (oBoltsetBltsDia / 10))

        ' Dim oWorkAx As Object
        'oWorkAx = oPartDef.WorkAxes.Item(1)

        Dim oProfile2 As Profile
        oProfile2 = oSketch02.Profiles.AddForSolid

        Dim oExtrDef2 As ExtrudeDefinition
        oExtrDef2 = oPartDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef2.SetDistanceExtent(oBoltsetWashTck, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)

        Dim oExtrusion2 As ExtrudeFeature
        oExtrusion2 = oPartDef.Features.ExtrudeFeatures.Add(oExtrDef2)

        'BoltHead

        Dim oSketch03 As PlanarSketch
        oSketch03 = oPartDef.Sketches.Add(oPartDef.WorkPlanes.Item(1))

        Dim ln1 As SketchLine
        Dim ln2 As SketchLine
        Dim ln3 As SketchLine
        Dim ln4 As SketchLine
        Dim ln5 As SketchLine
        Dim ln6 As SketchLine

        Dim pnt1 As Point2d
        Dim pnt2 As Point2d
        Dim pnt3 As Point2d
        Dim pnt4 As Point2d
        Dim pnt5 As Point2d
        Dim pnt6 As Point2d

        pnt1 = oTG.CreatePoint2d(((oBoltsetBltsKDia / 2) * (Math.Sin(oStartBoltAngle)) + (oBoltsetBltsDia / 20 * 1.6) * Math.Tan(30 * pi / 180)), ((oBoltsetBltsKDia / 2) * (Math.Cos(oStartBoltAngle))) + (oBoltsetBltsDia / 20 * 1.6)) ' point 1
        pnt2 = oTG.CreatePoint2d(((oBoltsetBltsKDia / 2) * (Math.Sin(oStartBoltAngle))) + (oBoltsetBltsDia / 20 * 1.6) / (Math.Cos(30 * pi / 180)), (oBoltsetBltsKDia / 2) * (Math.Cos(oStartBoltAngle))) ' point 2
        pnt3 = oTG.CreatePoint2d(((oBoltsetBltsKDia / 2) * (Math.Sin(oStartBoltAngle)) + (oBoltsetBltsDia / 20 * 1.6) * Math.Tan(30 * pi / 180)), ((oBoltsetBltsKDia / 2) * (Math.Cos(oStartBoltAngle))) - (oBoltsetBltsDia / 20 * 1.6)) ' point 3
        pnt4 = oTG.CreatePoint2d(((oBoltsetBltsKDia / 2) * (Math.Sin(oStartBoltAngle)) - (oBoltsetBltsDia / 20 * 1.6) * Math.Tan(30 * pi / 180)), ((oBoltsetBltsKDia / 2) * (Math.Cos(oStartBoltAngle))) - (oBoltsetBltsDia / 20 * 1.6)) ' point 4
        pnt5 = oTG.CreatePoint2d(((oBoltsetBltsKDia / 2) * (Math.Sin(oStartBoltAngle))) - (oBoltsetBltsDia / 20 * 1.6) / (Math.Cos(30 * pi / 180)), (oBoltsetBltsKDia / 2) * (Math.Cos(oStartBoltAngle))) ' point 5
        pnt6 = oTG.CreatePoint2d(((oBoltsetBltsKDia / 2) * (Math.Sin(oStartBoltAngle)) - (oBoltsetBltsDia / 20 * 1.6) * Math.Tan(30 * pi / 180)), ((oBoltsetBltsKDia / 2) * (Math.Cos(oStartBoltAngle))) + (oBoltsetBltsDia / 20 * 1.6)) ' point 6

        ln1 = oSketch03.SketchLines.AddByTwoPoints(pnt1, pnt2)
        ln2 = oSketch03.SketchLines.AddByTwoPoints(ln1.EndSketchPoint, pnt3)
        ln3 = oSketch03.SketchLines.AddByTwoPoints(ln2.EndSketchPoint, pnt4)
        ln4 = oSketch03.SketchLines.AddByTwoPoints(ln3.EndSketchPoint, pnt5)
        ln5 = oSketch03.SketchLines.AddByTwoPoints(ln4.EndSketchPoint, pnt6)
        ln6 = oSketch03.SketchLines.AddByTwoPoints(ln5.EndSketchPoint, ln1.StartSketchPoint)

        Dim oProfile3 As Profile
        oProfile3 = oSketch03.Profiles.AddForSolid
        Dim oExtrDef3 As ExtrudeDefinition
        oExtrDef3 = oPartDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile3, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef3.SetDistanceExtent(oBoltsetBltsDia * 0.8 / 10 + oBoltsetWashTck, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
        Dim oExtrusion3 As ExtrudeFeature
        oExtrusion3 = oPartDef.Features.ExtrudeFeatures.Add(oExtrDef3)
        Dim xAxis As WorkAxis
        xAxis = oPartDef.WorkAxes.Item(1)

        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 50
        oInvApp.ScreenUpdating = False

        Dim oObjColl As ObjectCollection
        oObjColl = oInvApp.TransientObjects.CreateObjectCollection()
        oObjColl.Add(oExtrusion2)
        Dim oWashPattrn As RectangularPatternFeatureDefinition
        oWashPattrn = oPartDef.Features.RectangularPatternFeatures.CreateDefinition(oObjColl, xAxis, False, 2, oDistBoltfaces + oBoltsetWashTck)
        Call oPartDef.Features.RectangularPatternFeatures.AddByDefinition(oWashPattrn)

        Dim oObjColl2 As ObjectCollection
        oObjColl2 = oInvApp.TransientObjects.CreateObjectCollection()
        oObjColl2.Add(oExtrusion3)
        Dim oNutPattrn As RectangularPatternFeatureDefinition
        oNutPattrn = oPartDef.Features.RectangularPatternFeatures.CreateDefinition(oObjColl2, xAxis, False, 2, oDistBoltfaces + oBoltsetWashTck + oBoltsetBltsDia * 0.8 / 10)
        Call oPartDef.Features.RectangularPatternFeatures.AddByDefinition(oNutPattrn)

        Dim oObjColl3 As ObjectCollection
        oObjColl3 = oInvApp.TransientObjects.CreateObjectCollection()
        Call oObjColl3.Add(oPartDef.Features("Extrusion1"))
        Call oObjColl3.Add(oPartDef.Features("Extrusion2"))
        Call oObjColl3.Add(oPartDef.Features("Extrusion3"))
        Call oObjColl3.Add(oPartDef.Features("Extrusion4"))
        Call oObjColl3.Add(oPartDef.Features("Rectangular Pattern1"))
        Call oObjColl3.Add(oPartDef.Features("Rectangular Pattern2"))
        Call oPartDef.Features.CircularPatternFeatures.Add(oObjColl3, xAxis, True, oBoltsetBltsNumb, 360 / oBoltsetBltsNumb * pi / 180, False, PatternComputeTypeEnum.kIdenticalCompute)
        'Dim docAssets As Assets
        'docAssets = oPartDoc.Assets
        ' Create a new appearance asset.
        Dim RS As RenderStyle
        Try
            RS = oPartDoc.RenderStyles.Item("Inox")
        Catch ex As Exception
            RS = oPartDoc.RenderStyles.Add("Inox")
            RS.Reflectivity = 35
            RS.SetDiffuseColor(240, 240, 240)  'Grey
        End Try
        Call oPartDef.Features.ExtrudeFeatures.Item(1).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        Call oPartDef.Features.ExtrudeFeatures.Item(2).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        Call oPartDef.Features.ExtrudeFeatures.Item(3).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        Call oPartDef.Features.RectangularPatternFeatures.Item(1).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        Call oPartDef.Features.RectangularPatternFeatures.Item(2).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        Call oPartDef.Features.CircularPatternFeatures.Item(1).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        oPartDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits
        oPartDoc._ExcludeFromBOM = True
        oPartDoc.SaveAs(lblProjectPath.Text & "VBP\" & oBSPartFileName, False)
        oPartDoc.Close()

        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 60
        oInvApp.ScreenUpdating = False

        'Place the bolts into the assembly



        oBoltass = oInvApp.ActiveDocument
        Dim trans As Matrix
        trans = oInvApp.TransientGeometry.CreateMatrix
        Dim BoltOcc As ComponentOccurrence
        BoltOcc = oBoltass.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & "VBP\" & oBSPartFileName), trans)
        ' BoltOcc.BOMStructure = BOMStructureEnum.kReferenceBOMStructure
        BoltOcc.Grounded = True


        'Make the virtual parts

        Dim VirOcc As ComponentOccurrences
        VirOcc = oBoltass.ComponentDefinition.Occurrences

        Dim identity As Matrix
        identity = oInvApp.TransientGeometry.CreateMatrix

        Dim Bolt1Occ As ComponentOccurrence
        Bolt1Occ = VirOcc.AddVirtual("Studbolt M" & oBoltsetBltsDia & "x" & oBoltsetBltsLngt & "mm" & " " & oMaterial, identity)

        'VIRTUAL BOLTS

        Select Case oMaterial
            Case "8.8"
                Dim docAssets As Assets
                docAssets = oBoltass.Assets
                Dim oNewMat As Asset
                oNewMat = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "8.8", "8.8")
                Dim VirtualDef As VirtualComponentDefinition
                VirtualDef = TryCast(Bolt1Occ.Definition, VirtualComponentDefinition)
                VirtualDef.Material = oBoltass.Materials.Item("8.8")
                Dim propSet4 As PropertySet
                propSet4 = VirtualDef.PropertySets.Item("Design Tracking Properties")
                ' Edit the values of the description property.
                propSet4.ItemByPropId(29).Value = "DIN 975"
            Case "A2"
                Dim docAssets As Assets
                docAssets = oBoltass.Assets
                Dim oNewMat As Asset
                oNewMat = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "A2", "A2")
                Dim VirtualDef As VirtualComponentDefinition
                VirtualDef = TryCast(Bolt1Occ.Definition, VirtualComponentDefinition)
                VirtualDef.Material = oBoltass.Materials.Item("A2")
                Dim propSet4 As PropertySet
                propSet4 = VirtualDef.PropertySets.Item("Design Tracking Properties")
                ' Edit the values of the description property.
                propSet4.ItemByPropId(29).Value = "DIN 975"
            Case "A4"
                Dim docAssets As Assets
                docAssets = oBoltass.Assets
                Dim oNewMat As Asset
                oNewMat = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "A4", "A4")
                Dim VirtualDef As VirtualComponentDefinition
                VirtualDef = TryCast(Bolt1Occ.Definition, VirtualComponentDefinition)
                VirtualDef.Material = oBoltass.Materials.Item("A4")
                Dim propSet4 As PropertySet
                propSet4 = VirtualDef.PropertySets.Item("Design Tracking Properties")
                ' Edit the values of the description property.
                propSet4.ItemByPropId(29).Value = "DIN 975"
        End Select

        Dim A As Integer
        A = 2
        Do While A <= oBoltsetBltsNumb
            Call VirOcc.AddByComponentDefinition(Bolt1Occ.Definition, identity)
            A = A + 1
        Loop


        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 80
        oInvApp.ScreenUpdating = False

        'VIRTUAL NUT

        Dim Nut1Occ As ComponentOccurrence
        Nut1Occ = VirOcc.AddVirtual("Nut M" & oBoltsetBltsDia & " " & oMaterial, identity)
        Select Case oMaterial
            Case "8.8"

                Dim VirtualDef As VirtualComponentDefinition
                VirtualDef = TryCast(Nut1Occ.Definition, VirtualComponentDefinition)
                VirtualDef.Material = oBoltass.Materials.Item("8.8")
                Dim propSet5 As PropertySet
                propSet5 = VirtualDef.PropertySets.Item("Design Tracking Properties")
                ' Edit the values of the description property.
                propSet5.ItemByPropId(29).Value = "ISO 4032 / DIN 934"

            Case "A2"

                Dim VirtualDef As VirtualComponentDefinition
                VirtualDef = TryCast(Nut1Occ.Definition, VirtualComponentDefinition)
                VirtualDef.Material = oBoltass.Materials.Item("A2")
                Dim propSet5 As PropertySet
                propSet5 = VirtualDef.PropertySets.Item("Design Tracking Properties")
                ' Edit the values of the description property.
                propSet5.ItemByPropId(29).Value = "ISO 4032 / DIN 934"

            Case "A4"

                Dim VirtualDef As VirtualComponentDefinition
                VirtualDef = TryCast(Nut1Occ.Definition, VirtualComponentDefinition)
                VirtualDef.Material = oBoltass.Materials.Item("A4")
                Dim propSet5 As PropertySet
                propSet5 = VirtualDef.PropertySets.Item("Design Tracking Properties")
                ' Edit the values of the description property.
                propSet5.ItemByPropId(29).Value = "ISO 4032 / DIN 934"
        End Select
        Dim B As Integer
        B = 2
        Do While B <= oBoltsetBltsNumb * 2
            Call VirOcc.AddByComponentDefinition(Nut1Occ.Definition, identity)
            B = B + 1
        Loop

        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 90
        oInvApp.ScreenUpdating = False


        'VIRTUAL WASHERS


        Dim Washer1Occ As ComponentOccurrence
        Washer1Occ = VirOcc.AddVirtual("Washer M" & oBoltsetBltsDia & " " & oMaterial, identity)

        Select Case oMaterial
            Case "8.8"
                Dim VirtualDef As VirtualComponentDefinition
                VirtualDef = TryCast(Washer1Occ.Definition, VirtualComponentDefinition)
                VirtualDef.Material = oBoltass.Materials.Item("8.8")
                Dim propSet6 As PropertySet
                propSet6 = VirtualDef.PropertySets.Item("Design Tracking Properties")
                ' Edit the values of the description property.
                propSet6.ItemByPropId(29).Value = "DIN-125-1A"
            Case "A2"
                Dim VirtualDef As VirtualComponentDefinition
                VirtualDef = TryCast(Washer1Occ.Definition, VirtualComponentDefinition)
                VirtualDef.Material = oBoltass.Materials.Item("A2")
                Dim propSet6 As PropertySet
                propSet6 = VirtualDef.PropertySets.Item("Design Tracking Properties")
                ' Edit the values of the description property.
                propSet6.ItemByPropId(29).Value = "DIN-125-1A"
            Case "A4"
                Dim VirtualDef As VirtualComponentDefinition
                VirtualDef = TryCast(Washer1Occ.Definition, VirtualComponentDefinition)
                VirtualDef.Material = oBoltass.Materials.Item("A4")
                Dim propSet6 As PropertySet
                propSet6 = VirtualDef.PropertySets.Item("Design Tracking Properties")
                ' Edit the values of the description property.
                propSet6.ItemByPropId(29).Value = "DIN-125-1A"
        End Select

        Dim C As Integer
        C = 2
        Do While C <= oBoltsetBltsNumb * 2
            Call VirOcc.AddByComponentDefinition(Washer1Occ.Definition, identity)
            C = C + 1
        Loop

        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 100
        oInvApp.ScreenUpdating = False

        Try
            oBoltass.SaveAs(lblProjectPath.Text & oBSAssmFileName, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oBoltass.Close()
        oInvApp.ScreenUpdating = True
        ProgressBar1.Visible = False

PlaceAssembly:
        'Insert BOLTSET
        asmDoc = oInvApp.ActiveDocument
        Dim trans2 As Matrix
        trans2 = oInvApp.TransientGeometry.CreateMatrix
        Dim BoltSubAssOcc As ComponentOccurrence
        BoltSubAssOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oBSAssmFileName), trans2)


        'Constrain BOLTSET to Boltface flange 1
        Dim oBoltAssDoc As AssemblyDocument
        oBoltAssDoc = BoltSubAssOcc.Definition.Document

        Dim oWPBoltAss As WorkPlane
        oWPBoltAss = oBoltAssDoc.ComponentDefinition.WorkPlanes.Item(1)
        Dim oWPBoltAssProx As WorkPlaneProxy = Nothing
        Call BoltSubAssOcc.CreateGeometryProxy(oWPBoltAss, oWPBoltAssProx)

        attrSets = oFlg1Doc.AttributeManager.FindAttributeSets("BoltFace")
        Dim oBoltFace As Face
        oBoltFace = attrSets.Item(1).Parent.Parent
        Dim oBoltFaceProxy As FaceProxy = Nothing
        Call oFlg1Occ.CreateGeometryProxy(oBoltFace, oBoltFaceProxy)

        Call asmDoc.ComponentDefinition.Constraints.AddFlushConstraint(oWPBoltAssProx, oBoltFaceProxy, 0)

        'Constrain BOLTSET to Centerline flange 1

        Dim oWAXBoltAss As WorkAxis
        oWAXBoltAss = oBoltAssDoc.ComponentDefinition.WorkAxes.Item(1)
        Dim oWAXBoltAssProx As WorkAxis = Nothing
        Call BoltSubAssOcc.CreateGeometryProxy(oWAXBoltAss, oWAXBoltAssProx)

        Dim oWAXFlg01 As WorkAxis
        oWAXFlg01 = oFlg1Doc.ComponentDefinition.WorkAxes.Item(1)
        Dim oWAXFlg01Proxy As WorkAxisProxy = Nothing
        Call oFlg1Occ.CreateGeometryProxy(oWAXFlg01, oWAXFlg01Proxy)

        Call asmDoc.ComponentDefinition.Constraints.AddMateConstraint(oWAXBoltAssProx, oWAXFlg01Proxy, 0)

        'Constrain BOLTSET Fixed to flange 1

        Dim oXZBolt As WorkPlane
        oXZBolt = oBoltAssDoc.ComponentDefinition.WorkPlanes.Item(2)
        Dim oXZBoltProx As WorkPlaneProxy = Nothing
        Call BoltSubAssOcc.CreateGeometryProxy(oXZBolt, oXZBoltProx)

        Dim oXZFlg01 As WorkPlane
        oXZFlg01 = oFlg1Doc.ComponentDefinition.WorkPlanes.Item(2)
        Dim oXZFlg01Proxy As WorkPlaneProxy = Nothing
        Call oFlg1Occ.CreateGeometryProxy(oXZFlg01, oXZFlg01Proxy)
        Try
            Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(oXZBoltProx, oXZFlg01Proxy, 0)
        Catch ex As Exception
            GoTo EndRoutine
        End Try

        'Constrain flange 2 Fixed to flange 1

        Dim oXZFlg02 As WorkPlane
        oXZFlg02 = oFlg2Doc.ComponentDefinition.WorkPlanes.Item(2)
        Dim oXZFlg02Proxy As WorkPlaneProxy = Nothing
        Call oFlg2Occ.CreateGeometryProxy(oXZFlg02, oXZFlg02Proxy)
        Try
            Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(oXZFlg02Proxy, oXZFlg01Proxy, 0)
        Catch ex As Exception
            GoTo EndRoutine
        End Try

        GoTo EndRoutine

ErrorHandler01:
        MsgBox("This is not a Flange" & vbCrLf & "Select a Flange", vbOKOnly + "4064", "ERROR 01")
        GoTo FirstFlangeSelection
ErrorHandler02:
        MsgBox("This is not a Flange" & vbCrLf & "Select a Flange", vbOKOnly + "4064", "ERROR 02")
        GoTo SecondFlangeSelection
ErrorHandler03:
        MsgBox("The Flanges are not Correctly placed. " & vbCrLf & "Replace the Flanges or," & vbCrLf & "Place Bolts Manually", vbOKOnly + "4064", "ERROR 03")
        GoTo EndRoutine
ErrorHandler04:
        MsgBox("This is the First Flange" & vbCrLf & "Select another Flange", vbOKOnly + "4064", "ERROR 04")
        GoTo SecondFlangeSelection
ErrorHandler05:
        MsgBox("The Flange Sizes are not Equal", vbOKOnly + "4064", "ERROR 05")
        GoTo EndRoutine
EndRoutine:
    End Sub









    Private Sub PlacePipeClamp()
        '------------------------------------------------
        '
        '          PLACING PIPE CLAMPS
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oSketch01 As PlanarSketch
        Dim oSketch02 As PlanarSketch
        Dim oCenterPoint As SketchPoint
        Dim oCenterPoint2 As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oCirclesb As SketchCircles
        Dim oProfile As Profile
        Dim oProfileb As Profile
        Dim oExtrDef As ExtrudeDefinition
        Dim oExtrDefb As ExtrudeDefinition
        Dim oExtrusion As ExtrudeFeature
        Dim oExtrusionb As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim oPnt01 As Point2d
        Dim oPnt02 As Point2d
        Dim oPnt03 As Point2d
        Dim oPnt04 As Point2d
        Dim oLn01 As SketchLine
        Dim oLn02 As SketchLine
        Dim oLn03 As SketchLine
        Dim oLn04 As SketchLine
        Dim oPnt05 As Point2d
        Dim oPnt06 As Point2d
        Dim oPnt07 As Point2d
        Dim oPnt08 As Point2d
        Dim oLn05 As SketchLine
        Dim oLn06 As SketchLine
        Dim oLn07 As SketchLine
        Dim oLn08 As SketchLine
        Dim oH As Integer
        Dim oB As Integer
        Dim oDia As Double
        Dim oPartOcc As ComponentOccurrence
        Dim oPartDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim oPartAxis As Object


        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        Select Case oPipeSize
            Case "DN15", "DN20", "DN25", "DN32", "DN40"
                oH = 5
                oB = 30
                oDia = 10
            Case "DN50", "DN65", "DN80"
                oH = 6
                oB = 40
                oDia = 12
            Case "DN100", "DN125", "DN150", "DN200"
                oH = 8
                oB = 50
                oDia = 16
            Case "DN250", "DN300", "DN350"
                oH = 8
                oB = 60
                oDia = 20
            Case "DN400", "DN450", "DN500"
                oH = 10
                oB = 70
                oDia = 24
        End Select
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry

        oSketch01 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3))
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oPipeDia / 10) / 2 + oH / 10)
        oPnt01 = oTG.CreatePoint2d(oPipeDia / 2 / 10 + oB / 10, oH * 2 / 10)
        oPnt02 = oTG.CreatePoint2d(oPipeDia / 2 / 10 + oB / 10, -oH * 2 / 10)
        oPnt03 = oTG.CreatePoint2d(-oPipeDia / 2 / 10 - oB / 10, -oH * 2 / 10)
        oPnt04 = oTG.CreatePoint2d(-oPipeDia / 2 / 10 - oB / 10, oH * 2 / 10)
        oLn01 = oSketch01.SketchLines.AddByTwoPoints(oPnt01, oPnt02)
        oLn02 = oSketch01.SketchLines.AddByTwoPoints(oLn01.EndSketchPoint, oPnt03)
        oLn03 = oSketch01.SketchLines.AddByTwoPoints(oLn02.EndSketchPoint, oPnt04)
        oLn04 = oSketch01.SketchLines.AddByTwoPoints(oLn03.EndSketchPoint, oLn01.StartSketchPoint)
        oProfile = oSketch01.Profiles.AddForSolid
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kNewBodyOperation)

        Call oExtrDef.SetDistanceExtent(oB / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)

        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)

        oSketch02 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3))
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCirclesb = oSketch02.SketchCircles
        oCircle2 = oCirclesb.AddByCenterRadius(oCenterPoint2, (oPipeDia / 10) / 2)
        oPnt05 = oTG.CreatePoint2d(oPipeDia / 2 / 10 + oB / 10, oH / 10)
        oPnt06 = oTG.CreatePoint2d(oPipeDia / 2 / 10 + oB / 10, -oH / 10)
        oPnt07 = oTG.CreatePoint2d(-oPipeDia / 2 / 10 - oB / 10, -oH / 10)
        oPnt08 = oTG.CreatePoint2d(-oPipeDia / 2 / 10 - oB / 10, oH / 10)
        oLn05 = oSketch02.SketchLines.AddByTwoPoints(oPnt05, oPnt06)
        oLn06 = oSketch02.SketchLines.AddByTwoPoints(oLn05.EndSketchPoint, oPnt07)
        oLn07 = oSketch02.SketchLines.AddByTwoPoints(oLn06.EndSketchPoint, oPnt08)
        oLn08 = oSketch02.SketchLines.AddByTwoPoints(oLn07.EndSketchPoint, oLn05.StartSketchPoint)
        oProfileb = oSketch02.Profiles.AddForSolid
        oExtrDefb = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfileb, PartFeatureOperationEnum.kCutOperation)

        Call oExtrDefb.SetDistanceExtent(oB / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)

        oExtrusionb = oDef.Features.ExtrudeFeatures.Add(oExtrDefb)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Pipe Supports"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Pipe Clamp is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "DIN 3567-A"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim Insertaxis As Object
        Insertaxis = oDef.WorkAxes(3)
        Dim attribSets As AttributeSets
        attribSets = Insertaxis.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertAxis")
        'Dim attrib As Attribute

        Select Case oMaterial
            Case "GALVA"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "GALVA", "GALVA")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("GALVA")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("GALVA")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("GALVA")
                    RS.Reflectivity = 25
                    RS.SetDiffuseColor(163, 163, 163)  'Galva
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            'Dim trans As Matrix
            'trans = oInvApp.TransientGeometry.CreateMatrix
            'elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            'elbowOcc.Grounded = True
            MsgBox("A Pipe is needed to place a Pipe Clamp", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If
        Me.Hide()

        Dim oHeader As FaceProxy
        oHeader = oInvApp.CommandManager.Pick(SelectionFilterEnum.kPartFaceCylindricalFilter, "Select A Pipe.")
        If oHeader Is Nothing Then
            GoTo EndRoutine
        End If

        Dim oHeaderpart As PartDocument
        oHeaderpart = oHeader.Parent.CreatedByFeature.Parent.Document

        Dim oHeaderocc As ComponentOccurrence
        oHeaderocc = oHeader.ContainingOccurrence

        Dim oheaderaxis As Object
        oheaderaxis = oHeaderpart.ComponentDefinition.WorkAxes.Item(3)

        Dim oheaderaxisproxy As WorkAxisProxy
        oheaderaxisproxy = Nothing
        Call oHeaderocc.CreateGeometryProxy(oheaderaxis, oheaderaxisproxy)

        oPartOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        oPartDoc = oPartOcc.Definition.Document

        attrSets = oPartDoc.AttributeManager.FindAttributeSets("InsertAxis")
        oPartAxis = attrSets.Item(1).Parent.Parent

        Dim elbowEdgeProxy As WorkAxisProxy
        elbowEdgeProxy = Nothing
        Call oPartOcc.CreateGeometryProxy(oPartAxis, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddMateConstraint(oheaderaxisproxy, elbowEdgeProxy, 0)

EndRoutine:
        Me.Show()
    End Sub

    Private Sub PlaceUBolt()
        '------------------------------------------------
        '
        '          PLACING U-BOLTS
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oWorkplane1 As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oSketch02 As PlanarSketch
        Dim oSketch03 As PlanarSketch
        Dim oCenterPoint As SketchPoint
        Dim oCenterPoint2 As SketchPoint
        Dim oCenterPoint3 As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oCircle3 As SketchCircle
        Dim oCirclesb As SketchCircles
        Dim oProfile As Profile
        Dim oProfileb As Profile
        Dim oProfilec As Profile
        Dim oExtrDef As ExtrudeDefinition
        Dim oExtrDefc As ExtrudeDefinition
        Dim oExtrusion As ExtrudeFeature
        Dim oExtrusionc As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim oPnt01 As Point2d
        Dim oPnt02 As Point2d
        Dim oPnt03 As Point2d
        Dim oPnt04 As Point2d
        Dim oLn01 As SketchLine
        Dim oLn02 As SketchLine
        Dim oLn03 As SketchLine
        Dim oLn04 As SketchLine
        Dim oPnt05 As Point2d
        Dim oPnt06 As Point2d
        Dim oLn05 As SketchLine
        Dim oLn06 As SketchLine
        Dim oX As Integer
        Dim oM As Integer
        Dim oA As Integer
        Dim oPartOcc As ComponentOccurrence
        Dim oPartDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim oPartAxis As Object
        Dim oRevaxis As Object
        pi = Math.Acos(-1)

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        Select Case oPipeSize
            Case "DN15"
                oX = 38
                oM = 10
                oA = 33
            Case "DN20"
                oX = 45
                oM = 10
                oA = 40
            Case "DN25"
                oX = 47
                oM = 10
                oA = 48
            Case "DN32"
                oX = 53
                oM = 10
                oA = 56
            Case "DN40"
                oX = 56
                oM = 10
                oA = 62
            Case "DN50"
                oX = 65
                oM = 12
                oA = 76
            Case "DN65"
                oX = 72
                oM = 12
                oA = 94
            Case "DN80"
                oX = 79
                oM = 12
                oA = 106
            Case "DN100"
                oX = 95
                oM = 16
                oA = 136
            Case "DN125"
                oX = 101
                oM = 16
                oA = 164
            Case "DN150"
                oX = 113
                oM = 16
                oA = 192
            Case "DN200"
                oX = 149
                oM = 20
                oA = 248
            Case "DN250"
                oX = 173
                oM = 20
                oA = 302
            Case "DN300"
                oX = 199
                oM = 20
                oA = 352
            Case "DN350"
                oX = 222
                oM = 24
                oA = 402
            Case "DN400"
                oX = 249
                oM = 24
                oA = 452
            Case "DN450"
                oX = 275
                oM = 24
                oA = 500
            Case "DN500"
                oX = 300
                oM = 24
                oA = 554
        End Select

        ProgressBar1.Visible = True
        ProgressBar1.Value = 10
        oInvApp.ScreenUpdating = False

        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry


        oSketch01 = oDef.Sketches.Add(oDef.WorkPlanes.Item(2))
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(oA / 10 / 2, 0), False)
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oM / 10) / 2)
        oRevaxis = oDef.WorkAxes.Item(3)
        Dim oRev01 As RevolveFeature

        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 20
        oInvApp.ScreenUpdating = False

        Dim Angle As Double
        Angle = pi
        oProfile = oSketch01.Profiles.AddForSolid
        oRev01 = oDef.Features.RevolveFeatures.AddByAngle(oProfile, oRevaxis, Angle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kNewBodyOperation)

        oSketch02 = oDef.Sketches.Add(oDef.WorkPlanes.Item(2))
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(oA / 10 / 2, 0), False)
        oCirclesb = oSketch02.SketchCircles
        oCircle2 = oCirclesb.AddByCenterRadius(oCenterPoint2, (oM / 10) / 2)
        oCenterPoint3 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(-oA / 10 / 2, 0), False)
        oCircle3 = oCirclesb.AddByCenterRadius(oCenterPoint3, (oM / 10) / 2)
        oProfileb = oSketch02.Profiles.AddForSolid
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfileb, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef.SetDistanceExtent(oX / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)
        oWorkplane1 = oDef.WorkPlanes.AddByPlaneAndOffset(oDef.WorkPlanes.Item(2), -oPipeDia / 2 / 10)
        oSketch03 = oDef.Sketches.Add(oWorkplane1)

        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 40
        oInvApp.ScreenUpdating = False

        oPnt01 = oTG.CreatePoint2d((oA / 20) - ((oM / 20 * 1.7) / Math.Cos(30 * pi / 180)), 0)
        oPnt02 = oTG.CreatePoint2d((oA / 20) - (Math.Tan(30 * pi / 180) * (oM / 20 * 1.7)), (oM / 20 * 1.7))
        oPnt03 = oTG.CreatePoint2d((oA / 20) + (Math.Tan(30 * pi / 180) * (oM / 20 * 1.7)), (oM / 20 * 1.7))
        oPnt04 = oTG.CreatePoint2d((oA / 20) + ((oM / 20 * 1.7) / Math.Cos(30 * pi / 180)), 0)
        oPnt05 = oTG.CreatePoint2d((oA / 20) + (Math.Tan(30 * pi / 180) * (oM / 20 * 1.7)), (-oM / 20 * 1.7))
        oPnt06 = oTG.CreatePoint2d((oA / 20) - (Math.Tan(30 * pi / 180) * (oM / 20 * 1.7)), (-oM / 20 * 1.7))

        oLn01 = oSketch03.SketchLines.AddByTwoPoints(oPnt01, oPnt02)
        oLn02 = oSketch03.SketchLines.AddByTwoPoints(oLn01.EndSketchPoint, oPnt03)
        oLn03 = oSketch03.SketchLines.AddByTwoPoints(oLn02.EndSketchPoint, oPnt04)
        oLn04 = oSketch03.SketchLines.AddByTwoPoints(oLn03.EndSketchPoint, oPnt05)
        oLn05 = oSketch03.SketchLines.AddByTwoPoints(oLn04.EndSketchPoint, oPnt06)
        oLn06 = oSketch03.SketchLines.AddByTwoPoints(oLn05.EndSketchPoint, oLn01.StartSketchPoint)

        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 60
        oInvApp.ScreenUpdating = False

        oProfilec = oSketch03.Profiles.AddForSolid
        oExtrDefc = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfilec, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDefc.SetDistanceExtent(oM / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusionc = oDef.Features.ExtrudeFeatures.Add(oExtrDefc)
        oWorkplane1.Visible = False

        Dim xAxis As WorkAxis
        xAxis = oDef.WorkAxes.Item(1)
        Dim oObjColl2 As ObjectCollection
        oObjColl2 = oInvApp.TransientObjects.CreateObjectCollection()
        oObjColl2.Add(oExtrusionc)
        Dim oNutPattrn As RectangularPatternFeatureDefinition
        oNutPattrn = oDef.Features.RectangularPatternFeatures.CreateDefinition(oObjColl2, xAxis, True, 2, oA / 10)
        Call oDef.Features.RectangularPatternFeatures.AddByDefinition(oNutPattrn)

        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 80
        oInvApp.ScreenUpdating = False


        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Pipe Supports"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This U-Bolt is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "DIN 3570-A"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 90
        oInvApp.ScreenUpdating = False

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim Insertaxis As Object
        Insertaxis = oDef.WorkAxes(3)
        Dim attribSets As AttributeSets
        attribSets = Insertaxis.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertAxis")
        'Dim attrib As Attribute

        Select Case oMaterial
            Case "8.8"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "8.8", "8.8")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("8.8")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 25
                    RS.SetDiffuseColor(163, 163, 163)  'Galva
                End Try


                Call oRev01.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusionc.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.RectangularPatternFeatures.Item(1).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                'Call oNutPattrn.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "A2"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "A2", "A2")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("A2")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oRev01.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusionc.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oDef.Features.RectangularPatternFeatures.Item(1).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                'Call oDef.Features.RectangularPatternFeatures.Item(2).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                'Call oExtrusionc.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                'Call oNutPattrn.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        End Select





        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception

            MsgBox("The U-Bolt could not be placed.", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End Try
        oInvDoc.Close()
        oInvApp.ScreenUpdating = True
        ProgressBar1.Value = 100
        oInvApp.ScreenUpdating = False

        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            'Dim trans As Matrix
            'trans = oInvApp.TransientGeometry.CreateMatrix
            'elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            'elbowOcc.Grounded = True
            MsgBox("A Pipe is needed to place a U-Bolt", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If
        Me.Hide()

        Dim oHeader As FaceProxy
        oHeader = oInvApp.CommandManager.Pick(SelectionFilterEnum.kPartFaceCylindricalFilter, "Select A Pipe.")
        If oHeader Is Nothing Then
            GoTo EndRoutine
        End If

        Dim oHeaderpart As PartDocument
        oHeaderpart = oHeader.Parent.CreatedByFeature.Parent.Document

        Dim oHeaderocc As ComponentOccurrence
        oHeaderocc = oHeader.ContainingOccurrence

        Dim oheaderaxis As Object
        oheaderaxis = oHeaderpart.ComponentDefinition.WorkAxes.Item(3)

        Dim oheaderaxisproxy As WorkAxisProxy
        oheaderaxisproxy = Nothing
        Call oHeaderocc.CreateGeometryProxy(oheaderaxis, oheaderaxisproxy)

        oPartOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        oPartDoc = oPartOcc.Definition.Document

        attrSets = oPartDoc.AttributeManager.FindAttributeSets("InsertAxis")
        oPartAxis = attrSets.Item(1).Parent.Parent

        Dim elbowEdgeProxy As WorkAxisProxy
        elbowEdgeProxy = Nothing
        Call oPartOcc.CreateGeometryProxy(oPartAxis, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddMateConstraint(oheaderaxisproxy, elbowEdgeProxy, 0)
        GoTo EndRoutine
EndRoutine:
        oInvApp.ScreenUpdating = True
        ProgressBar1.Visible = False
        Me.Show()
    End Sub

    Private Sub PlaceDammgulast()
        '------------------------------------------------
        '
        '          PLACING DAMMGULAST PIPE CLAMPS
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oSketch01 As PlanarSketch
        Dim oSketch02 As PlanarSketch
        Dim oCenterPoint As SketchPoint
        Dim oCenterPoint2 As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oCircle4 As SketchCircle
        Dim oCirclesb As SketchCircles
        Dim oCircles4 As SketchCircles
        Dim oProfile As Profile
        Dim oProfileb As Profile
        Dim oExtrDef As ExtrudeDefinition
        Dim oExtrDefb As ExtrudeDefinition
        Dim oExtrusion As ExtrudeFeature
        Dim oExtrusionb As ExtrudeFeature
        Dim asmDoc As AssemblyDocument

        Dim oPnt01 As Point2d
        Dim oPnt02 As Point2d
        Dim oPnt03 As Point2d
        Dim oPnt04 As Point2d
        Dim oPnt05 As Point2d
        Dim oPnt06 As Point2d
        Dim oPnt07 As Point2d
        Dim oPnt08 As Point2d
        Dim oPnt09 As Point2d
        Dim oPnt10 As Point2d
        Dim oPnt11 As Point2d
        Dim oPnt12 As Point2d
        Dim oPnt13 As Point2d
        Dim oPnt14 As Point2d
        Dim oLn01 As SketchLine
        Dim oLn02 As SketchLine
        Dim oLn03 As SketchLine
        Dim oLn04 As SketchLine
        Dim oLn05 As SketchLine
        Dim oLn06 As SketchLine
        Dim oLn07 As SketchLine
        Dim oLn08 As SketchLine
        Dim oLn09 As SketchLine
        Dim oLn10 As SketchLine
        Dim oLn11 As SketchLine
        Dim oLn12 As SketchLine
        Dim oLn13 As SketchLine
        Dim oLn14 As SketchLine

        Dim oH As Integer
        Dim oB As Integer
        Dim oDia As Double
        Dim oPartOcc As ComponentOccurrence
        Dim oPartDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim oPartAxis As Object


        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        Select Case oPipeSize
            Case "DN15", "DN20", "DN25", "DN32", "DN40"
                oH = 3
                oB = 34
                oDia = 12
            Case "DN50", "DN65", "DN80"
                oH = 3
                oB = 34
                oDia = 12
            Case "DN100", "DN125", "DN150", "DN200"
                oH = 4
                oB = 46
                oDia = 12
            Case "DN250", "DN300", "DN350"
                oH = 4
                oB = 46
                oDia = 12
            Case "DN400", "DN450", "DN500"
                oH = 5
                oB = 56
                oDia = 12
        End Select

        pi = Math.Acos(-1)

        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry

        Dim oSketch04 As PlanarSketch
        oSketch04 = oDef.Sketches.Add(oDef.WorkPlanes.Item(2))

        oPnt09 = oTG.CreatePoint2d(Math.Tan(30 * pi / 180) * (oDia / 2 * 1.6 / 10), (oDia / 2 * 1.6 / 10))
        oPnt10 = oTG.CreatePoint2d((oDia / 2 / 10 * 1.6) / (Math.Cos(30 * pi / 180)), 0)
        oPnt11 = oTG.CreatePoint2d(Math.Tan(30 * pi / 180) * (oDia / 2 * 1.6 / 10), (oDia / 2 * 1.6 / 10) * -1)

        oPnt12 = oTG.CreatePoint2d(Math.Tan(30 * pi / 180) * (oDia / 2 * 1.6 / 10) * -1, (oDia / 2 * 1.6 / 10) * -1)
        oPnt13 = oTG.CreatePoint2d((oDia / 2 / 10 * 1.6) / (Math.Cos(30 * pi / 180) * -1), 0)
        oPnt14 = oTG.CreatePoint2d(Math.Tan(30 * pi / 180) * (oDia / 2 * 1.6 / 10) * -1, (oDia / 2 * 1.6 / 10))

        oLn09 = oSketch04.SketchLines.AddByTwoPoints(oPnt09, oPnt10)
        oLn10 = oSketch04.SketchLines.AddByTwoPoints(oLn09.EndSketchPoint, oPnt11)
        oLn11 = oSketch04.SketchLines.AddByTwoPoints(oLn10.EndSketchPoint, oPnt12)
        oLn12 = oSketch04.SketchLines.AddByTwoPoints(oLn11.EndSketchPoint, oPnt13)
        oLn13 = oSketch04.SketchLines.AddByTwoPoints(oLn12.EndSketchPoint, oPnt14)
        oLn14 = oSketch04.SketchLines.AddByTwoPoints(oLn13.EndSketchPoint, oLn09.StartSketchPoint)

        oCircles4 = oSketch04.SketchCircles
        oCircle4 = oCircles4.AddByCenterRadius(oTG.CreatePoint2d(0, 0), oDia / 10 / 2)

        Dim oProfile4 As Profile
        oProfile4 = oSketch04.Profiles.AddForSolid

        Dim oExtrDef4 As ExtrudeDefinition
        oExtrDef4 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile4, PartFeatureOperationEnum.kNewBodyOperation)

        Call oExtrDef4.SetDistanceExtent(((oPipeDia / 2) + (oDia * 1.6)) / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)

        Dim oExtrusion4 As ExtrudeFeature
        oExtrusion4 = oDef.Features.ExtrudeFeatures.Add(oExtrDef4)





        oSketch01 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3))
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oPipeDia / 10) / 2 + oH / 10)
        oPnt01 = oTG.CreatePoint2d(oPipeDia / 2 / 10 + oB / 10, oH * 2 / 10)
        oPnt02 = oTG.CreatePoint2d(oPipeDia / 2 / 10 + oB / 10, -oH * 2 / 10)
        oPnt03 = oTG.CreatePoint2d(-oPipeDia / 2 / 10 - oB / 10, -oH * 2 / 10)
        oPnt04 = oTG.CreatePoint2d(-oPipeDia / 2 / 10 - oB / 10, oH * 2 / 10)
        oLn01 = oSketch01.SketchLines.AddByTwoPoints(oPnt01, oPnt02)
        oLn02 = oSketch01.SketchLines.AddByTwoPoints(oLn01.EndSketchPoint, oPnt03)
        oLn03 = oSketch01.SketchLines.AddByTwoPoints(oLn02.EndSketchPoint, oPnt04)
        oLn04 = oSketch01.SketchLines.AddByTwoPoints(oLn03.EndSketchPoint, oLn01.StartSketchPoint)
        oProfile = oSketch01.Profiles.AddForSolid
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kJoinOperation)

        Call oExtrDef.SetDistanceExtent(oB / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)



        Dim oWorkplane3 As WorkPlane
        oWorkplane3 = oDef.WorkPlanes.AddByPlaneAndOffset(oDef.WorkPlanes.Item(3), (oB / 20) + (oH / 10))

        Dim oSketch03 As PlanarSketch
        oSketch03 = oDef.Sketches.Add(oWorkplane3)

        Dim oCenterPoint3 As SketchPoint
        oCenterPoint3 = oSketch03.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)

        Dim oCircles3 As SketchCircles
        oCircles3 = oSketch03.SketchCircles

        Dim oCircle3 As SketchCircle
        oCircle3 = oCircles3.AddByCenterRadius(oCenterPoint3, (oPipeDia / 10) / 2 + (oH * 2) / 10)

        Dim oProfile3 As Profile
        oProfile3 = oSketch03.Profiles.AddForSolid()

        Dim oExtrDef3 As ExtrudeDefinition
        oExtrDef3 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile3, PartFeatureOperationEnum.kJoinOperation)

        Call oExtrDef3.SetDistanceExtent((oH * 4) / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)

        Dim oExtrusion3 As ExtrudeFeature
        oExtrusion3 = oDef.Features.ExtrudeFeatures.Add(oExtrDef3)

        oWorkplane3.Visible = False


        Dim oMirCol As ObjectCollection
        oMirCol = oInvApp.TransientObjects.CreateObjectCollection()
        oMirCol.Add(oExtrusion3)

        Dim oMirplane As Object
        oMirplane = oDef.WorkPlanes.Item(3)

        Dim oMirPat As MirrorFeatureDefinition
        oMirPat = oDef.Features.MirrorFeatures.CreateDefinition(oMirCol, oMirplane, PatternComputeTypeEnum.kIdenticalCompute)
        Call oDef.Features.MirrorFeatures.AddByDefinition(oMirPat)


        oSketch02 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3))
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCirclesb = oSketch02.SketchCircles
        oCircle2 = oCirclesb.AddByCenterRadius(oCenterPoint2, (oPipeDia / 10) / 2)
        oPnt05 = oTG.CreatePoint2d(oPipeDia / 2 / 10 + oB / 10, oH / 10)
        oPnt06 = oTG.CreatePoint2d(oPipeDia / 2 / 10 + oB / 10, -oH / 10)
        oPnt07 = oTG.CreatePoint2d(-oPipeDia / 2 / 10 - oB / 10, -oH / 10)
        oPnt08 = oTG.CreatePoint2d(-oPipeDia / 2 / 10 - oB / 10, oH / 10)
        oLn05 = oSketch02.SketchLines.AddByTwoPoints(oPnt05, oPnt06)
        oLn06 = oSketch02.SketchLines.AddByTwoPoints(oLn05.EndSketchPoint, oPnt07)
        oLn07 = oSketch02.SketchLines.AddByTwoPoints(oLn06.EndSketchPoint, oPnt08)
        oLn08 = oSketch02.SketchLines.AddByTwoPoints(oLn07.EndSketchPoint, oLn05.StartSketchPoint)
        oProfileb = oSketch02.Profiles.AddForSolid
        oExtrDefb = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfileb, PartFeatureOperationEnum.kCutOperation)

        Call oExtrDefb.SetThroughAllExtent(PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)

        oExtrusionb = oDef.Features.ExtrudeFeatures.Add(oExtrDefb)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Pipe Supports"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Dammgulast Clamp is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "DIN 3567-A"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim Insertaxis As Object
        Insertaxis = oDef.WorkAxes(3)
        Dim attribSets As AttributeSets
        attribSets = Insertaxis.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertAxis")
        'Dim attrib As Attribute

        Select Case oMaterial
            Case "GALVA"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "GALVA", "GALVA")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("GALVA")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("GALVA")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("GALVA")
                    RS.Reflectivity = 25
                    RS.SetDiffuseColor(163, 163, 163)  'Galva
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion4.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrusion4.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            'Dim trans As Matrix
            'trans = oInvApp.TransientGeometry.CreateMatrix
            'elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            'elbowOcc.Grounded = True
            MsgBox("A Pipe is needed to place a Pipe Clamp", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If
        Me.Hide()

        Dim oHeader As FaceProxy
        oHeader = oInvApp.CommandManager.Pick(SelectionFilterEnum.kPartFaceCylindricalFilter, "Select A Pipe.")
        If oHeader Is Nothing Then
            GoTo EndRoutine
        End If

        Dim oHeaderpart As PartDocument
        oHeaderpart = oHeader.Parent.CreatedByFeature.Parent.Document

        Dim oHeaderocc As ComponentOccurrence
        oHeaderocc = oHeader.ContainingOccurrence

        Dim oheaderaxis As Object
        oheaderaxis = oHeaderpart.ComponentDefinition.WorkAxes.Item(3)

        Dim oheaderaxisproxy As WorkAxisProxy
        oheaderaxisproxy = Nothing
        Call oHeaderocc.CreateGeometryProxy(oheaderaxis, oheaderaxisproxy)

        oPartOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        oPartDoc = oPartOcc.Definition.Document

        attrSets = oPartDoc.AttributeManager.FindAttributeSets("InsertAxis")
        oPartAxis = attrSets.Item(1).Parent.Parent

        Dim elbowEdgeProxy As WorkAxisProxy
        elbowEdgeProxy = Nothing
        Call oPartOcc.CreateGeometryProxy(oPartAxis, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddMateConstraint(oheaderaxisproxy, elbowEdgeProxy, 0)

EndRoutine:
        Me.Show()
    End Sub

    Private Sub PlacePipeClampASV()
        '------------------------------------------------
        '
        '          PLACING PIPE CLAMPS ASV
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oSketch1 As PlanarSketch
        Dim oSketch2 As PlanarSketch
        Dim oSketch3 As PlanarSketch
        Dim oSketch4 As PlanarSketch
        Dim oCenterPoint As SketchPoint
        Dim oCenterPoint2 As SketchPoint
        Dim oCenterPoint3 As SketchPoint
        Dim oCenterPoint4 As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oProfile As Profile
        Dim oExtrDef As ExtrudeDefinition
        Dim oExtrusion As ExtrudeFeature
        Dim asmDoc As AssemblyDocument

        Dim oPnt01 As Point2d
        Dim oPnt02 As Point2d
        Dim oPnt03 As Point2d
        Dim oPnt04 As Point2d
        Dim oPnt05 As Point2d
        Dim oPnt06 As Point2d


        Dim oLn01 As SketchLine
        Dim oLn02 As SketchLine
        Dim oLn03 As SketchLine
        Dim oLn04 As SketchLine
        Dim oLn05 As SketchLine

        Dim oArc01 As SketchArc
        Dim oCirc01 As SketchCircle
        Dim oCirc02 As SketchCircle


        Dim oD As Integer
        Dim oK As Integer
        Dim oB As Integer
        Dim oH As Integer
        Dim oDist1 As Double
        Dim oDia1 As Double
        Dim oDia2 As Double

        Dim oPartOcc As ComponentOccurrence
        Dim oPartDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim oPartAxis As Object


        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        Select Case oPipeSize
            Case "DN32", "DE40"
                oD = 40
                oK = 58
                oB = 25
                oH = 43
                oDist1 = 0
                oDia1 = 1.45
                oDia2 = 0.7
            Case "DN40", "DE50"
                oD = 50
                oK = 69
                oB = 25
                oH = 47
                oDist1 = 0
                oDia1 = 1.45
                oDia2 = 0.7
            Case "DN50", "DE63"
                oD = 63
                oK = 84
                oB = 25
                oH = 57
                oDist1 = 0
                oDia1 = 1.7
                oDia2 = 0.9
            Case "DN65", "DE75"
                oD = 75
                oK = 126
                oB = 30
                oH = 64
                oDist1 = 5.45
                oDia1 = 1.7
                oDia2 = 0.9
            Case "DN80", "DE90"
                oD = 90
                oK = 143
                oB = 30
                oH = 73
                oDist1 = 6.25
                oDia1 = 1.7
                oDia2 = 0.9
            Case "DN100", "DE110"
                oD = 110
                oK = 163
                oB = 30
                oH = 87
                oDist1 = 7.25
                oDia1 = 1.7
                oDia2 = 0.9
            Case "DN125", "DE140"
                oD = 140
                oK = 183
                oB = 40
                oH = 117
                oDist1 = 9.05
                oDia1 = 1.7
                oDia2 = 0.9
            Case "DN150", "DE160"
                oD = 160
                oK = 220
                oB = 40
                oH = 150
                oDist1 = 10.1
                oDia1 = 1.7
                oDia2 = 0.9
        End Select

        pi = Math.Acos(-1)

        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry

        oSketch1 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3))
        oCenterPoint = oSketch1.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)


        oPnt01 = oTG.CreatePoint2d(oPipeDia / 2 / 10 + 0.5, 0)
        oPnt02 = oTG.CreatePoint2d(oK / 2 / 10, -oH / 10 + 0.8)
        oPnt03 = oTG.CreatePoint2d(oK / 2 / 10, -oH / 10)
        oPnt04 = oTG.CreatePoint2d(-oK / 2 / 10, -oH / 10)
        oPnt05 = oTG.CreatePoint2d(-oK / 2 / 10, -oH / 10 + 0.8)
        oPnt06 = oTG.CreatePoint2d(-oPipeDia / 2 / 10 - 0.5, 0)

        oLn01 = oSketch1.SketchLines.AddByTwoPoints(oPnt01, oPnt02)
        oLn02 = oSketch1.SketchLines.AddByTwoPoints(oLn01.EndSketchPoint, oPnt03)
        oLn03 = oSketch1.SketchLines.AddByTwoPoints(oLn02.EndSketchPoint, oPnt04)
        oLn04 = oSketch1.SketchLines.AddByTwoPoints(oLn03.EndSketchPoint, oPnt05)
        oLn05 = oSketch1.SketchLines.AddByTwoPoints(oLn04.EndSketchPoint, oPnt06)

        oArc01 = oSketch1.SketchArcs.AddByCenterStartEndPoint(oCenterPoint, oLn01.StartSketchPoint, oLn05.EndSketchPoint)

        oProfile = oSketch1.Profiles.AddForSolid
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kJoinOperation)

        Call oExtrDef.SetDistanceExtent(oB / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)

        oSketch2 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3))
        oCenterPoint2 = oSketch2.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles = oSketch2.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint2, (oPipeDia / 10) / 2)

        Dim oProfile2 As Profile
        oProfile2 = oSketch2.Profiles.AddForSolid
        Dim oExtrDef2 As ExtrudeDefinition
        oExtrDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kCutOperation)

        Call oExtrDef2.SetDistanceExtent(oB / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        Dim oExtrusion2 As ExtrudeFeature
        oExtrusion2 = oDef.Features.ExtrudeFeatures.Add(oExtrDef2)




        oSketch3 = oDef.Sketches.Add(oDef.WorkPlanes.Item(2))
        oCenterPoint3 = oSketch3.SketchPoints.Add(oTG.CreatePoint2d(oDist1, 0), False)
        oCircles = oSketch3.SketchCircles
        oCirc01 = oCircles.AddByCenterRadius(oCenterPoint3, oDia1 / 2)

        Dim oProfile3 As Profile
        oProfile3 = oSketch3.Profiles.AddForSolid
        Dim oExtrDef3 As ExtrudeDefinition
        oExtrDef3 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile3, PartFeatureOperationEnum.kCutOperation)

        Call oExtrDef3.SetDistanceExtent((oH - 8) / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        Dim oExtrusion3 As ExtrudeFeature
        oExtrusion3 = oDef.Features.ExtrudeFeatures.Add(oExtrDef3)



        oSketch4 = oDef.Sketches.Add(oDef.WorkPlanes.Item(2))
        oCenterPoint4 = oSketch4.SketchPoints.Add(oTG.CreatePoint2d(oDist1, 0), False)
        oCircles = oSketch4.SketchCircles
        oCirc02 = oCircles.AddByCenterRadius(oCenterPoint4, oDia2 / 2)

        Dim oProfile4 As Profile
        oProfile4 = oSketch4.Profiles.AddForSolid
        Dim oExtrDef4 As ExtrudeDefinition
        oExtrDef4 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile4, PartFeatureOperationEnum.kCutOperation)

        Call oExtrDef4.SetDistanceExtent(oH / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        Dim oExtrusion4 As ExtrudeFeature
        oExtrusion4 = oDef.Features.ExtrudeFeatures.Add(oExtrDef4)


        Dim oMirCol As ObjectCollection
        oMirCol = oInvApp.TransientObjects.CreateObjectCollection()
        oMirCol.Add(oExtrusion3)
        oMirCol.Add(oExtrusion4)


        Dim oMirDef As MirrorFeatureDefinition
        oMirDef = oDef.Features.MirrorFeatures.CreateDefinition(oMirCol, oDef.WorkPlanes.Item(1), PatternComputeTypeEnum.kIdenticalCompute)

        Call oDef.Features.MirrorFeatures.AddByDefinition(oMirDef)



        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Pipe Supports"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This ASV Pipe Clip is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "ASV PIPE CLIP"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim Insertaxis As Object
        Insertaxis = oDef.WorkAxes(3)
        Dim attribSets As AttributeSets
        attribSets = Insertaxis.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertAxis")
        'Dim attrib As Attribute


        Dim docAssets As Assets
        docAssets = oInvDoc.Assets
        Dim appearance As Asset
        appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polypropylene", "PP", "PP")
        Dim oPart As PartDocument
        oPart = oInvApp.ActiveDocument
        Dim oMat As Material
        oMat = oPart.Materials.Item("PP")
        oMat.Density = 0.89
        oPart.ComponentDefinition.Material = oMat
        Dim RS As RenderStyle
        Try
            RS = oInvDoc.RenderStyles.Item("PP")
        Catch ex As Exception
            RS = oInvDoc.RenderStyles.Add("PP")
            RS.Reflectivity = 3
            RS.SetDiffuseColor(150, 150, 150)  'Black plastic
        End Try
        Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            'Dim trans As Matrix
            'trans = oInvApp.TransientGeometry.CreateMatrix
            'elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            'elbowOcc.Grounded = True
            MsgBox("A Pipe is needed to place a Pipe Clamp", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If
        Me.Hide()

        Dim oHeader As FaceProxy
        oHeader = oInvApp.CommandManager.Pick(SelectionFilterEnum.kPartFaceCylindricalFilter, "Select A Pipe.")
        If oHeader Is Nothing Then
            GoTo EndRoutine
        End If

        Dim oHeaderpart As PartDocument
        oHeaderpart = oHeader.Parent.CreatedByFeature.Parent.Document

        Dim oHeaderocc As ComponentOccurrence
        oHeaderocc = oHeader.ContainingOccurrence

        Dim oheaderaxis As Object
        oheaderaxis = oHeaderpart.ComponentDefinition.WorkAxes.Item(3)

        Dim oheaderaxisproxy As WorkAxisProxy
        oheaderaxisproxy = Nothing
        Call oHeaderocc.CreateGeometryProxy(oheaderaxis, oheaderaxisproxy)

        oPartOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        oPartDoc = oPartOcc.Definition.Document

        attrSets = oPartDoc.AttributeManager.FindAttributeSets("InsertAxis")
        oPartAxis = attrSets.Item(1).Parent.Parent

        Dim elbowEdgeProxy As WorkAxisProxy
        elbowEdgeProxy = Nothing
        Call oPartOcc.CreateGeometryProxy(oPartAxis, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddMateConstraint(oheaderaxisproxy, elbowEdgeProxy, 0)

EndRoutine:
        oInvApp.ScreenUpdating = True
        Me.Show()
    End Sub





    Private Sub PlacePipeClipIt()
        '------------------------------------------------
        '
        '          PLACING PIPE CLIPS GOEMA
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oSketch1 As PlanarSketch
        Dim oSketch2 As PlanarSketch

        Dim oCenterPoint2 As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oProfile As Profile
        Dim oExtrDef As ExtrudeDefinition
        Dim oExtrusion As ExtrudeFeature
        Dim asmDoc As AssemblyDocument

        Dim oPnt01 As Point2d
        Dim oPnt02 As Point2d
        Dim oPnt03 As Point2d
        Dim oPnt04 As Point2d


        Dim oLn01 As SketchLine
        Dim oLn02 As SketchLine
        Dim oLn03 As SketchLine
        Dim oLn04 As SketchLine


        Dim oD As Integer
        Dim oK As Integer
        Dim oB As Integer
        Dim oH As Integer

        Dim oPartOcc As ComponentOccurrence
        Dim oPartDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim oPartAxis As Object


        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:
        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        Select Case oPipeSize
            Case "DN10", "DE16"
                oD = 16
                oK = 34
                oB = 16
                oH = 27
            Case "DN15", "DE20"
                oD = 20
                oK = 38
                oB = 16
                oH = 27
            Case "DN20", "DE25"
                oD = 25
                oK = 44
                oB = 16
                oH = 30
            Case "DN25", "DE32"
                oD = 32
                oK = 54
                oB = 16
                oH = 36



        End Select

        pi = Math.Acos(-1)

        'oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry

        oSketch1 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3))


        oPnt01 = oTG.CreatePoint2d(oK / 2 / 10, oPipeDia / 3 / 10)
        oPnt02 = oTG.CreatePoint2d(oK / 2 / 10, oH / -10)
        oPnt03 = oTG.CreatePoint2d(oK / 2 / -10, oH / -10)
        oPnt04 = oTG.CreatePoint2d(oK / 2 / -10, oPipeDia / 3 / 10)


        oLn01 = oSketch1.SketchLines.AddByTwoPoints(oPnt01, oPnt02)
        oLn02 = oSketch1.SketchLines.AddByTwoPoints(oLn01.EndSketchPoint, oPnt03)
        oLn03 = oSketch1.SketchLines.AddByTwoPoints(oLn02.EndSketchPoint, oPnt04)
        oLn04 = oSketch1.SketchLines.AddByTwoPoints(oLn03.EndSketchPoint, oLn01.StartSketchPoint)


        oProfile = oSketch1.Profiles.AddForSolid
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kJoinOperation)

        Call oExtrDef.SetDistanceExtent(oB / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)

        oSketch2 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3))
        oCenterPoint2 = oSketch2.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles = oSketch2.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint2, (oPipeDia / 10) / 2)

        Dim oProfile2 As Profile
        oProfile2 = oSketch2.Profiles.AddForSolid
        Dim oExtrDef2 As ExtrudeDefinition
        oExtrDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kCutOperation)

        Call oExtrDef2.SetDistanceExtent(oB / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        Dim oExtrusion2 As ExtrudeFeature
        oExtrusion2 = oDef.Features.ExtrudeFeatures.Add(oExtrDef2)

        Dim oEdges As EdgeCollection
        oEdges = oInvApp.TransientObjects.CreateEdgeCollection
        oEdges.Add(oExtrusion.SideFaces.Item(1).Edges(1))
        oEdges.Add(oExtrusion.SideFaces.Item(1).Edges(3))
        oEdges.Add(oExtrusion.SideFaces.Item(4).Edges(1))
        oEdges.Add(oExtrusion.SideFaces.Item(4).Edges(3))


        Dim ochamfer As ChamferFeature
        ochamfer = oDef.Features.ChamferFeatures.AddUsingDistance(oEdges, 0.3, , False)


        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Pipe Supports"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This ASV Pipe Clip is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "PIPE CLIP"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim Insertaxis As Object
        Insertaxis = oDef.WorkAxes(3)
        Dim attribSets As AttributeSets
        attribSets = Insertaxis.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertAxis")
        'Dim attrib As Attribute


        Dim docAssets As Assets
        docAssets = oInvDoc.Assets
        Dim appearance As Asset
        appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polypropylene", "PP", "PP")
        Dim oPart As PartDocument
        oPart = oInvApp.ActiveDocument
        Dim oMat As Material
        oMat = oPart.Materials.Item("PP")
        oMat.Density = 0.89
        oPart.ComponentDefinition.Material = oMat
        Dim RS As RenderStyle
        Try
            RS = oInvDoc.RenderStyles.Item("PP")
        Catch ex As Exception
            RS = oInvDoc.RenderStyles.Add("PP")
            RS.Reflectivity = 3
            RS.SetDiffuseColor(150, 150, 150)  'Black plastic
        End Try
        Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            'Dim trans As Matrix
            'trans = oInvApp.TransientGeometry.CreateMatrix
            'elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            'elbowOcc.Grounded = True
            MsgBox("A Pipe is needed to place a Pipe Clip", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If
        Me.Hide()

        Dim oHeader As FaceProxy
        oHeader = oInvApp.CommandManager.Pick(SelectionFilterEnum.kPartFaceCylindricalFilter, "Select A Pipe.")
        If oHeader Is Nothing Then
            GoTo EndRoutine
        End If

        Dim oHeaderpart As PartDocument
        oHeaderpart = oHeader.Parent.CreatedByFeature.Parent.Document

        Dim oHeaderocc As ComponentOccurrence
        oHeaderocc = oHeader.ContainingOccurrence

        Dim oheaderaxis As Object
        oheaderaxis = oHeaderpart.ComponentDefinition.WorkAxes.Item(3)

        Dim oheaderaxisproxy As WorkAxisProxy
        oheaderaxisproxy = Nothing
        Call oHeaderocc.CreateGeometryProxy(oheaderaxis, oheaderaxisproxy)

        oPartOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        oPartDoc = oPartOcc.Definition.Document

        attrSets = oPartDoc.AttributeManager.FindAttributeSets("InsertAxis")
        oPartAxis = attrSets.Item(1).Parent.Parent

        Dim elbowEdgeProxy As WorkAxisProxy
        elbowEdgeProxy = Nothing
        Call oPartOcc.CreateGeometryProxy(oPartAxis, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddMateConstraint(oheaderaxisproxy, elbowEdgeProxy, 0)

EndRoutine:
        oInvApp.ScreenUpdating = True
        Me.Show()
    End Sub

    Private Sub Place_Pipe_Clamp_Stauff()
        '------------------------------------------------
        '
        '          PLACING PIPE CLAMPS STAUFF
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oSketch1 As PlanarSketch
        Dim oSketch2 As PlanarSketch
        Dim oSketch3 As PlanarSketch

        Dim oCenterPoint1 As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oProfile As Profile
        Dim oExtrDef As ExtrudeDefinition
        Dim oExtrusion As ExtrudeFeature
        Dim oExtrDef3 As ExtrudeDefinition
        Dim oExtrusion3 As ExtrudeFeature
        Dim oProfile3 As Profile
        Dim asmDoc As AssemblyDocument

        Dim oPnt01 As Point2d
        Dim oPnt02 As Point2d
        Dim oPnt03 As Point2d
        Dim oPnt04 As Point2d
        Dim oPnt05 As Point2d
        Dim oPnt06 As Point2d
        Dim oPnt07 As Point2d
        Dim oPnt08 As Point2d
        Dim oPnt09 As Point2d
        Dim oPnt10 As Point2d
        Dim oPnt11 As Point2d
        Dim oPnt12 As Point2d
        Dim oPnt13 As Point2d
        Dim oPnt14 As Point2d

        Dim oLn01 As SketchLine
        Dim oLn02 As SketchLine
        Dim oLn03 As SketchLine
        Dim oLn04 As SketchLine
        Dim oLn05 As SketchLine
        Dim oLn06 As SketchLine
        Dim oLn07 As SketchLine
        Dim oLn08 As SketchLine
        Dim oLn09 As SketchLine
        Dim oLn10 As SketchLine
        Dim oLn11 As SketchLine
        Dim oLn12 As SketchLine
        Dim oLn13 As SketchLine
        Dim oLn14 As SketchLine


        Dim oW As Double
        Dim oH As Double
        Dim oT As Double
        Dim oK As Double
        Dim oBdia As Double
        Dim oPartNumber As String = " "

        Dim oPartOcc As ComponentOccurrence
        Dim oPipeOcc As ComponentOccurrence = Nothing
        Dim oPartDoc As PartDocument
        Dim oPipeDoc As PartDocument = Nothing
        Dim attrSets As AttributeSetsEnumerator
        Dim oPartAxis As Object
        pi = Math.Acos(-1)

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "")
            GoTo EndRoutine
        End If

BeginRoutine:

        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            MsgBox("Automated Support placement not possible." & vbCrLf & "Place Supports Manually.", vbOKOnly + "4064", "")
            GoTo EndRoutine
        End If
        If asmDoc.FileSaveCounter < 1 Then
            MsgBox("Save the assembly before placing Supports.", vbOKOnly + "4064", "")
            GoTo EndRoutine
        End If

        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------


        Try
            oPipeOcc = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAssemblyOccurrenceFilter, "Select a Pipe.")
        Catch ex As Exception
            GoTo ErrorHandler01
        End Try
        If oPipeOcc Is Nothing Then
            GoTo EndRoutine
        End If
        'Go to original document first flange

        Try
            oPipeDoc = oPipeOcc.Definition.Document
        Catch ex As Exception
            GoTo ErrorHandler01
        End Try

        Dim oPipename = oPipeDoc.DisplayName
        'MsgBox("First Part Selected" & vbCrLf & oPipename)

        'Check if a Pipe is selected

        If oPipename.StartsWith("Pipe_") = True Then

        Else
            GoTo ErrorHandler01
        End If

        'Get the PipeDiameter

        Dim oSelectPipeDiam As Double
        Dim oSelectDiam As Double
        oSelectDiam = oInvApp.MeasureTools.GetLoopLength(oPipeDoc.ComponentDefinition.Sketches.Item(1).SketchCircles.Item(1))
        oSelectPipeDiam = Math.Round(oSelectDiam / pi * 10, 1)
        '   MsgBox("Diameter pipe is" & vbCrLf & oSelectPipeDiam & " mm")

        Select Case oSelectPipeDiam
            Case "20"
                oT = 30.5
                oW = 70
                oH = 48
                oK = 45
                oBdia = 10
                oPartNumber = "STAUFF 4020 PP 4S DIN2 "
                oFilename = "STAUFF_4020_PP_4S_DIN2.ipt"
            Case "21.3"
                oT = 30.5
                oW = 70
                oH = 48
                oK = 45
                oBdia = 10
                oPartNumber = "STAUFF 4021,3 PP 4S DIN2 "
                oFilename = "STAUFF_4021_3_PP_4S_DIN2.ipt"
            Case "25"
                oT = 30.5
                oW = 70
                oH = 48
                oK = 45
                oBdia = 10
                oPartNumber = "STAUFF 4025 PP 4S DIN2 "
                oFilename = "STAUFF_4025_PP_4S_DIN2.ipt"
            Case "26.9"
                oT = 30.5
                oW = 70
                oH = 48
                oK = 45
                oBdia = 10
                oPartNumber = "STAUFF 4026,9 PP 4S DIN2 "
                oFilename = "STAUFF_4026_9_PP_4S_DIN2.ipt"
            Case "32"
                oT = 30.5
                oW = 85
                oH = 60
                oK = 60
                oBdia = 10
                oPartNumber = "STAUFF 5032 PP 5S DIN3 "
                oFilename = "STAUFF_5032_PP_5S_DIN3.ipt"
            Case "33.7"
                oT = 30.5
                oW = 85
                oH = 60
                oK = 60
                oBdia = 10
                oPartNumber = "STAUFF 5033,7 PP 5S DIN3 "
                oFilename = "STAUFF_5033_7_PP_5S_DIN3.ipt"
            Case "40"
                oT = 30.5
                oW = 85
                oH = 60
                oK = 60
                oBdia = 10
                oPartNumber = "STAUFF 5040 PP 5S DIN3 "
                oFilename = "STAUFF_5040_PP_5S_DIN3.ipt"
            Case "42.4"
                oT = 30.5
                oW = 85
                oH = 60
                oK = 60
                oBdia = 10
                oPartNumber = "STAUFF 5042,4 PP 5S DIN3 "
                oFilename = "STAUFF_5042_4_PP_5S_DIN3.ipt"
            Case "48.3"
                oT = 45
                oW = 115
                oH = 89
                oK = 90
                oBdia = 12
                oPartNumber = "STAUFF 6048,3 PP 6S DIN4 "
                oFilename = "STAUFF_6048_3_PP_6S_DIN4.ipt"
            Case "50"
                oT = 45
                oW = 115
                oH = 89
                oK = 90
                oBdia = 12
                oPartNumber = "STAUFF 6050 PP 6S DIN4 "
                oFilename = "STAUFF_6050_PP_6S_DIN4.ipt"
            Case "60.3"
                oT = 45
                oW = 115
                oH = 89
                oK = 90
                oBdia = 12
                oPartNumber = "STAUFF 6060,3 PP 6S DIN4 "
                oFilename = "STAUFF_6060_3_PP_6S_DIN4.ipt"
            Case "63"
                oT = 45
                oW = 115
                oH = 89
                oK = 90
                oBdia = 12
                oPartNumber = "STAUFF 6063 PP 6S DIN4 "
                oFilename = "STAUFF_6063_PP_6S_DIN4.ipt"
            Case "75"
                oT = 60
                oW = 152
                oH = 120
                oK = 122
                oBdia = 16
                oPartNumber = "STAUFF 7075 PP 7S DIN5 "
                oFilename = "STAUFF_6075_PP_7S_DIN5.ipt"
            Case "76.1"
                oT = 60
                oW = 152
                oH = 120
                oK = 122
                oBdia = 16
                oPartNumber = "STAUFF 7076,1 PP 7S DIN5 "
                oFilename = "STAUFF_7076_1_PP_7S_DIN5.ipt"
            Case "88.9"
                oT = 60
                oW = 152
                oH = 120
                oK = 122
                oBdia = 16
                oPartNumber = "STAUFF 7088,9 PP 7S DIN5 "
                oFilename = "STAUFF_7088_9_PP_7S_DIN5.ipt"
            Case "90"
                oT = 60
                oW = 152
                oH = 120
                oK = 122
                oBdia = 16
                oPartNumber = "STAUFF 7090 PP 7S DIN5 "
                oFilename = "STAUFF_7090_PP_7S_DIN5.ipt"
            Case "110"
                oT = 80
                oW = 206
                oH = 168
                oK = 168
                oBdia = 20
                oPartNumber = "STAUFF 8100 PP 8S DIN6 "
                oFilename = "STAUFF_8100_PP_8S_DIN6.ipt"
            Case "114.3"
                oT = 80
                oW = 206
                oH = 168
                oK = 168
                oBdia = 20
                oPartNumber = "STAUFF 8114.3 PP 8S DIN6 "
                oFilename = "STAUFF_8114_3_PP_8S_DIN6.ipt"
            Case "139.7"
                oT = 90
                oW = 251
                oH = 200
                oK = 205
                oBdia = 24
                oPartNumber = "STAUFF 9139,7 PP 9S DIN7 "
                oFilename = "STAUFF_9139_7_PP_9S_DIN7.ipt"
            Case "140"
                oT = 90
                oW = 251
                oH = 200
                oK = 205
                oBdia = 24
                oPartNumber = "STAUFF 9140 PP 9S DIN7 "
                oFilename = "STAUFF_9140_PP_9S_DIN7.ipt"
            Case "160"
                oT = 90
                oW = 251
                oH = 200
                oK = 205
                oBdia = 24
                oPartNumber = "STAUFF 9160 PP 9S DIN7 "
                oFilename = "STAUFF_9160_PP_9S_DIN7.ipt"
            Case "168.3"
                oT = 120
                oW = 336
                oH = 270
                oK = 265
                oBdia = 30
                oPartNumber = "STAUFF 10168,3 PP 10S DIN8 "
                oFilename = "STAUFF_10168_3_PP_10S_DIN8.ipt"
            Case "219.1"
                oT = 120
                oW = 336
                oH = 270
                oK = 265
                oBdia = 30
                oPartNumber = "STAUFF 10219,1 PP 10S DIN8 "
                oFilename = "STAUFF_10219_1_PP_10S_DIN8.ipt"
            Case "225"
                oT = 120
                oW = 336
                oH = 270
                oK = 265
                oBdia = 30
                oPartNumber = "STAUFF 10225 PP 10S DIN8 "
                oFilename = "STAUFF_10225_PP_10S_DIN8.ipt"
            Case 273
                oT = 162
                oW = 470
                oH = 410
                oK = 395
                oBdia = 30
                oPartNumber = "STAUFF 11273 PP 11S DIN9 "
                oFilename = "STAUFF_11273_PP_11S_DIN9.ipt"
            Case Else
                GoTo ErrorHandler02
        End Select

        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
StartPart:
        oInvApp.ScreenUpdating = False

        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry

        oSketch1 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3))


        oPnt01 = oTG.CreatePoint2d(oW / 2 / 10, oH / 2 / 10)
        oPnt02 = oTG.CreatePoint2d(oW / 2 / 10, oH / 2 / -10)
        oPnt03 = oTG.CreatePoint2d(oW / 2 / -10, oH / 2 / -10)
        oPnt04 = oTG.CreatePoint2d(oW / 2 / -10, oH / 2 / 10)


        oLn01 = oSketch1.SketchLines.AddByTwoPoints(oPnt01, oPnt02)
        oLn02 = oSketch1.SketchLines.AddByTwoPoints(oLn01.EndSketchPoint, oPnt03)
        oLn03 = oSketch1.SketchLines.AddByTwoPoints(oLn02.EndSketchPoint, oPnt04)
        oLn04 = oSketch1.SketchLines.AddByTwoPoints(oLn03.EndSketchPoint, oLn01.StartSketchPoint)


        oProfile = oSketch1.Profiles.AddForSolid
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kJoinOperation)

        Call oExtrDef.SetDistanceExtent(oT / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)

        oSketch2 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3))
        oCenterPoint1 = oSketch2.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles = oSketch2.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint1, (oSelectPipeDiam / 10) / 2)

        Dim oProfile2 As Profile
        oProfile2 = oSketch2.Profiles.AddForSolid
        Dim oExtrDef2 As ExtrudeDefinition
        oExtrDef2 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile2, PartFeatureOperationEnum.kCutOperation)

        Call oExtrDef2.SetDistanceExtent(10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        Dim oExtrusion2 As ExtrudeFeature
        oExtrusion2 = oDef.Features.ExtrudeFeatures.Add(oExtrDef2)

        oSketch3 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3))

        oPnt05 = oTG.CreatePoint2d(oW / 2 / 10, (oH + 6) / 2 / 10)
        oPnt06 = oTG.CreatePoint2d(oW / 2 / 10, oH / 2 / 10)
        oPnt07 = oTG.CreatePoint2d(oW / 2 / -10, oH / 2 / 10)
        oPnt08 = oTG.CreatePoint2d(oW / 2 / -10, (oH + 6) / 2 / 10)


        oLn05 = oSketch3.SketchLines.AddByTwoPoints(oPnt05, oPnt06)
        oLn06 = oSketch3.SketchLines.AddByTwoPoints(oLn05.EndSketchPoint, oPnt07)
        oLn07 = oSketch3.SketchLines.AddByTwoPoints(oLn06.EndSketchPoint, oPnt08)
        oLn08 = oSketch3.SketchLines.AddByTwoPoints(oLn07.EndSketchPoint, oLn05.StartSketchPoint)

        oProfile3 = oSketch3.Profiles.AddForSolid
        oExtrDef3 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile3, PartFeatureOperationEnum.kNewBodyOperation)

        Call oExtrDef3.SetDistanceExtent(oT / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        oExtrusion3 = oDef.Features.ExtrudeFeatures.Add(oExtrDef3)

        Dim oSketch4 As PlanarSketch

        oSketch4 = oDef.Sketches.Add(oDef.WorkPlanes.Item(2))




        oPnt09 = oTG.CreatePoint2d((oK / 20) - ((oBdia / 20 * 1.6) / Math.Cos(30 * pi / 180)), 0)
        oPnt10 = oTG.CreatePoint2d((oK / 20) - (Math.Tan(30 * pi / 180) * (oBdia / 20 * 1.6)), (oBdia / 20 * 1.6))
        oPnt11 = oTG.CreatePoint2d((oK / 20) + (Math.Tan(30 * pi / 180) * (oBdia / 20 * 1.6)), (oBdia / 20 * 1.6))
        oPnt12 = oTG.CreatePoint2d((oK / 20) + ((oBdia / 20 * 1.6) / Math.Cos(30 * pi / 180)), 0)
        oPnt13 = oTG.CreatePoint2d((oK / 20) + (Math.Tan(30 * pi / 180) * (oBdia / 20 * 1.6)), (-oBdia / 20 * 1.6))
        oPnt14 = oTG.CreatePoint2d((oK / 20) - (Math.Tan(30 * pi / 180) * (oBdia / 20 * 1.6)), (-oBdia / 20 * 1.6))



        oLn09 = oSketch4.SketchLines.AddByTwoPoints(oPnt09, oPnt10)
        oLn10 = oSketch4.SketchLines.AddByTwoPoints(oLn09.EndSketchPoint, oPnt11)
        oLn11 = oSketch4.SketchLines.AddByTwoPoints(oLn10.EndSketchPoint, oPnt12)
        oLn12 = oSketch4.SketchLines.AddByTwoPoints(oLn11.EndSketchPoint, oPnt13)
        oLn13 = oSketch4.SketchLines.AddByTwoPoints(oLn12.EndSketchPoint, oPnt14)
        oLn14 = oSketch4.SketchLines.AddByTwoPoints(oLn13.EndSketchPoint, oLn09.StartSketchPoint)

        Dim oProfile4 As Profile
        oProfile4 = oSketch4.Profiles.AddForSolid

        Dim oExtrDef4 As ExtrudeDefinition
        oExtrDef4 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile4, PartFeatureOperationEnum.kJoinOperation)
        Call oExtrDef4.SetDistanceExtent((oH / 20) + (oBdia / 10 * 0.8) + 0.6, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)

        Dim oExtrusion4 As ExtrudeFeature
        oExtrusion4 = oDef.Features.ExtrudeFeatures.Add(oExtrDef4)

        Dim xAxis As WorkAxis
        xAxis = oDef.WorkAxes.Item(1)
        Dim oObjColl2 As ObjectCollection
        oObjColl2 = oInvApp.TransientObjects.CreateObjectCollection()
        oObjColl2.Add(oExtrusion4)
        Dim oNutPattrn As RectangularPatternFeatureDefinition
        oNutPattrn = oDef.Features.RectangularPatternFeatures.CreateDefinition(oObjColl2, xAxis, True, 2, oK / 10)
        Call oDef.Features.RectangularPatternFeatures.AddByDefinition(oNutPattrn)


        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Pipe Supports"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Stauff Pipe Clamp is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = "PIPE CLAMP"
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = oPartNumber
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim Insertaxis As Object
        Insertaxis = oDef.WorkAxes(3)
        Dim attribSets As AttributeSets
        attribSets = Insertaxis.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertAxis")
        'Dim attrib As Attribute


        Dim docAssets As Assets
        docAssets = oInvDoc.Assets
        Dim appearance As Asset
        appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polypropylene", "PP", "PP")
        Dim oPart As PartDocument
        oPart = oInvApp.ActiveDocument
        Dim oMat As Material
        oMat = oPart.Materials.Item("PP")
        oMat.Density = 0.89
        oPart.ComponentDefinition.Material = oMat
        Dim RS As RenderStyle
        Try
            RS = oInvDoc.RenderStyles.Item("PP")
        Catch ex As Exception
            RS = oInvDoc.RenderStyles.Add("PP")
            RS.Reflectivity = 3
            RS.SetDiffuseColor(20, 150, 20)  'GREEN plastic
        End Try
        Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

        Try
            RS = oInvDoc.RenderStyles.Item("INOX")
        Catch ex As Exception
            RS = oInvDoc.RenderStyles.Add("INOX")
            RS.Reflectivity = 35
            RS.SetDiffuseColor(240, 240, 240)  'INOX
        End Try
        Call oExtrusion3.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        Call oExtrusion4.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
        Call oDef.Features.RectangularPatternFeatures.Item(1).SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
            oInvDoc.Close()
        Catch ex As Exception
            GoTo ErrorHandler03
        End Try
        oInvApp.ScreenUpdating = True

        '--------------Place the part--------------------------------------
PlacePart:
        ' Get the active assembly.
        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then

            MsgBox("A Pipe is needed to place a Pipe Clip", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If
        Me.Hide()

        Dim oheaderaxis As Object
        oheaderaxis = oPipeDoc.ComponentDefinition.WorkAxes.Item(3)

        Dim oheaderaxisproxy As WorkAxisProxy
        oheaderaxisproxy = Nothing
        Call oPipeOcc.CreateGeometryProxy(oheaderaxis, oheaderaxisproxy)

        oPartOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        oPartDoc = oPartOcc.Definition.Document

        attrSets = oPartDoc.AttributeManager.FindAttributeSets("InsertAxis")
        oPartAxis = attrSets.Item(1).Parent.Parent

        Dim elbowEdgeProxy As WorkAxisProxy
        elbowEdgeProxy = Nothing
        Call oPartOcc.CreateGeometryProxy(oPartAxis, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddMateConstraint(oheaderaxisproxy, elbowEdgeProxy, 0)
        GoTo EndRoutine

ErrorHandler01:
        MsgBox("This is not a Pipe" & vbCrLf & "Select a Pipe", vbOKOnly + "4064", "Warning")
        GoTo StartPart
ErrorHandler02:
        MsgBox("This diameter is not supported" & vbCrLf & "Use another Support", vbOKOnly + "4064", "Warning")
        GoTo EndRoutine
ErrorHandler03:
        MsgBox("Could not save the part" & vbCrLf & "Check your credentials", vbOKOnly + "4064", "Warning")
        GoTo EndRoutine
EndRoutine:
        oInvApp.ScreenUpdating = True


        Me.Show()
    End Sub




    Private Sub btnPipeRoute_Click(sender As Object, e As EventArgs) Handles btnPipeRoute.Click

        PipeRouting()


    End Sub

    Private Sub PictLogo_MouseClick(sender As Object, e As MouseEventArgs)
        Process.Start("explorer.exe", "http://www.pantareinwater.be/en")
    End Sub

    Private Sub PipeRouting()

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create Or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If

BeginRoutine:

        oItemName = "Pipe"
        Get_description()
        Get_filename()
        Get_ProjectPath()

        If oPipeLenght <= 0 Then
            oPipeLenght = 250
        End If

        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oCenterPlane As WorkPlane
        Dim oSketch01 As PlanarSketch
        Dim oCenterPoint As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oWorkAx As Object
        Dim oProfile As Profile
        Dim oExtrDef As ExtrudeDefinition
        Dim oExtrusion As ExtrudeFeature
        Dim asmDoc As AssemblyDocument
        Dim partEdge As Edge
        Dim oPipeDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim oPipeEdge As Edge
        Dim oPipeEdgeProxy As EdgeProxy
        Dim oRevFeature As RevolveFeature
        Dim elbowDoc As PartDocument
        Dim elbowEdge As Edge
        Dim elbowEdgeProxy As EdgeProxy
        Dim oProfile01 As Profile
        Dim oCenterPoint01 As SketchPoint
        Dim oSketch02 As Sketch
        Dim oCenterPoint02 As SketchPoint
        Dim oCircle3
        Dim oCircle4
        Dim oProfile02 As Profile
        Dim oExtrDef01 As ExtrudeDefinition
        Dim oExtrudeFeature01
        Dim oSketch03 As Sketch
        Dim oCenterPoint03 As SketchPoint
        Dim oCircle5
        Dim oCircle6
        Dim oProfile03 As Profile
        Dim oExtrDef02 As ExtrudeDefinition
        Dim oExtrudeFeature02


        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPipe
        Else
            GoTo PlacePipe
        End If

StartPipe:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        oCenterPlane = oDef.WorkPlanes.Item(3)
        oSketch01 = oDef.Sketches.Add(oCenterPlane)
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oPipeDia / 10) / 2)
        oCircle2 = oCircles.AddByCenterRadius(oCenterPoint, ((oPipeDia - (oPipeSch * 2)) / 10) / 2)
        oWorkAx = oDef.WorkAxes.Item(1)
        oProfile = oSketch01.Profiles.AddForSolid
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef.SetDistanceExtent(oPipeLenght / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)


        oDef.Parameters.Item(1).Name = "PipeLenght"
        Dim oParam As Parameter
        oParam = oInvDoc.ComponentDefinition.Parameters("PipeLenght")
        oDef.BOMQuantity.SetBaseQuantity(BOMQuantityTypeEnum.kParameterBOMQuantity, oParam)
        oDef.BOMQuantity.BaseUnits = "m"
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits
        Dim oNewPartnumber As String
        oNewPartnumber = oItemName & " " & oPipeDia & "x" & oPipeSch & "mm" & " " & oMaterial
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part Is generated With the Pocket Brewery Piping App. This software Is part Of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        propSet3.ItemByPropId(5).Value = oNewPartnumber
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        Select Case oMaterial
            Case "S235"
                propSet3.ItemByPropId(29).Value = "EN 10220"
            Case "304L"
                propSet3.ItemByPropId(29).Value = "EN 10220"
            Case "316L"
                propSet3.ItemByPropId(29).Value = "EN 10220"
            Case "PVC"
                propSet3.ItemByPropId(29).Value = "EN 15877"
            Case "HDPE"
                propSet3.ItemByPropId(29).Value = "EN 12201"
        End Select

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        Dim entity As Edge
        Dim attribSets As AttributeSets
        Dim attribSet As AttributeSet
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(4)
        attribSets = entity.AttributeSets
        attribSet = attribSets.Add("PipInsA")
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(3)
        attribSets = entity.AttributeSets
        attribSet = attribSets.Add("PipInsB")

        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(150, 150, 150)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)



            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


        End Select

        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try
        oInvDoc.Close()
        oInvApp.ScreenUpdating = True


        '--------------Place the part interactive--------------------------------------
PlacePipe:

        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then
            Dim trans As Matrix
            trans = oInvApp.TransientGeometry.CreateMatrix
            oPipeOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), trans)
            oPipeOcc.Grounded = True
            GoTo AdaptPipelenght
        End If

        partEdge = oInvApp.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, "Select a circular edge.")
        If partEdge Is Nothing Then
            GoTo EndRoutine
        End If
        oPipeOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        oPipeDoc = oPipeOcc.Definition.Document



        attrSets = oPipeDoc.AttributeManager.FindAttributeSets("PipInsA")
        oPipeEdge = attrSets.Item(1).Parent.Parent
        oPipeEdgeProxy = Nothing
        Call oPipeOcc.CreateGeometryProxy(oPipeEdge, oPipeEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, oPipeEdgeProxy, True, 0)


AdaptPipelenght:

        Dim oOldPipe As PartDocument
        oOldPipe = oPipeOcc.Definition.Document
        Dim oNewPipe As PartDocument
        oOldPipeLenght = (oOldPipe.ComponentDefinition.Parameters.ModelParameters.Item(1).ModelValue) * 10


        oOldPipeOcc = oPipeOcc

        frmModifyPipeLenght.LblCurrentPipeLenght.Text = oOldPipeLenght & "mm"
        frmModifyPipeLenght.cbxNewPipeLenght.Text = oOldPipeLenght
        frmModifyPipeLenght.ShowDialog()

        Dim CPLdescription As String = Microsoft.VisualBasic.Left(oOldPipe.PropertySets.Item("Design Tracking Properties").ItemByPropId(5).Value, 4)

        Dim oOldfileName As String = oOldPipe.File.FullFileName
        Dim Stringlenght As Integer
        Stringlenght = Len(oOldfileName)
        Dim PosLastUnderscore As Integer
        PosLastUnderscore = oOldfileName.LastIndexOf("_")
        Dim oNewFileName As String
        oNewFileName = Microsoft.VisualBasic.Left(oOldfileName, PosLastUnderscore + 1) & oNewPipeLenght & Microsoft.VisualBasic.Right(oOldfileName, 4)
        Dim oOldPartNumber As String = oOldPipe.PropertySets.Item("Design Tracking Properties").ItemByPropId(5).Value

        If Dir(oNewFileName) = "" Then
            GoTo SaveNewPipe
        Else
            GoTo SkipNewPipe
        End If


SaveNewPipe:
        oInvApp.ScreenUpdating = False
        oOldPipe = oInvApp.Documents.Open(oOldfileName)

        oOldPipe.SaveAs(oNewFileName, True)

        oOldPipe.Close()
        oNewPipe = oInvApp.Documents.Open(oNewFileName)
        oNewPipe.ComponentDefinition.Parameters.Item("PipeLenght").Value = oNewPipeLenght / 10
        oNewPipe.PropertySets.Item("Design Tracking Properties").ItemByPropId(5).Value = oOldPartNumber
        oNewPipe.Save()
        oNewPipe.Close()
        oInvApp.ScreenUpdating = True


SkipNewPipe:

        Call oOldPipeOcc.Replace(oNewFileName, False)


        Select Case MsgBox("Resume Pipe Routing?", 4 + 4096 + 32, "")
            Case MsgBoxResult.Yes
                GoTo LoopPipeRouting
            Case MsgBoxResult.No
                GoTo EndRoutine
        End Select

LoopPipeRouting:


        oItemName = "Elbow"

        Get_description()
        Get_ProjectPath()
        Get_filename()


        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartElbow
        Else
            GoTo PlaceElbow
        End If

StartElbow:



        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        pi = Math.Acos(-1)
        oElbowAngle = (90 * pi / 180)

        Select Case oMaterial
            Case "S235", "304L", "316L"

                oCenterPlane = oDef.WorkPlanes.Item(3)
                oSketch01 = oDef.Sketches.Add(oCenterPlane)
                oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, (oElbowRadius / 10)), False)
                oCircles = oSketch01.SketchCircles
                oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oPipeDia / 10) / 2)
                oCircle2 = oCircles.AddByCenterRadius(oCenterPoint, ((oPipeDia - (oPipeSch * 2)) / 10) / 2)
                oWorkAx = oDef.WorkAxes.Item(1)
                oProfile = oSketch01.Profiles.AddForSolid
                oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile, oWorkAx, oElbowAngle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)
                oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

                entity = oDef.SurfaceBodies.Item(1).Edges.Item(3)
                attribSets = entity.AttributeSets
                attribSet = attribSets.Add("ElbwInsA")
                entity = oDef.SurfaceBodies.Item(1).Edges.Item(4)
                attribSets = entity.AttributeSets
                attribSet = attribSets.Add("ElbwInsB")
                Select Case oMaterial
                    Case "S235"
                        Dim docAssets As Assets
                        docAssets = oInvDoc.Assets
                        Dim appearance As Asset
                        appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                        Dim oPart As PartDocument
                        oPart = oInvApp.ActiveDocument
                        Dim oMat As Material
                        oMat = oPart.Materials.Item("S235")
                        oMat.Density = 7.85
                        oPart.ComponentDefinition.Material = oMat
                        Dim RS As RenderStyle
                        Try
                            RS = oInvDoc.RenderStyles.Item("Steel235")
                        Catch ex As Exception
                            RS = oInvDoc.RenderStyles.Add("Steel235")
                            RS.Reflectivity = 5
                            RS.SetDiffuseColor(200, 200, 200)  'Grey
                        End Try
                        Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

                    Case "304L"
                        Dim docAssets As Assets
                        docAssets = oInvDoc.Assets
                        Dim appearance As Asset
                        appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")

                        Dim oPart As PartDocument
                        oPart = oInvApp.ActiveDocument
                        Dim oMat As Material
                        oMat = oPart.Materials.Item("304L")
                        oMat.Density = 8.03
                        oPart.ComponentDefinition.Material = oMat
                        Dim RS As RenderStyle
                        Try
                            RS = oInvDoc.RenderStyles.Item("Inox")
                        Catch ex As Exception
                            RS = oInvDoc.RenderStyles.Add("Inox")
                            RS.Reflectivity = 35
                            RS.SetDiffuseColor(240, 240, 240)  'Grey
                        End Try
                        Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

                    Case "316L"
                        Dim docAssets As Assets
                        docAssets = oInvDoc.Assets
                        Dim appearance As Asset
                        appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                        Dim oPart As PartDocument
                        oPart = oInvApp.ActiveDocument
                        Dim oMat As Material
                        oMat = oPart.Materials.Item("316L")
                        oMat.Density = 7.99
                        oPart.ComponentDefinition.Material = oMat
                        Dim RS As RenderStyle
                        Try
                            RS = oInvDoc.RenderStyles.Item("Inox")
                        Catch ex As Exception
                            RS = oInvDoc.RenderStyles.Add("Inox")
                            RS.Reflectivity = 35
                            RS.SetDiffuseColor(240, 240, 240)  'Grey
                        End Try
                        Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


                End Select

            Case "PVC"

                oCenterPlane = oDef.WorkPlanes.Item(3) 'Kies Plane XY (3)om op te tekenen
                oSketch01 = oDef.Sketches.Add(oCenterPlane) 'Maakt de schets aan
                oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, (oElbowRadius / 10)), False) 'Maakt het middelpunt van de circles
                oCircles = oSketch01.SketchCircles
                oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, ((oPipeDia + (oPipeSch * 2)) / 10) / 2) 'Teken circel 1
                oCircle2 = oCircles.AddByCenterRadius(oCenterPoint, ((oPipeDia - (oPipeSch * 2)) / 10) / 2) 'Teken circel 2
                oWorkAx = oDef.WorkAxes.Item(1)
                oProfile = oSketch01.Profiles.AddForSolid 'Maakt het profiel om te revolven
                oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile, oWorkAx, oElbowAngle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)


                '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------

                entity = oDef.SurfaceBodies.Item(1).Edges.Item(1)
                attribSets = entity.AttributeSets
                attribSet = attribSets.Add("ElbwInsA")
                entity = oDef.SurfaceBodies.Item(1).Edges.Item(2)
                attribSets = entity.AttributeSets
                attribSet = attribSets.Add("ElbwInsB")



                oSketch02 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3))
                oCenterPoint02 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, (oElbowRadius / 10)), False)
                oCircle3 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint02, ((oPipeDia + (oPipeSch * 2)) / 10) / 2) 'Teken circel 3
                oCircle4 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint02, (oPipeDia / 10) / 2) 'Teken circel 4
                oProfile02 = oSketch02.Profiles.AddForSolid 'Maakt het profiel om te extruden
                oExtrDef01 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile02, PartFeatureOperationEnum.kJoinOperation)
                Call oExtrDef01.SetDistanceExtent(oSockLenght / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
                oExtrudeFeature01 = oDef.Features.ExtrudeFeatures.Add(oExtrDef01)

                oSketch03 = oDef.Sketches.Add(oRevFeature.EndFaces.Item(1))
                oCenterPoint03 = oSketch03.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
                oCircle5 = oSketch03.SketchCircles.AddByCenterRadius(oCenterPoint03, ((oPipeDia + (oPipeSch * 2)) / 10) / 2) 'Teken circel 3
                oCircle6 = oSketch03.SketchCircles.AddByCenterRadius(oCenterPoint03, (oPipeDia / 10) / 2) 'Teken circel 4
                oProfile03 = oSketch03.Profiles.AddForSolid 'Maakt het profiel om te extruden
                oExtrDef02 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile03, PartFeatureOperationEnum.kJoinOperation)
                Call oExtrDef02.SetDistanceExtent(oSockLenght / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
                oExtrudeFeature02 = oDef.Features.ExtrudeFeatures.Add(oExtrDef02)
                oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(150, 150, 150)  'Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrudeFeature01.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrudeFeature02.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "HDPE"


                oCenterPlane = oDef.WorkPlanes.Item(3) 'Kies Plane XY (3)om op te tekenen
                oSketch01 = oDef.Sketches.Add(oCenterPlane) 'Maakt de schets aan
                oCenterPoint01 = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, (oElbowRadius / 10)), False) 'Maakt het middelpunt van de circles
                oCircles = oSketch01.SketchCircles
                oCircle1 = oCircles.AddByCenterRadius(oCenterPoint01, oPipeDia / 10 / 2) 'Teken circel 1
                oCircle2 = oCircles.AddByCenterRadius(oCenterPoint01, ((oPipeDia - (oPipeSch * 2)) / 10) / 2) 'Teken circel 2
                oWorkAx = oDef.WorkAxes.Item(1)
                oProfile01 = oSketch01.Profiles.AddForSolid 'Maakt het profiel om te revolven
                oRevFeature = oDef.Features.RevolveFeatures.AddByAngle(oProfile01, oWorkAx, oElbowAngle, PartFeatureExtentDirectionEnum.kNegativeExtentDirection, PartFeatureOperationEnum.kJoinOperation)

                oSketch02 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3))
                oCenterPoint02 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, (oElbowRadius / 10)), False)
                oCircle3 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint02, ((oPipeDia - (oPipeSch * 2)) / 10) / 2) 'Teken circel 3
                oCircle4 = oSketch02.SketchCircles.AddByCenterRadius(oCenterPoint02, (oPipeDia / 10) / 2) 'Teken circel 4
                oProfile02 = oSketch02.Profiles.AddForSolid 'Maakt het profiel om te extruden
                oExtrDef01 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile02, PartFeatureOperationEnum.kJoinOperation)
                Call oExtrDef01.SetDistanceExtent((oElbowLenght - oElbowRadius) / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
                oExtrudeFeature01 = oDef.Features.ExtrudeFeatures.Add(oExtrDef01)

                oSketch03 = oDef.Sketches.Add(oRevFeature.EndFaces.Item(1))
                oCenterPoint03 = oSketch03.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
                oCircle5 = oSketch03.SketchCircles.AddByCenterRadius(oCenterPoint03, ((oPipeDia - (oPipeSch * 2)) / 10) / 2) 'Teken circel 3
                oCircle6 = oSketch03.SketchCircles.AddByCenterRadius(oCenterPoint03, (oPipeDia / 10) / 2) 'Teken circel 4
                oProfile03 = oSketch03.Profiles.AddForSolid 'Maakt het profiel om te extruden
                oExtrDef02 = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile03, PartFeatureOperationEnum.kJoinOperation)
                Call oExtrDef02.SetDistanceExtent((oElbowLenght - oElbowRadius) / 10, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)
                oExtrudeFeature02 = oDef.Features.ExtrudeFeatures.Add(oExtrDef02)
                oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits

                '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------

                entity = oDef.SurfaceBodies.Item(1).Edges.Item(3)
                attribSets = entity.AttributeSets
                attribSet = attribSets.Add("ElbwInsA")
                entity = oDef.SurfaceBodies.Item(1).Edges.Item(7)
                attribSets = entity.AttributeSets
                attribSet = attribSets.Add("ElbwInsB")

                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oRevFeature.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrudeFeature01.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)
                Call oExtrudeFeature02.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


        End Select

        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."

        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"

        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        propSet3.ItemByPropId(5).Value = lblDescription.Text
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"

        Select Case oMaterial
            Case "S235"
                propSet3.ItemByPropId(29).Value = "EN 10253"
            Case "304L"
                propSet3.ItemByPropId(29).Value = "EN 10253"
            Case "316L"
                propSet3.ItemByPropId(29).Value = "EN 10253"
            Case "PVC"
                propSet3.ItemByPropId(29).Value = "GIV"
            Case "HDPE"
                propSet3.ItemByPropId(29).Value = "SAS"
        End Select

        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"
        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing




        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try


        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

PlaceElbow:

        asmDoc = oInvApp.ActiveDocument
        oPipeDoc = oOldPipeOcc.Definition.Document
        attrSets = oPipeDoc.AttributeManager.FindAttributeSets("PipInsB")
        oPipeEdge = attrSets.Item(1).Parent.Parent
        oPipeEdgeProxy = Nothing
        Call oPipeOcc.CreateGeometryProxy(oPipeEdge, oPipeEdgeProxy)

        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("ElbwInsA")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(oPipeEdgeProxy, elbowEdgeProxy, True, 0)

        pi = Math.Acos(-1)

        Dim oCrossPlane As WorkPlane
        oCrossPlane = Nothing
        Dim oCrossPlaneProxy As WorkPlaneProxy
        oCrossPlaneProxy = Nothing
        oCrossPlane = elbowDoc.ComponentDefinition.WorkPlanes(2)
        Call elbowOcc.CreateGeometryProxy(oCrossPlane, oCrossPlaneProxy)


        Dim oOrientXY As Double
        Dim oOrientXZ As Double
        Dim oOrientYZ As Double

        oOrientXY = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(3), oCrossPlaneProxy) / pi * 180)
        oOrientXZ = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(2), oCrossPlaneProxy) / pi * 180)
        oOrientYZ = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(1), oCrossPlaneProxy) / pi * 180)


        oOrient = "Not aligned"


        If oOrientXY = 90 Then
            oOrient = "XYaxis"
        End If
        If oOrientXZ = 90 Then
            oOrient = "XZaxis"
        End If
        If oOrientYZ = 90 Then
            oOrient = "YZaxis"
        End If

        oElbowInsertAngle = 0


        If oOrient = "XYaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(3), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutineElbow
            End If

        End If

        If oOrient = "XZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(2), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutineElbow
            End If
        End If

        If oOrient = "YZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = elbowDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(1), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutineElbow
            End If
        End If




EndRoutineElbow:


        Select Case MsgBox("Resume Pipe Routing?", MsgBoxStyle.YesNo)
            Case MsgBoxResult.Yes

            Case MsgBoxResult.No
                GoTo EndRoutine
        End Select

        oItemName = "Pipe"

        Get_description()
        Get_ProjectPath()
        Get_filename()



        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPipe2
        Else
            GoTo PlacePipe2
        End If

StartPipe2:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry
        oCenterPlane = oDef.WorkPlanes.Item(3)
        oSketch01 = oDef.Sketches.Add(oCenterPlane)
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False)
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oPipeDia / 10) / 2)
        oCircle2 = oCircles.AddByCenterRadius(oCenterPoint, ((oPipeDia - (oPipeSch * 2)) / 10) / 2)
        oWorkAx = oDef.WorkAxes.Item(1)
        oProfile = oSketch01.Profiles.AddForSolid
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef.SetDistanceExtent(oPipeLenght / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)
        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)

        oDef.Parameters.Item(1).Name = "PipeLenght"
        oParam = oInvDoc.ComponentDefinition.Parameters("PipeLenght")
        'oParam.ExposedAsProperty = True
        oDef.BOMQuantity.SetBaseQuantity(BOMQuantityTypeEnum.kParameterBOMQuantity, oParam)
        oDef.BOMQuantity.BaseUnits = "m"
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits
        oNewPartnumber = oItemName & " " & oPipeDia & "x" & oPipeSch & "mm" & " " & oMaterial


        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part Is generated With the Pocket Brewery Piping App. This software Is part Of the Pocket Brewery Design Suite."

        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"

        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        propSet3.ItemByPropId(5).Value = oNewPartnumber
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"
        Select Case oMaterial
            Case "S235"
                propSet3.ItemByPropId(29).Value = "EN 10220"
            Case "304L"
                propSet3.ItemByPropId(29).Value = "EN 10220"
            Case "316L"
                propSet3.ItemByPropId(29).Value = "EN 10220"
            Case "PVC"
                propSet3.ItemByPropId(29).Value = "EN 15877"
            Case "HDPE"
                propSet3.ItemByPropId(29).Value = "EN 12201"
        End Select

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing


        entity = oDef.SurfaceBodies.Item(1).Edges.Item(4)
        attribSets = entity.AttributeSets
        attribSet = attribSets.Add("PipInsA")
        entity = oDef.SurfaceBodies.Item(1).Edges.Item(3)
        attribSets = entity.AttributeSets
        attribSet = attribSets.Add("PipInsB")

        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)

            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "PVC"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "PVC, Unplasticized", "PVC", "PVC")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("PVC")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("PVCpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("PVCpipe")
                    RS.Reflectivity = 0
                    RS.SetDiffuseColor(150, 150, 150)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)



            Case "HDPE"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Polyethylene, High Density", "HDPE", "HDPE")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("HDPE")
                oMat.Density = 1.29
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("HDPEpipe")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("HDPEpipe")
                    RS.Reflectivity = 2
                    RS.SetDiffuseColor(150, 150, 150)  'Dark Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


        End Select



        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try
        oInvDoc.Close()
        oInvApp.ScreenUpdating = True


PlacePipe2:

        asmDoc = oInvApp.ActiveDocument
        elbowDoc = elbowOcc.Definition.Document
        attrSets = elbowDoc.AttributeManager.FindAttributeSets("ElbwInsB")
        elbowEdge = attrSets.Item(1).Parent.Parent
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(elbowEdge, elbowEdgeProxy)
        oPipeOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        oPipeDoc = oPipeOcc.Definition.Document
        attrSets = oPipeDoc.AttributeManager.FindAttributeSets("PipInsA")
        oPipeEdge = attrSets.Item(1).Parent.Parent
        oPipeEdgeProxy = Nothing
        Call oPipeOcc.CreateGeometryProxy(oPipeEdge, oPipeEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddInsertConstraint(elbowEdgeProxy, oPipeEdgeProxy, True, 0)

AdaptPipelenght2:

        oOldPipe = oPipeOcc.Definition.Document
        oOldPipeLenght = (oOldPipe.ComponentDefinition.Parameters.ModelParameters.Item(1).ModelValue) * 10
        oOldPipeOcc = oPipeOcc

        frmModifyPipeLenght.LblCurrentPipeLenght.Text = oOldPipeLenght & "mm"
        frmModifyPipeLenght.cbxNewPipeLenght.Text = oOldPipeLenght
        frmModifyPipeLenght.ShowDialog()

        CPLdescription = Microsoft.VisualBasic.Left(oOldPipe.PropertySets.Item("Design Tracking Properties").ItemByPropId(5).Value, 4)

        oOldfileName = oOldPipe.File.FullFileName
        Stringlenght = Len(oOldfileName)
        PosLastUnderscore = oOldfileName.LastIndexOf("_")
        oNewFileName = Microsoft.VisualBasic.Left(oOldfileName, PosLastUnderscore + 1) & oNewPipeLenght & Microsoft.VisualBasic.Right(oOldfileName, 4)
        oOldPartNumber = oOldPipe.PropertySets.Item("Design Tracking Properties").ItemByPropId(5).Value

        If Dir(oNewFileName) = "" Then
            GoTo SaveNewPipe2
        Else
            GoTo SkipNewPipe2
        End If


SaveNewPipe2:
        oInvApp.ScreenUpdating = False
        oOldPipe = oInvApp.Documents.Open(oOldfileName)

        oOldPipe.SaveAs(oNewFileName, True)

        oOldPipe.Close()
        oNewPipe = oInvApp.Documents.Open(oNewFileName)
        oNewPipe.ComponentDefinition.Parameters.Item("PipeLenght").Value = oNewPipeLenght / 10
        oNewPipe.PropertySets.Item("Design Tracking Properties").ItemByPropId(5).Value = oOldPartNumber
        oNewPipe.Save()
        oNewPipe.Close()
        oInvApp.ScreenUpdating = True


SkipNewPipe2:
        '------------------------------------------------------Replace the old pipe

        Call oOldPipeOcc.Replace(oNewFileName, False)

        Select Case MsgBox("Resume Pipe Routing?", MsgBoxStyle.YesNo)
            Case MsgBoxResult.Yes
                GoTo LoopPipeRouting
            Case MsgBoxResult.No
                GoTo EndRoutine
        End Select



EndRoutine:

    End Sub


    Private Sub PlaceBranchConnection()
        '------------------------------------------------
        '
        '          PLACING Branch Connection
        '
        '------------------------------------------------
        Dim oDef As PartComponentDefinition
        Dim oTG As TransientGeometry
        Dim oSketch01 As PlanarSketch
        Dim oSketch02 As PlanarSketch
        Dim oCenterPoint As SketchPoint
        Dim oCenterPoint2 As SketchPoint
        Dim oCircles As SketchCircles
        Dim oCircle1 As SketchCircle
        Dim oCircle2 As SketchCircle
        Dim oCirclesb As SketchCircles
        Dim oCircle3 As SketchCircle
        Dim oWorkAx As Object
        Dim oWorkAxb As Object
        Dim oProfile As Profile
        Dim oProfileb As Profile
        Dim oExtrDef As ExtrudeDefinition
        Dim oExtrDefb As ExtrudeDefinition
        Dim oExtrusion As ExtrudeFeature
        Dim oExtrusionb As ExtrudeFeature
        Dim asmDoc As AssemblyDocument

        'Dim elbowOcc As ComponentOccurrence
        Dim oBranchDoc As PartDocument
        Dim attrSets As AttributeSetsEnumerator
        Dim oBranchaxis As Object


        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            GoTo BeginRoutine
        Else MsgBox("Open, Create or Activate an Assembly !", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If


BeginRoutine:

        asmDoc = oInvApp.ActiveDocument
        If asmDoc.ComponentDefinition.ImmediateReferencedDefinitions.Count < 1 Then

            MsgBox("A Header Pipe is needed to place a Branch Pipe", vbOKOnly + "4064", "Warning")
            GoTo EndRoutine
        End If


ReselectHeader:

        Dim oHeader As FaceProxy
        oHeader = oInvApp.CommandManager.Pick(SelectionFilterEnum.kPartFaceCylindricalFilter, "Select Header Pipe.")
        If oHeader Is Nothing Then
            GoTo EndRoutine
        End If

        Dim oHeaderpart As PartDocument
        oHeaderpart = oHeader.Parent.CreatedByFeature.Parent.Document

        If oHeaderpart.DisplayName.StartsWith("Pipe_") = True Or oHeaderpart.DisplayName.StartsWith("BranchPipe_") = True Then
        Else
            MsgBox("This is not a Pipe, select a pipe.", vbOKOnly + "4064", "Warning")
            GoTo ReselectHeader
        End If



        'MsgBox("test pipe of branchpipe OK")
        Dim oheaderRad As Double
        oheaderRad = oHeaderpart.ComponentDefinition.Sketches.Item(1).SketchCircles.Item(1).Radius

        ' MsgBox("Diameter header" & (oheaderRad * 20) & vbCrLf & "diameter branch" & oPipeDia)

        'MsgBox(oheaderRad)
        If (oheaderRad * 20) < oPipeDia Then
            MsgBox("The branch is larger than the header." & vbCrLf & "Select another header or a smaller branch.", vbOKOnly + "4064", "Warning")
            GoTo ReselectHeader
        End If

        lblFilename.Text = oItemName & "_" & oPipeSize & "_" & oheaderRad * 20 & "mm" & oMaterial & "_" & oPipeLenght & ".ipt"
        oFilename = lblFilename.Text

        'MsgBox(oFilename)

        Dim oHeaderocc As ComponentOccurrence
        oHeaderocc = oHeader.ContainingOccurrence
        Dim oheaderaxis As Object
        oheaderaxis = oHeaderpart.ComponentDefinition.WorkAxes.Item(3)



        If Dir(lblProjectPath.Text & oFilename) = "" Then
            GoTo StartPart
        Else
            GoTo PlacePart
        End If
        '---------Nieuw Part maken en plaatsen als het nog niet bestond-------------
StartPart:
        oInvApp.ScreenUpdating = False
        oInvApp = GetObject(, "Inventor.Application")
        oInvDoc = oInvApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject)
        oInvDoc = oInvApp.ActiveDocument
        oDef = oInvApp.ActiveDocument.ComponentDefinition
        oTG = oInvApp.TransientGeometry

        oSketch01 = oDef.Sketches.Add(oDef.WorkPlanes.Item(3)) 'Maakt de schets aan
        oCenterPoint = oSketch01.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles
        oCircles = oSketch01.SketchCircles
        oCircle1 = oCircles.AddByCenterRadius(oCenterPoint, (oPipeDia / 10) / 2) 'Teken circel 1
        oCircle2 = oCircles.AddByCenterRadius(oCenterPoint, ((oPipeDia - (2 * oPipeSch)) / 10) / 2) 'Teken circel 2
        oWorkAx = oDef.WorkAxes.Item(1)
        oProfile = oSketch01.Profiles.AddForSolid 'Maakt het profiel om te extruden
        oExtrDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kNewBodyOperation)
        Call oExtrDef.SetDistanceExtent((oPipeDia / 2 + oPipeLenght) / 10, PartFeatureExtentDirectionEnum.kNegativeExtentDirection)

        oExtrusion = oDef.Features.ExtrudeFeatures.Add(oExtrDef)
        oSketch02 = oDef.Sketches.Add(oDef.WorkPlanes.Item(2)) 'Maakt de schets aan
        oCirclesb = oSketch02.SketchCircles
        oCenterPoint2 = oSketch02.SketchPoints.Add(oTG.CreatePoint2d(0, 0), False) 'Maakt het middelpunt van de circles
        oCircle3 = oCirclesb.AddByCenterRadius(oCenterPoint2, oheaderRad) 'Teken circel 1
        oProfileb = oSketch02.Profiles.AddForSolid 'Maakt het profiel om te cut extruden
        oWorkAxb = oDef.WorkAxes.Item(1)
        oExtrDefb = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfileb, PartFeatureOperationEnum.kCutOperation)
        Call oExtrDefb.SetDistanceExtent(oPipeDia / 10, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)
        oExtrusionb = oDef.Features.ExtrudeFeatures.Add(oExtrDefb)
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits


        oDef.Parameters.Item(1).Name = "PipeLenght"
        'Get the parameter
        Dim oParam As Parameter
        oParam = oInvDoc.ComponentDefinition.Parameters("PipeLenght")
        'oParam.ExposedAsProperty = True
        oDef.BOMQuantity.SetBaseQuantity(BOMQuantityTypeEnum.kParameterBOMQuantity, oParam)
        oDef.BOMQuantity.BaseUnits = "m"
        oInvDoc.UnitsOfMeasure.LengthUnits = UnitsTypeEnum.kMillimeterLengthUnits
        Dim oNewPartnumber As String
        oNewPartnumber = "Pipe" & " " & oPipeDia & "x" & oPipeSch & "mm" & " " & oMaterial



        '-----------------------------------------------------------------------------Setting Properties------------------------------------------------- 
        ' Get the design tracking property set.
        Dim propSet1 As PropertySet
        propSet1 = oInvDoc.PropertySets.Item("Inventor Summary Information")
        ' Edit the values of a couple of properties.
        propSet1.ItemByPropId(2).Value = "Piping Parts"
        propSet1.ItemByPropId(4).Value = "Marc Crauwels"
        propSet1.ItemByPropId(6).Value = "This Piping Part is generated with the Pocket Brewery Piping App. This software is part of the Pocket Brewery Design Suite."
        Dim propSet2 As PropertySet
        propSet2 = oInvDoc.PropertySets.Item("Inventor Document Summary Information")
        ' Edit the values of a couple of properties.
        propSet2.ItemByPropId(2).Value = "Plant Design Equipment"
        propSet2.ItemByPropId(15).Value = "Pocket Brewery Belgium"
        Dim propSet3 As PropertySet
        propSet3 = oInvDoc.PropertySets.Item("Design Tracking Properties")
        ' Edit the values of a couple of properties.
        propSet3.ItemByPropId(5).Value = oNewPartnumber
        propSet3.ItemByPropId(41).Value = "Marc Crauwels"
        propSet3.ItemByPropId(29).Value = "EN 10220"
        propSet3.ItemByPropId(23).Value = "http://www.pantareinwater.be/en"

        propSet1 = Nothing
        propSet2 = Nothing
        propSet3 = Nothing

        '---------Maak een AttributeSet "InsertEdges" met een attribute "InsertA"----------
        Dim Insertaxis As Object
        Insertaxis = oDef.WorkAxes(2)
        Dim attribSets As AttributeSets
        attribSets = Insertaxis.AttributeSets
        Dim attribSet As AttributeSet
        attribSet = attribSets.Add("InsertAxis")
        'Dim attrib As Attribute


        Select Case oMaterial
            Case "S235"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Steel, Carbon", "S235", "S235")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("S235")
                oMat.Density = 7.85
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Steel235")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Steel235")
                    RS.Reflectivity = 5
                    RS.SetDiffuseColor(200, 200, 200)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "304L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "304L", "304L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("304L")
                oMat.Density = 8.03
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)


            Case "316L"
                Dim docAssets As Assets
                docAssets = oInvDoc.Assets
                ' Create a new appearance asset.
                Dim appearance As Asset
                appearance = docAssets.Add(AssetTypeEnum.kAssetTypeMaterial, "Stainless Steel, Austenitic", "316L", "316L")
                Dim oPart As PartDocument
                oPart = oInvApp.ActiveDocument
                Dim oMat As Material
                oMat = oPart.Materials.Item("316L")
                oMat.Density = 7.99
                oPart.ComponentDefinition.Material = oMat
                Dim RS As RenderStyle
                Try
                    RS = oInvDoc.RenderStyles.Item("Inox")
                Catch ex As Exception
                    RS = oInvDoc.RenderStyles.Add("Inox")
                    RS.Reflectivity = 35
                    RS.SetDiffuseColor(240, 240, 240)  'Grey
                End Try
                Call oExtrusion.SetRenderStyle(StyleSourceTypeEnum.kOverrideRenderStyle, RS)



        End Select

        '---------Nieuw part saven in juiste DIR-------------------------------------------
        Try
            oInvDoc.SaveAs(lblProjectPath.Text & oFilename, False)
        Catch ex As Exception
            MsgBox("Could not save the part." & vbCrLf & "Try again or check your credentials", vbOKOnly + "4064", "Warning")
            oInvApp.ScreenUpdating = True
            GoTo EndRoutine
        End Try

        oInvDoc.Close()
        oInvApp.ScreenUpdating = True

        '--------------Place the part interactive--------------------------------------
PlacePart:
        ' Get the active assembly.

        Me.Hide()



        Dim oheaderaxisproxy As WorkAxisProxy
        oheaderaxisproxy = Nothing
        Call oHeaderocc.CreateGeometryProxy(oheaderaxis, oheaderaxisproxy)

        asmDoc = oInvApp.ActiveDocument
        elbowOcc = asmDoc.ComponentDefinition.Occurrences.Add((lblProjectPath.Text & oFilename), oInvApp.TransientGeometry.CreateMatrix)
        oBranchDoc = elbowOcc.Definition.Document

        attrSets = oBranchDoc.AttributeManager.FindAttributeSets("InsertAxis")
        oBranchaxis = attrSets.Item(1).Parent.Parent

        Dim elbowEdgeProxy As WorkAxisProxy
        elbowEdgeProxy = Nothing
        Call elbowOcc.CreateGeometryProxy(oBranchaxis, elbowEdgeProxy)
        Call asmDoc.ComponentDefinition.Constraints.AddMateConstraint(oheaderaxisproxy, elbowEdgeProxy, 0)




        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 

        'Start Angle Constraint aligned ELBOW

        'Define the horizontal and vertical plane of the part


        pi = Math.Acos(-1)

        'Proxyplane maken van het werkvlak paralel met het insertvlak

        Dim oCrossPlane As WorkPlane
        oCrossPlane = Nothing
        Dim oCrossPlaneProxy As WorkPlaneProxy
        oCrossPlaneProxy = Nothing
        oCrossPlane = oBranchDoc.ComponentDefinition.WorkPlanes(2)
        Call elbowOcc.CreateGeometryProxy(oCrossPlane, oCrossPlaneProxy)

        'bepaal de hoek tussen het insertvlak en één der werkvlakken van de assembly in graden

        Dim oOrientXY As Double
        Dim oOrientXZ As Double
        Dim oOrientYZ As Double

        oOrientXY = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(3), oCrossPlaneProxy) / pi * 180)
        oOrientXZ = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(2), oCrossPlaneProxy) / pi * 180)
        oOrientYZ = (oInvApp.MeasureTools.GetAngle(asmDoc.ComponentDefinition.WorkPlanes(1), oCrossPlaneProxy) / pi * 180)

        'oOrient is public gedeclareerd zie begin

        oOrient = "Not aligned"

        'Check the orientation of the part

        If oOrientXY = 90 Then
            oOrient = "XYaxis"
        End If
        If oOrientXZ = 90 Then
            oOrient = "XZaxis"
        End If
        If oOrientYZ = 90 Then
            oOrient = "YZaxis"
        End If

        'MsgBox(oOrient)


        oElbowInsertAngle = 0

        'Afhangkelijk van welk vlak er haaks tov het insertvlak staat wordt er een constraint gemaakt met middenvlak (werkvlak1) van de elbow

        If oOrient = "XYaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = oBranchDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(3), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If

        End If

        If oOrient = "XZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = oBranchDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(2), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If

        If oOrient = "YZaxis" Then
            Dim oPartAnglePlane As WorkPlane
            oPartAnglePlane = oBranchDoc.ComponentDefinition.WorkPlanes(1)

            oPartAglePlaneProxy = Nothing
            Try
                Call elbowOcc.CreateGeometryProxy(oPartAnglePlane, oPartAglePlaneProxy)
                Call asmDoc.ComponentDefinition.Constraints.AddAngleConstraint(asmDoc.ComponentDefinition.WorkPlanes(1), oPartAglePlaneProxy, oElbowInsertAngle, AngleConstraintSolutionTypeEnum.kDirectedSolution)
            Catch
            End Try

            frmRotateElbow.ShowDialog()

            If frmRotateElbow.oEnterclick = True Then
                GoTo EndRoutine
            End If
        End If
        'END TEST ROTATION ELBOW
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 
        '- - - - - - - - - - - - - - - - - - - - - -- - - - -- - -- - - - - -- 

EndRoutine:
        Me.Show()
    End Sub




    '-------------------------------------------------------------------------------------------------------------
    '-------------------------------------------------------------------------------------------------------------
    '-------------------------------------------------------------------------------------------------------------
    '-------------------------------------------------------------------------------------------------------------
    '-------------------------------------------------------------------------------------------------------------


    Private Sub BtnPlacePart_Click(sender As Object, e As EventArgs) Handles btnPlacePart.Click

        SetVisualStyle()

        Select Case oItemName
            Case "Pipe"
                Select Case oMaterial
                    Case "S235", "304L", "316L"
                        PlaceSteelPipe()
                    Case "PVC", "HDPE"
                        PlacePlasticPipe()
                End Select

            Case "BranchPipe"
                Select Case oMaterial
                    Case "S235", "304L", "316L"
                        PlaceBranchConnection()
                End Select

            Case "Elbow"
                Select Case oMaterial
                    Case "S235", "304L", "316L"
                        PlaceSteelElbow()
                    Case "PVC"
                        PlacePVCElbow()
                    Case "HDPE"
                        PlaceHDPEElbow()
                End Select
            Case "Elbow45gr"
                Select Case oMaterial
                    Case "S235", "304L", "316L"
                        PlaceSteel45grElbow()
                    Case "PVC"
                        PlacePVCElbow45gr()
                    Case "HDPE"
                        PlaceHDPE45grElbow()
                End Select
            Case "Tee"
                Select Case oMaterial
                    Case "S235", "304L", "316L", "HDPE"
                        PlaceSteelTee()
                    Case "PVC"
                        PlacePVCTee()
                End Select
            Case "PulledTee"
                Select Case oMaterial
                    Case "304L", "316L"
                        PlacePulledTee()
                End Select
            Case "RedTee"
                Select Case oMaterial
                    Case "S235", "304L", "316L", "HDPE"
                        PlaceSteelRedTee()
                    Case "PVC"
                        PlacePVCRedTee()
                End Select
            Case "ConcRed"
                Select Case oMaterial
                    Case "S235", "304L", "316L", "HDPE"
                        PlaceSteelReducer()
                    Case "PVC"
                        PlacePVCReducer()
                End Select
            Case "EccRed"
                Select Case oMaterial
                    Case "S235", "304L", "316L", "HDPE"
                        PlaceSteelEccReducer()
                    Case "PVC"
                        PlacePVCECCReducer()
                End Select
            Case "Coupling"
                Select Case oMaterial
                    Case "S235", "304L", "316L"
                        PlaceSteelCoupling()
                    Case "PVC"
                        PlacePVCCoupling()
                End Select
            Case "Cap"
                Select Case oMaterial
                    Case "S235", "304L", "316L", "HDPE"
                        PlaceSteelCaps()
                    Case "PVC"
                        PlacePVCCaps()
                End Select
            Case "Nipple"
                Select Case oMaterial
                    Case "S235", "304L", "316L"
                        PlaceSteelPipeNipple()
                End Select
            Case "FlangeSO"
                Select Case oMaterial
                    Case "S235", "304L", "316L"
                        PlaceSteelFlangeSO()
                End Select
            Case "FlangeLJ"
                Select Case oMaterial
                    Case "S235", "304L", "316L", "PVC", "HDPE", "ALU"
                        PlaceSteelFlangeLJ()
                End Select
            Case "BlindFlange"
                Select Case oMaterial
                    Case "S235", "304L", "316L", "PVC", "HDPE"
                        PlaceSteelBlindFlange()
                End Select
            Case "FlangeWN"
                Select Case oMaterial
                    Case "S235", "304L", "316L"
                        PlaceSteelFlangeWN()
                End Select
            Case "FlangeSW"
                Select Case oMaterial
                    Case "PVC"
                        PlacePVCFlangeSW()
                End Select
            Case "StubEnd"
                Select Case oMaterial
                    Case "S235", "304L", "316L"
                        PlaceSteelStubEnds()
                    Case "PVC"
                        PlacePVCStubEnds()
                    Case "HDPE"
                        PlaceHDPEStubEnds()
                End Select
            Case "Olet"
                Select Case oMaterial
                    Case "S235", "304L", "316L"
                        PlaceSteelOlet()
                End Select
            Case "Union"
                Select Case oMaterial
                    Case "S235", "304L", "316L"
                        PlaceSteelUnion()
                    Case "PVC"
                        PlacePVCUnion()
                    Case "HDPE"
                        PlaceHDPEUnion()
                End Select
            Case "RedBush"
                Select Case oMaterial
                    Case "PVC"
                        PlacePVCReducingBush()
                End Select
            Case "MaleAdapter"
                Select Case oMaterial
                    Case "PVC"
                        PlacePVCMaleAdapter()
                    Case "HDPE"
                        PlaceHDPEMaleAdapter()
                End Select
            Case "FemaleAdapter"
                Select Case oMaterial
                    Case "HDPE"
                        PlaceHDPEfemaleAdapter()
                End Select
            Case "AdapterBush"
                Select Case oMaterial
                    Case "PVC"
                        PlacePVCAdapterBush()
                End Select
            Case "ElectroCoupling"
                PlaceHDPEelectroCoupling()
            Case "Gasket"
                PlaceGasket()
            Case "BoltSet"
                PlaceBoltsets()
            Case "StudBoltSet"
                PlaceStudBoltSets()
            Case "Support"
                Select Case oSupportType
                    Case "PipeClamp"
                        Select Case oMaterial
                            Case "GALVA"
                                PlacePipeClamp()
                            Case "304L"
                                PlacePipeClamp()
                        End Select
                    Case "U-Bolt"
                        Select Case oMaterial
                            Case "8.8"
                                PlaceUBolt()
                            Case "A2"
                                PlaceUBolt()
                        End Select
                    Case "Dammgulast"
                        PlaceDammgulast()

                    Case "PipeClipASV"
                        PlacePipeClampASV()

                    Case "PipeClip"
                        PlacePipeClipIt()

                    Case "PipeClampStauff"
                        Place_Pipe_Clamp_Stauff()
                End Select
        End Select
    End Sub


    '-------------------------------------------------------------------------------------------------------------
    '-------------------------------------------------------------------------------------------------------------
    '-------------------------------------------------------------------------------------------------------------
    '-------------------------------------------------------------------------------------------------------------
    '-------------------------------------------------------------------------------------------------------------

    Private Sub SetVisualStyle()

        Try
            oInvApp = GetObject(, "Inventor.Application")
        Catch ex As Exception
            Exit Sub

        End Try

        If oInvApp.ActiveDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then

        Else Exit Sub

        End If

        Dim ocheckDoc As AssemblyDocument
        ocheckDoc = oInvApp.ActiveDocument



        Try
            oInvApp.ColorSchemes.Item("Winter Day").Activate()
            oInvApp.ColorSchemes.BackgroundType = BackgroundTypeEnum.kOneColorBackgroundType
        Catch
            oInvApp.ColorSchemes.Item("Wonderland").Activate()
            oInvApp.ColorSchemes.BackgroundType = BackgroundTypeEnum.kOneColorBackgroundType
        Finally
        End Try


        Try
            oInvApp.DisplayOptions.UseDocumentDisplaySettings = False

            oInvApp.DisplayOptions.EdgeColor.SetColor(255, 255, 255)
        Catch
        End Try


        Try
            Dim oListyle As LightingStyle
            oListyle = ocheckDoc.LightingStyles.Item("Two Lights")
            ocheckDoc.ActiveLightingStyle = oListyle
        Catch
        End Try


        Try
            ocheckDoc.ActiveLightingStyle = ocheckDoc.LightingStyles.Item("Two Lights")
        Catch
        End Try

        Try
            ocheckDoc.ActiveLightingStyle.Lights.Item(1).Intensity = 1
            ocheckDoc.ActiveLightingStyle.Lights.Item(1).Color.GetColor(255, 255, 255)
            ocheckDoc.ActiveLightingStyle.Lights.Item(2).Intensity = 1
            ocheckDoc.ActiveLightingStyle.Lights.Item(2).Color.GetColor(180, 180, 200)
        Catch
        End Try

        Try
            ocheckDoc.ActiveLightingStyle.Lights.Item(3).On = False
            ocheckDoc.ActiveLightingStyle.Lights.Item(4).On = False
        Catch
        End Try

        Try
            ocheckDoc.ActiveLightingStyle.Brightness = 0.6
        Catch
        End Try

        Dim oView As View = oInvApp.ActiveView

        Try
            oView.ShowGroundShadows = False
            oView.ShowObjectShadows = False
            oView.ShowGroundReflections = False
            oView.ShowAmbientShadows = False
            oView.ShowGroundPlane = False
        Catch

        End Try

        Try
            oView.DisplayMode = DisplayModeEnum.kShadedWithEdgesRendering
            oView.Update()
        Catch
        End Try

        Try
            Dim InvCam As Camera
            InvCam = oInvApp.ActiveView.Camera
            InvCam.Perspective = False
            InvCam.ApplyWithoutTransition()
        Catch
        End Try

    End Sub


End Class